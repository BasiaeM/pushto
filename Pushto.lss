
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00800060  00001cfc  00001d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080011a  0080011a  00001e4a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001648  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000068d  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000428  00000000  00000000  00003bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00004020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030a  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a76  00000000  00000000  0000467e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_1>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_2>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_6>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <nowy_cel+0x2f2>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 00       	.word	0x003f	; ????

000000dc <__trampolines_end>:
      dc:	63 64       	ori	r22, 0x43	; 67
      de:	69 6e       	ori	r22, 0xE9	; 233
      e0:	6f 70       	andi	r22, 0x0F	; 15
      e2:	73 75       	andi	r23, 0x53	; 83
      e4:	78 58       	subi	r23, 0x88	; 136
      e6:	5b 00       	.word	0x005b	; ????

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e6       	ldi	r26, 0x60	; 96
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	ec ef       	ldi	r30, 0xFC	; 252
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	aa 31       	cpi	r26, 0x1A	; 26
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	aa e1       	ldi	r26, 0x1A	; 26
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	af 34       	cpi	r26, 0x4F	; 79
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <main>
     11e:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <system_init>:
    

void system_init (void)
{	
	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
     126:	85 b7       	in	r24, 0x35	; 53
     128:	85 60       	ori	r24, 0x05	; 5
     12a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
     12c:	8b b7       	in	r24, 0x3b	; 59
     12e:	80 6c       	ori	r24, 0xC0	; 192
     130:	8b bf       	out	0x3b, r24	; 59
	
	/*inicjalizacja LCD*/
	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
     132:	8f ef       	ldi	r24, 0xFF	; 255
     134:	8a bb       	out	0x1a, r24	; 26
	encoder2.maskA=0b000001000;
	encoder2.maskB=0b000000010;
	encoder2.count=0;*/

	//inicjalizacja klawiatury
	keypad_A.i=0; //zerowanie wskaznika buforu
     136:	ea e1       	ldi	r30, 0x1A	; 26
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	13 8a       	std	Z+19, r1	; 0x13
     13c:	12 8a       	std	Z+18, r1	; 0x12
	keypad_A.flags='\0';
     13e:	14 8a       	std	Z+20, r1	; 0x14
	keypad_A.last_result = 0xFF;
     140:	81 83       	std	Z+1, r24	; 0x01

	telescope_A.update=0; //flaga aktualizacja nastaw
     142:	10 92 36 01 	sts	0x0136, r1
     146:	10 92 35 01 	sts	0x0135, r1

	//############# Timer1 16bit config ####################
	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
     14a:	9f b5       	in	r25, 0x2f	; 47
     14c:	9f bd       	out	0x2f, r25	; 47
 	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Mode = CTC, Prescaler = 64
     14e:	9e b5       	in	r25, 0x2e	; 46
     150:	9b 60       	ori	r25, 0x0B	; 11
     152:	9e bd       	out	0x2e, r25	; 46
	OCR1A = 31250;   // timer compare value 1Hz - 31250 
     154:	22 e1       	ldi	r18, 0x12	; 18
     156:	3a e7       	ldi	r19, 0x7A	; 122
     158:	3b bd       	out	0x2b, r19	; 43
     15a:	2a bd       	out	0x2a, r18	; 42
	TIMSK|=(1<<OCIE1A); //enable compare reg A interrupt
     15c:	99 b7       	in	r25, 0x39	; 57
     15e:	90 61       	ori	r25, 0x10	; 16
     160:	99 bf       	out	0x39, r25	; 57
	
    	sei(); // enable global interrupts
     162:	78 94       	sei

    	//dioda -test
    	DDRC = 0xFF;
     164:	84 bb       	out	0x14, r24	; 20
    	PORTC = 0xFF;
     166:	85 bb       	out	0x15, r24	; 21
     168:	08 95       	ret

0000016a <__vector_6>:
    	sscanf(buf1,"ala ma kota"); // dziala, moze byc uzywane
    	*/
}

ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
{
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	5f 93       	push	r21
     176:	6f 93       	push	r22
     178:	7f 93       	push	r23
     17a:	8f 93       	push	r24
     17c:	9f 93       	push	r25
     17e:	af 93       	push	r26
     180:	bf 93       	push	r27
	telescope_A.time++; //czas od kalibracji w sekundachs
     182:	80 91 33 01 	lds	r24, 0x0133
     186:	90 91 34 01 	lds	r25, 0x0134
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	90 93 34 01 	sts	0x0134, r25
     190:	80 93 33 01 	sts	0x0133, r24
	if(telescope_A.time%10==0)
     194:	6a e0       	ldi	r22, 0x0A	; 10
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>
     19c:	89 2b       	or	r24, r25
     19e:	31 f4       	brne	.+12     	; 0x1ac <__vector_6+0x42>
		telescope_A.update=1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	90 93 36 01 	sts	0x0136, r25
     1a8:	80 93 35 01 	sts	0x0135, r24
}
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <__vector_1>:

ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
{
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
	//direction(&encoder1);
}
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <__vector_2>:

ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
{
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
	//direction(&encoder2);
}
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	0f 90       	pop	r0
     1e8:	1f 90       	pop	r1
     1ea:	18 95       	reti

000001ec <lcdcmd>:
#include <util/delay.h>

void lcdcmd(unsigned char Dane)
{

LCD_PORT &= ~RS; //wysy≈Çanie polecenia
     1ec:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     1ee:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     1f0:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT &= 0x0f;
     1f2:	9b b3       	in	r25, 0x1b	; 27
     1f4:	9f 70       	andi	r25, 0x0F	; 15
     1f6:	9b bb       	out	0x1b, r25	; 27

LCD_PORT |= ((Dane ) & 0xf0);
     1f8:	9b b3       	in	r25, 0x1b	; 27
     1fa:	28 2f       	mov	r18, r24
     1fc:	20 7f       	andi	r18, 0xF0	; 240
     1fe:	92 2b       	or	r25, r18
     200:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     202:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     204:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	e3 ef       	ldi	r30, 0xF3	; 243
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcdcmd+0x1e>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <lcdcmd+0x24>
     210:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     212:	da 98       	cbi	0x1b, 2	; 27

LCD_PORT &= 0x0f;
     214:	9b b3       	in	r25, 0x1b	; 27
     216:	9f 70       	andi	r25, 0x0F	; 15
     218:	9b bb       	out	0x1b, r25	; 27

LCD_PORT  |= ((Dane<<4) &  0xf0);
     21a:	2b b3       	in	r18, 0x1b	; 27
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	8f 9f       	mul	r24, r31
     220:	c0 01       	movw	r24, r0
     222:	11 24       	eor	r1, r1
     224:	82 2b       	or	r24, r18
     226:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     228:	da 9a       	sbi	0x1b, 2	; 27
     22a:	83 ef       	ldi	r24, 0xF3	; 243
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcdcmd+0x42>
     232:	00 c0       	rjmp	.+0      	; 0x234 <lcdcmd+0x48>
     234:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     236:	da 98       	cbi	0x1b, 2	; 27
     238:	08 95       	ret

0000023a <lcdData>:


}
void lcdData(unsigned char l)
{
LCD_PORT |=RS;  //wysylanie danych
     23a:	d8 9a       	sbi	0x1b, 0	; 27
LCD_PORT &=~RW;
     23c:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  &=~EN;
     23e:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     240:	9b b3       	in	r25, 0x1b	; 27
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	9b bb       	out	0x1b, r25	; 27
LCD_PORT |=((l ) & 0xf0);
     246:	9b b3       	in	r25, 0x1b	; 27
     248:	28 2f       	mov	r18, r24
     24a:	20 7f       	andi	r18, 0xF0	; 240
     24c:	92 2b       	or	r25, r18
     24e:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     250:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     252:	da 9a       	sbi	0x1b, 2	; 27
     254:	e3 ef       	ldi	r30, 0xF3	; 243
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <lcdData+0x1e>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <lcdData+0x24>
     25e:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     260:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     262:	9b b3       	in	r25, 0x1b	; 27
     264:	9f 70       	andi	r25, 0x0F	; 15
     266:	9b bb       	out	0x1b, r25	; 27
LCD_PORT  |= ((l<<4) &  0xf0);
     268:	2b b3       	in	r18, 0x1b	; 27
     26a:	f0 e1       	ldi	r31, 0x10	; 16
     26c:	8f 9f       	mul	r24, r31
     26e:	c0 01       	movw	r24, r0
     270:	11 24       	eor	r1, r1
     272:	82 2b       	or	r24, r18
     274:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     276:	da 9a       	sbi	0x1b, 2	; 27
     278:	83 ef       	ldi	r24, 0xF3	; 243
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcdData+0x42>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcdData+0x48>
     282:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     284:	da 98       	cbi	0x1b, 2	; 27
     286:	08 95       	ret

00000288 <lcdInit>:

}

void lcdInit(void)
{
LCD_PORT &=~RS;
     288:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     28a:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     28c:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT |= 0x30;
     28e:	8b b3       	in	r24, 0x1b	; 27
     290:	80 63       	ori	r24, 0x30	; 48
     292:	8b bb       	out	0x1b, r24	; 27
     294:	8f e0       	ldi	r24, 0x0F	; 15
     296:	97 e2       	ldi	r25, 0x27	; 39
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <lcdInit+0x10>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcdInit+0x16>
     29e:	00 00       	nop
_delay_ms(40);
LCD_PORT  |=EN;
     2a0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2a2:	da 98       	cbi	0x1b, 2	; 27
     2a4:	81 ee       	ldi	r24, 0xE1	; 225
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcdInit+0x20>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcdInit+0x26>
     2ae:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     2b0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2b2:	da 98       	cbi	0x1b, 2	; 27
     2b4:	81 ee       	ldi	r24, 0xE1	; 225
     2b6:	94 e0       	ldi	r25, 0x04	; 4
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcdInit+0x30>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <lcdInit+0x36>
     2be:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     2c0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2c2:	da 98       	cbi	0x1b, 2	; 27
     2c4:	83 ef       	ldi	r24, 0xF3	; 243
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcdInit+0x40>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcdInit+0x46>
     2ce:	00 00       	nop
_delay_ms(2);

LCD_PORT &= 0x20;
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	80 72       	andi	r24, 0x20	; 32
     2d4:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     2d6:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2d8:	da 98       	cbi	0x1b, 2	; 27
lcdcmd(0x28);   //set data length 4 bit 2 line
     2da:	88 e2       	ldi	r24, 0x28	; 40
     2dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     2e0:	83 ed       	ldi	r24, 0xD3	; 211
     2e2:	90 e3       	ldi	r25, 0x30	; 48
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcdInit+0x5c>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcdInit+0x62>
     2ea:	00 00       	nop
_delay_ms(50);
lcdcmd(0x0E);   // set display on cursor on blink on
     2ec:	8e e0       	ldi	r24, 0x0E	; 14
     2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     2f2:	83 ed       	ldi	r24, 0xD3	; 211
     2f4:	90 e3       	ldi	r25, 0x30	; 48
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcdInit+0x6e>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcdInit+0x74>
     2fc:	00 00       	nop
_delay_ms(50);
lcdcmd(0x01); // clear lcd
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     304:	83 ed       	ldi	r24, 0xD3	; 211
     306:	90 e3       	ldi	r25, 0x30	; 48
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <lcdInit+0x80>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <lcdInit+0x86>
     30e:	00 00       	nop
_delay_ms(50);
lcdcmd(0x06);  // cursor shift direction
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     316:	83 ed       	ldi	r24, 0xD3	; 211
     318:	90 e3       	ldi	r25, 0x30	; 48
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcdInit+0x92>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <lcdInit+0x98>
     320:	00 00       	nop
_delay_ms(50);
lcdcmd(0x80);  //set ram address
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     328:	83 ed       	ldi	r24, 0xD3	; 211
     32a:	90 e3       	ldi	r25, 0x30	; 48
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcdInit+0xa4>
     330:	00 c0       	rjmp	.+0      	; 0x332 <lcdInit+0xaa>
     332:	00 00       	nop
     334:	08 95       	ret

00000336 <prints>:
}



void prints(const char *s)
  {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24

    while (*s)
     33c:	89 91       	ld	r24, Y+
     33e:	88 23       	and	r24, r24
     340:	19 f0       	breq	.+6      	; 0x348 <prints+0x12>
      {
	 lcdData(*s);
     342:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
     346:	fa cf       	rjmp	.-12     	; 0x33c <prints+0x6>
	 s++;
      }
  }
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
 if(x<40)
     34e:	88 32       	cpi	r24, 0x28	; 40
     350:	28 f4       	brcc	.+10     	; 0x35c <gotoXy+0xe>
 {
  if(y) x |= 0x40;
     352:	61 11       	cpse	r22, r1
     354:	80 64       	ori	r24, 0x40	; 64
  x |=0x80;
  lcdcmd(x);
     356:	80 68       	ori	r24, 0x80	; 128
     358:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <lcdcmd>
     35c:	08 95       	ret

0000035e <integerToLcd>:
  }

}
void integerToLcd(int integer )
{
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	1f 92       	push	r1
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	7c 01       	movw	r14, r24

unsigned char thousands,hundreds,tens,ones;
thousands = integer / 1000;
     372:	68 ee       	ldi	r22, 0xE8	; 232
     374:	73 e0       	ldi	r23, 0x03	; 3
     376:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>

    lcdData(thousands + 0x30);
     37a:	80 e3       	ldi	r24, 0x30	; 48
     37c:	86 0f       	add	r24, r22
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>

	 hundreds = ((integer - thousands*1000)-1) / 100;
     384:	88 e1       	ldi	r24, 0x18	; 24
     386:	9c ef       	ldi	r25, 0xFC	; 252
     388:	69 81       	ldd	r22, Y+1	; 0x01
     38a:	68 9f       	mul	r22, r24
     38c:	90 01       	movw	r18, r0
     38e:	69 9f       	mul	r22, r25
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	2e 0d       	add	r18, r14
     396:	3f 1d       	adc	r19, r15
     398:	c9 01       	movw	r24, r18
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	04 e6       	ldi	r16, 0x64	; 100
     39e:	10 e0       	ldi	r17, 0x00	; 0
     3a0:	b8 01       	movw	r22, r16
     3a2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>

	lcdData( hundreds + 0x30);
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	86 0f       	add	r24, r22
     3aa:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
tens=(integer%100)/10;
     3ae:	c7 01       	movw	r24, r14
     3b0:	b8 01       	movw	r22, r16
     3b2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>
     3b6:	0a e0       	ldi	r16, 0x0A	; 10
     3b8:	10 e0       	ldi	r17, 0x00	; 0
     3ba:	b8 01       	movw	r22, r16
     3bc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>

	lcdData( tens + 0x30);
     3c0:	80 e3       	ldi	r24, 0x30	; 48
     3c2:	86 0f       	add	r24, r22
     3c4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
	ones=integer%10;
     3c8:	c7 01       	movw	r24, r14
     3ca:	b8 01       	movw	r22, r16
     3cc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__divmodhi4>

	lcdData( ones + 0x30);
     3d0:	80 5d       	subi	r24, 0xD0	; 208
}
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
tens=(integer%100)/10;

	lcdData( tens + 0x30);
	ones=integer%10;

	lcdData( ones + 0x30);
     3e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <lcdData>

000003e4 <lcd_clr>:
{
 if(x<40)
 {
  if(y) x |= 0x40;
  x |=0x80;
  lcdcmd(x);
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
}

void lcd_clr(void)
{
  gotoXy(0,0);
  prints("                ");
     3ea:	88 e6       	ldi	r24, 0x68	; 104
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
{
 if(x<40)
 {
  if(y) x |= 0x40;
  x |=0x80;
  lcdcmd(x);
     3f2:	80 ec       	ldi	r24, 0xC0	; 192
     3f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
void lcd_clr(void)
{
  gotoXy(0,0);
  prints("                ");
  gotoXy(0,1);
  prints("                ");
     3f8:	88 e6       	ldi	r24, 0x68	; 104
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0c 94 9b 01 	jmp	0x336	; 0x336 <prints>

00000400 <keypad>:
#include "keypad.h"


char keypad(struct Key *klaw) 
 {
     400:	fc 01       	movw	r30, r24
	klaw->result=0;
     402:	10 82       	st	Z, r1
	KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
     404:	80 ef       	ldi	r24, 0xF0	; 240
     406:	81 bb       	out	0x11, r24	; 17
	KB_PORT=0b00001111;
     408:	9f e0       	ldi	r25, 0x0F	; 15
     40a:	92 bb       	out	0x12, r25	; 18
     40c:	a7 e8       	ldi	r26, 0x87	; 135
     40e:	b3 e1       	ldi	r27, 0x13	; 19
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <keypad+0x10>
     414:	00 c0       	rjmp	.+0      	; 0x416 <keypad+0x16>
     416:	00 00       	nop
	_delay_ms(20);
	klaw->result = KB_PIN;
     418:	20 b3       	in	r18, 0x10	; 16
     41a:	20 83       	st	Z, r18

	//odczyt wierszy
	KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
     41c:	91 bb       	out	0x11, r25	; 17
	KB_PORT=0b11110000;
     41e:	82 bb       	out	0x12, r24	; 18
     420:	87 e8       	ldi	r24, 0x87	; 135
     422:	93 e1       	ldi	r25, 0x13	; 19
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <keypad+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <keypad+0x2a>
     42a:	00 00       	nop
	_delay_ms(20);
	klaw->result |= KB_PIN; 
     42c:	80 b3       	in	r24, 0x10	; 16
     42e:	90 81       	ld	r25, Z
     430:	98 2b       	or	r25, r24
     432:	90 83       	st	Z, r25

	if(klaw->result == klaw->last_result)
     434:	81 81       	ldd	r24, Z+1	; 0x01
     436:	98 13       	cpse	r25, r24
     438:	03 c0       	rjmp	.+6      	; 0x440 <keypad+0x40>
	{
		klaw->last_result = klaw->result;
		return klaw->result=0xFF;
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	80 83       	st	Z, r24
     43e:	08 95       	ret
	}
	else
	{
		klaw->last_result = klaw->result;
     440:	91 83       	std	Z+1, r25	; 0x01
		return klaw->result; //ostatnio wcisniety
     442:	89 2f       	mov	r24, r25
	}
}
     444:	08 95       	ret

00000446 <keypad_clr_buf>:
	

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
     446:	ec e1       	ldi	r30, 0x1C	; 28
     448:	f1 e0       	ldi	r31, 0x01	; 1
	for(int i=0;i<16;i++) //czyszczenie bufora
				keypad_A.buf[i]='\0'; 
     44a:	11 92       	st	Z+, r1

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
	for(int i=0;i<16;i++) //czyszczenie bufora
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	ec 32       	cpi	r30, 0x2C	; 44
     450:	f8 07       	cpc	r31, r24
     452:	d9 f7       	brne	.-10     	; 0x44a <keypad_clr_buf+0x4>
				keypad_A.buf[i]='\0'; 
	keypad_A.i=0; //zerowanie wskaznika zapisu bufora
     454:	10 92 2d 01 	sts	0x012D, r1
     458:	10 92 2c 01 	sts	0x012C, r1
     45c:	08 95       	ret

0000045e <keypad_proc>:
		return klaw->result; //ostatnio wcisniety
	}
}

void keypad_proc(struct Key *klaw)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	fc 01       	movw	r30, r24

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     464:	80 81       	ld	r24, Z
     466:	87 3d       	cpi	r24, 0xD7	; 215
     468:	09 f4       	brne	.+2      	; 0x46c <__stack+0xd>
     46a:	c4 c0       	rjmp	.+392    	; 0x5f4 <__stack+0x195>
     46c:	58 f5       	brcc	.+86     	; 0x4c4 <__stack+0x65>
     46e:	87 3b       	cpi	r24, 0xB7	; 183
     470:	09 f4       	brne	.+2      	; 0x474 <__stack+0x15>
     472:	6c c0       	rjmp	.+216    	; 0x54c <__stack+0xed>
     474:	98 f4       	brcc	.+38     	; 0x49c <__stack+0x3d>
     476:	8b 37       	cpi	r24, 0x7B	; 123
     478:	09 f4       	brne	.+2      	; 0x47c <__stack+0x1d>
     47a:	51 c0       	rjmp	.+162    	; 0x51e <__stack+0xbf>
     47c:	8d 37       	cpi	r24, 0x7D	; 125
     47e:	09 f4       	brne	.+2      	; 0x482 <__stack+0x23>
     480:	4b c0       	rjmp	.+150    	; 0x518 <__stack+0xb9>
     482:	87 37       	cpi	r24, 0x77	; 119
     484:	09 f0       	breq	.+2      	; 0x488 <__stack+0x29>
     486:	c1 c0       	rjmp	.+386    	; 0x60a <__stack+0x1ab>
     488:	ef 01       	movw	r28, r30
			klaw->flags |= KB_M;
	
		}break; 

		case 0b01110111     : { //D - czyszczenie
			 keypad_clr_buf();//czyszczenie bufora
     48a:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
			//czyszczenie flag
			klaw->flags &= ~KB_H;
			klaw->flags &= ~KB_M;
     48e:	9c 89       	ldd	r25, Y+20	; 0x14
     490:	93 7f       	andi	r25, 0xF3	; 243
			klaw->flags |= KB_CLR;
     492:	90 61       	ori	r25, 0x10	; 16
     494:	9c 8b       	std	Y+20, r25	; 0x14
			//czyszczenie wskaznika buforu
			klaw->i = 0;
     496:	1b 8a       	std	Y+19, r1	; 0x13
     498:	1a 8a       	std	Y+18, r1	; 0x12
		}; break; 
     49a:	b7 c0       	rjmp	.+366    	; 0x60a <__stack+0x1ab>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     49c:	8d 3b       	cpi	r24, 0xBD	; 189
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__stack+0x43>
     4a0:	9e c0       	rjmp	.+316    	; 0x5de <__stack+0x17f>
     4a2:	8e 3b       	cpi	r24, 0xBE	; 190
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__stack+0x49>
     4a6:	7a c0       	rjmp	.+244    	; 0x59c <__stack+0x13d>
     4a8:	8b 3b       	cpi	r24, 0xBB	; 187
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__stack+0x4f>
     4ac:	ae c0       	rjmp	.+348    	; 0x60a <__stack+0x1ab>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
     4ae:	82 89       	ldd	r24, Z+18	; 0x12
     4b0:	93 89       	ldd	r25, Z+19	; 0x13
     4b2:	9c 01       	movw	r18, r24
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	33 8b       	std	Z+19, r19	; 0x13
     4ba:	22 8b       	std	Z+18, r18	; 0x12
     4bc:	e8 0f       	add	r30, r24
     4be:	f9 1f       	adc	r31, r25
     4c0:	89 e3       	ldi	r24, 0x39	; 57
     4c2:	a2 c0       	rjmp	.+324    	; 0x608 <__stack+0x1a9>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     4c4:	87 3e       	cpi	r24, 0xE7	; 231
     4c6:	79 f1       	breq	.+94     	; 0x526 <__stack+0xc7>
     4c8:	a0 f4       	brcc	.+40     	; 0x4f2 <__stack+0x93>
     4ca:	8d 3d       	cpi	r24, 0xDD	; 221
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__stack+0x71>
     4ce:	7c c0       	rjmp	.+248    	; 0x5c8 <__stack+0x169>
     4d0:	8e 3d       	cpi	r24, 0xDE	; 222
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <__stack+0x77>
     4d4:	58 c0       	rjmp	.+176    	; 0x586 <__stack+0x127>
     4d6:	8b 3d       	cpi	r24, 0xDB	; 219
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__stack+0x7d>
     4da:	97 c0       	rjmp	.+302    	; 0x60a <__stack+0x1ab>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
     4dc:	82 89       	ldd	r24, Z+18	; 0x12
     4de:	93 89       	ldd	r25, Z+19	; 0x13
     4e0:	9c 01       	movw	r18, r24
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	33 8b       	std	Z+19, r19	; 0x13
     4e8:	22 8b       	std	Z+18, r18	; 0x12
     4ea:	e8 0f       	add	r30, r24
     4ec:	f9 1f       	adc	r31, r25
     4ee:	88 e3       	ldi	r24, 0x38	; 56
     4f0:	8b c0       	rjmp	.+278    	; 0x608 <__stack+0x1a9>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     4f2:	8d 3e       	cpi	r24, 0xED	; 237
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__stack+0x99>
     4f6:	5d c0       	rjmp	.+186    	; 0x5b2 <__stack+0x153>
     4f8:	8e 3e       	cpi	r24, 0xEE	; 238
     4fa:	d1 f1       	breq	.+116    	; 0x570 <__stack+0x111>
     4fc:	8b 3e       	cpi	r24, 0xEB	; 235
     4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0xa3>
     500:	84 c0       	rjmp	.+264    	; 0x60a <__stack+0x1ab>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
     502:	82 89       	ldd	r24, Z+18	; 0x12
     504:	93 89       	ldd	r25, Z+19	; 0x13
     506:	9c 01       	movw	r18, r24
     508:	2f 5f       	subi	r18, 0xFF	; 255
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	33 8b       	std	Z+19, r19	; 0x13
     50e:	22 8b       	std	Z+18, r18	; 0x12
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	87 e3       	ldi	r24, 0x37	; 55
     516:	78 c0       	rjmp	.+240    	; 0x608 <__stack+0x1a9>
	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
	{
		//klawisze funkcyjne
		
		//case 0b01111110     : ; break; //A - potwierdzenie (accept)
		case 0b01111101     : klaw->flags |= KB_NEW; break; //B - wprowadzanie nowego obiektu
     518:	84 89       	ldd	r24, Z+20	; 0x14
     51a:	80 64       	ori	r24, 0x40	; 64
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__stack+0xc3>
		case 0b01111011     : klaw->flags |= KB_CAL ; break; //C - kalibracja (calibration)
     51e:	84 89       	ldd	r24, Z+20	; 0x14
     520:	80 62       	ori	r24, 0x20	; 32
     522:	84 8b       	std	Z+20, r24	; 0x14
     524:	72 c0       	rjmp	.+228    	; 0x60a <__stack+0x1ab>

		case 0b11100111     : { //* H
			if(!(klaw->flags & KB_H) && !(klaw->flags & KB_M)) //jesli brak flagi H i M
     526:	84 89       	ldd	r24, Z+20	; 0x14
     528:	98 2f       	mov	r25, r24
     52a:	9c 70       	andi	r25, 0x0C	; 12
     52c:	69 f4       	brne	.+26     	; 0x548 <__stack+0xe9>
				klaw->buf[klaw->i++]='H';
     52e:	22 89       	ldd	r18, Z+18	; 0x12
     530:	33 89       	ldd	r19, Z+19	; 0x13
     532:	a9 01       	movw	r20, r18
     534:	4f 5f       	subi	r20, 0xFF	; 255
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	53 8b       	std	Z+19, r21	; 0x13
     53a:	42 8b       	std	Z+18, r20	; 0x12
     53c:	df 01       	movw	r26, r30
     53e:	a2 0f       	add	r26, r18
     540:	b3 1f       	adc	r27, r19
     542:	98 e4       	ldi	r25, 0x48	; 72
     544:	12 96       	adiw	r26, 0x02	; 2
     546:	9c 93       	st	X, r25
			klaw->flags |= KB_H;
     548:	88 60       	ori	r24, 0x08	; 8
     54a:	eb cf       	rjmp	.-42     	; 0x522 <__stack+0xc3>

		} break; 
		case 0b10110111     :{ //# M
			if(!(klaw->flags & KB_M))
     54c:	84 89       	ldd	r24, Z+20	; 0x14
     54e:	82 fd       	sbrc	r24, 2
     550:	0d c0       	rjmp	.+26     	; 0x56c <__stack+0x10d>
				klaw->buf[klaw->i++]='M';
     552:	22 89       	ldd	r18, Z+18	; 0x12
     554:	33 89       	ldd	r19, Z+19	; 0x13
     556:	a9 01       	movw	r20, r18
     558:	4f 5f       	subi	r20, 0xFF	; 255
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	53 8b       	std	Z+19, r21	; 0x13
     55e:	42 8b       	std	Z+18, r20	; 0x12
     560:	df 01       	movw	r26, r30
     562:	a2 0f       	add	r26, r18
     564:	b3 1f       	adc	r27, r19
     566:	9d e4       	ldi	r25, 0x4D	; 77
     568:	12 96       	adiw	r26, 0x02	; 2
     56a:	9c 93       	st	X, r25
			klaw->flags |= KB_M;
     56c:	84 60       	ori	r24, 0x04	; 4
     56e:	d9 cf       	rjmp	.-78     	; 0x522 <__stack+0xc3>
		}; break; 
		

		
		//klawisz numeryczny     
		case 0b11101110     : klaw->buf[klaw->i++]='1'; break; //1
     570:	82 89       	ldd	r24, Z+18	; 0x12
     572:	93 89       	ldd	r25, Z+19	; 0x13
     574:	9c 01       	movw	r18, r24
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	33 8b       	std	Z+19, r19	; 0x13
     57c:	22 8b       	std	Z+18, r18	; 0x12
     57e:	e8 0f       	add	r30, r24
     580:	f9 1f       	adc	r31, r25
     582:	81 e3       	ldi	r24, 0x31	; 49
     584:	41 c0       	rjmp	.+130    	; 0x608 <__stack+0x1a9>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
     586:	82 89       	ldd	r24, Z+18	; 0x12
     588:	93 89       	ldd	r25, Z+19	; 0x13
     58a:	9c 01       	movw	r18, r24
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	33 8b       	std	Z+19, r19	; 0x13
     592:	22 8b       	std	Z+18, r18	; 0x12
     594:	e8 0f       	add	r30, r24
     596:	f9 1f       	adc	r31, r25
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	36 c0       	rjmp	.+108    	; 0x608 <__stack+0x1a9>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
     59c:	82 89       	ldd	r24, Z+18	; 0x12
     59e:	93 89       	ldd	r25, Z+19	; 0x13
     5a0:	9c 01       	movw	r18, r24
     5a2:	2f 5f       	subi	r18, 0xFF	; 255
     5a4:	3f 4f       	sbci	r19, 0xFF	; 255
     5a6:	33 8b       	std	Z+19, r19	; 0x13
     5a8:	22 8b       	std	Z+18, r18	; 0x12
     5aa:	e8 0f       	add	r30, r24
     5ac:	f9 1f       	adc	r31, r25
     5ae:	83 e3       	ldi	r24, 0x33	; 51
     5b0:	2b c0       	rjmp	.+86     	; 0x608 <__stack+0x1a9>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
     5b2:	82 89       	ldd	r24, Z+18	; 0x12
     5b4:	93 89       	ldd	r25, Z+19	; 0x13
     5b6:	9c 01       	movw	r18, r24
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	33 8b       	std	Z+19, r19	; 0x13
     5be:	22 8b       	std	Z+18, r18	; 0x12
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	20 c0       	rjmp	.+64     	; 0x608 <__stack+0x1a9>
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
     5c8:	82 89       	ldd	r24, Z+18	; 0x12
     5ca:	93 89       	ldd	r25, Z+19	; 0x13
     5cc:	9c 01       	movw	r18, r24
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	33 8b       	std	Z+19, r19	; 0x13
     5d4:	22 8b       	std	Z+18, r18	; 0x12
     5d6:	e8 0f       	add	r30, r24
     5d8:	f9 1f       	adc	r31, r25
     5da:	85 e3       	ldi	r24, 0x35	; 53
     5dc:	15 c0       	rjmp	.+42     	; 0x608 <__stack+0x1a9>
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
     5de:	82 89       	ldd	r24, Z+18	; 0x12
     5e0:	93 89       	ldd	r25, Z+19	; 0x13
     5e2:	9c 01       	movw	r18, r24
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	33 8b       	std	Z+19, r19	; 0x13
     5ea:	22 8b       	std	Z+18, r18	; 0x12
     5ec:	e8 0f       	add	r30, r24
     5ee:	f9 1f       	adc	r31, r25
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	0a c0       	rjmp	.+20     	; 0x608 <__stack+0x1a9>
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
		case 0b11010111     : klaw->buf[klaw->i++]='0'; break; //0
     5f4:	82 89       	ldd	r24, Z+18	; 0x12
     5f6:	93 89       	ldd	r25, Z+19	; 0x13
     5f8:	9c 01       	movw	r18, r24
     5fa:	2f 5f       	subi	r18, 0xFF	; 255
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	33 8b       	std	Z+19, r19	; 0x13
     600:	22 8b       	std	Z+18, r18	; 0x12
     602:	e8 0f       	add	r30, r24
     604:	f9 1f       	adc	r31, r25
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	82 83       	std	Z+2, r24	; 0x02
		//default:
	}
	

}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <kalibracja>:
	//do wrzucenia gdzie≈õ????????????????????????????????????????????????????????
	float ralk= ((13.0*15.0)+48.0*(15.0/60.0)+32.0*(15.0/3600.0))*(PI/180.0); //rektascencja gwiazdy alkaid
	float dalk= (49.0+18.0/60)*(PI/180.0);										//deklinacja

void kalibracja(struct Enc *enk1, struct Enc *enk2, struct Telescope *tel) //enkoder1 - wysokosc, enkoder2 - obrot
{
     610:	2f 92       	push	r2
     612:	3f 92       	push	r3
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	2c 97       	sbiw	r28, 0x0c	; 12
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	7c 01       	movw	r14, r24
     646:	8b 01       	movw	r16, r22
     648:	1a 01       	movw	r2, r20
    /*funkcja do kalibracji pushtu, okreslenie polozenia ukladu rownikowego wzgledem ukladu horyzontalnego*/

	float halk;	//wysoko≈õƒá alkaida
	float talk; //kƒÖt godzinny

	gotoXy(0,0);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto zenit-> C");
     652:	89 e7       	ldi	r24, 0x79	; 121
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     65a:	8a e1       	ldi	r24, 0x1A	; 26
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     662:	8b 37       	cpi	r24, 0x7B	; 123
     664:	d1 f7       	brne	.-12     	; 0x65a <kalibracja+0x4a>
	enk1->count=EN1_RANGE/4; //ustawienie wysokosci zenitu
     666:	80 e7       	ldi	r24, 0x70	; 112
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	f7 01       	movw	r30, r14
     66c:	93 83       	std	Z+3, r25	; 0x03
     66e:	82 83       	std	Z+2, r24	; 0x02
	
	gotoXy(0,0);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto polaris-> C");
     678:	88 e8       	ldi	r24, 0x88	; 136
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     680:	8a e1       	ldi	r24, 0x1A	; 26
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     688:	8b 37       	cpi	r24, 0x7B	; 123
     68a:	d1 f7       	brne	.-12     	; 0x680 <kalibracja+0x70>
	enk2->count=0; //ustawienie 0 enkodera na azymucie=0
     68c:	f8 01       	movw	r30, r16
     68e:	13 82       	std	Z+3, r1	; 0x03
     690:	12 82       	std	Z+2, r1	; 0x02
	tel->h_pol=(enk1->count*2.0*PI)/EN1_RANGE; //szeroko≈õƒá geograficzna h_pol, rad
     692:	f7 01       	movw	r30, r14
     694:	62 81       	ldd	r22, Z+2	; 0x02
     696:	73 81       	ldd	r23, Z+3	; 0x03
     698:	07 2e       	mov	r0, r23
     69a:	00 0c       	add	r0, r0
     69c:	88 0b       	sbc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     6ac:	2b ed       	ldi	r18, 0xDB	; 219
     6ae:	3f e0       	ldi	r19, 0x0F	; 15
     6b0:	49 e4       	ldi	r20, 0x49	; 73
     6b2:	50 e4       	ldi	r21, 0x40	; 64
     6b4:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	41 ee       	ldi	r20, 0xE1	; 225
     6be:	53 e4       	ldi	r21, 0x43	; 67
     6c0:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     6c4:	f1 01       	movw	r30, r2
     6c6:	64 8b       	std	Z+20, r22	; 0x14
     6c8:	75 8b       	std	Z+21, r23	; 0x15
     6ca:	86 8b       	std	Z+22, r24	; 0x16
     6cc:	97 8b       	std	Z+23, r25	; 0x17

	gotoXy(0,0);
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto alkaid -> C");
     6d6:	89 e9       	ldi	r24, 0x99	; 153
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     6de:	8a e1       	ldi	r24, 0x1A	; 26
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     6e6:	8b 37       	cpi	r24, 0x7B	; 123
     6e8:	d1 f7       	brne	.-12     	; 0x6de <kalibracja+0xce>
	
	halk=(((EN1_RANGE/4)-enk1->count)/EN1_RANGE)*2.0*PI; //przeliczenie zmierzonej wysoko≈õci na radiany
     6ea:	f7 01       	movw	r30, r14
     6ec:	62 81       	ldd	r22, Z+2	; 0x02
     6ee:	73 81       	ldd	r23, Z+3	; 0x03
     6f0:	07 2e       	mov	r0, r23
     6f2:	00 0c       	add	r0, r0
     6f4:	88 0b       	sbc	r24, r24
     6f6:	99 0b       	sbc	r25, r25
     6f8:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	81 ee       	ldi	r24, 0xE1	; 225
     706:	92 e4       	ldi	r25, 0x42	; 66
     708:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	41 ee       	ldi	r20, 0xE1	; 225
     712:	53 e4       	ldi	r21, 0x43	; 67
     714:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     720:	2b ed       	ldi	r18, 0xDB	; 219
     722:	3f e0       	ldi	r19, 0x0F	; 15
     724:	49 e4       	ldi	r20, 0x49	; 73
     726:	50 e4       	ldi	r21, 0x40	; 64
     728:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
     72c:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     730:	69 83       	std	Y+1, r22	; 0x01
     732:	7a 83       	std	Y+2, r23	; 0x02
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	9c 83       	std	Y+4, r25	; 0x04
     738:	f1 01       	movw	r30, r2
     73a:	84 88       	ldd	r8, Z+20	; 0x14
     73c:	95 88       	ldd	r9, Z+21	; 0x15
     73e:	a6 88       	ldd	r10, Z+22	; 0x16
     740:	b7 88       	ldd	r11, Z+23	; 0x17
     742:	c5 01       	movw	r24, r10
     744:	b4 01       	movw	r22, r8
     746:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     74a:	2b 01       	movw	r4, r22
     74c:	3c 01       	movw	r6, r24
     74e:	c0 90 60 00 	lds	r12, 0x0060
     752:	d0 90 61 00 	lds	r13, 0x0061
     756:	e0 90 62 00 	lds	r14, 0x0062
     75a:	f0 90 63 00 	lds	r15, 0x0063
     75e:	c7 01       	movw	r24, r14
     760:	b6 01       	movw	r22, r12
     762:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	c7 01       	movw	r24, r14
     76c:	b6 01       	movw	r22, r12
     76e:	29 87       	std	Y+9, r18	; 0x09
     770:	3a 87       	std	Y+10, r19	; 0x0a
     772:	4b 87       	std	Y+11, r20	; 0x0b
     774:	5c 87       	std	Y+12, r21	; 0x0c
     776:	0e 94 13 08 	call	0x1026	; 0x1026 <cos>
     77a:	6b 01       	movw	r12, r22
     77c:	7c 01       	movw	r14, r24
     77e:	c5 01       	movw	r24, r10
     780:	b4 01       	movw	r22, r8
     782:	0e 94 13 08 	call	0x1026	; 0x1026 <cos>
     786:	6d 83       	std	Y+5, r22	; 0x05
     788:	7e 83       	std	Y+6, r23	; 0x06
     78a:	8f 83       	std	Y+7, r24	; 0x07
     78c:	98 87       	std	Y+8, r25	; 0x08
     78e:	29 85       	ldd	r18, Y+9	; 0x09
     790:	3a 85       	ldd	r19, Y+10	; 0x0a
     792:	4b 85       	ldd	r20, Y+11	; 0x0b
     794:	5c 85       	ldd	r21, Y+12	; 0x0c
     796:	c3 01       	movw	r24, r6
     798:	b2 01       	movw	r22, r4
     79a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	69 81       	ldd	r22, Y+1	; 0x01
     7a4:	7a 81       	ldd	r23, Y+2	; 0x02
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	9c 81       	ldd	r25, Y+4	; 0x04
     7aa:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     7ae:	4b 01       	movw	r8, r22
     7b0:	5c 01       	movw	r10, r24
     7b2:	2d 81       	ldd	r18, Y+5	; 0x05
     7b4:	3e 81       	ldd	r19, Y+6	; 0x06
     7b6:	4f 81       	ldd	r20, Y+7	; 0x07
     7b8:	58 85       	ldd	r21, Y+8	; 0x08
     7ba:	c7 01       	movw	r24, r14
     7bc:	b6 01       	movw	r22, r12
     7be:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     7c2:	9b 01       	movw	r18, r22
     7c4:	ac 01       	movw	r20, r24
     7c6:	c5 01       	movw	r24, r10
     7c8:	b4 01       	movw	r22, r8
     7ca:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     7ce:	0e 94 46 07 	call	0xe8c	; 0xe8c <acos>
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin
     7d6:	f8 01       	movw	r30, r16
     7d8:	62 81       	ldd	r22, Z+2	; 0x02
     7da:	73 81       	ldd	r23, Z+3	; 0x03
     7dc:	07 2e       	mov	r0, r23
     7de:	00 0c       	add	r0, r0
     7e0:	88 0b       	sbc	r24, r24
     7e2:	99 0b       	sbc	r25, r25
     7e4:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     7f0:	2b ed       	ldi	r18, 0xDB	; 219
     7f2:	3f e0       	ldi	r19, 0x0F	; 15
     7f4:	49 e4       	ldi	r20, 0x49	; 73
     7f6:	50 e4       	ldi	r21, 0x40	; 64
     7f8:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	41 ee       	ldi	r20, 0xE1	; 225
     802:	53 e4       	ldi	r21, 0x43	; 67
     804:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     808:	2b ed       	ldi	r18, 0xDB	; 219
     80a:	3f e0       	ldi	r19, 0x0F	; 15
     80c:	49 e4       	ldi	r20, 0x49	; 73
     80e:	50 e4       	ldi	r21, 0x40	; 64
     810:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpsf2>
     814:	18 16       	cp	r1, r24
     816:	54 f0       	brlt	.+20     	; 0x82c <kalibracja+0x21c>
     818:	2b ed       	ldi	r18, 0xDB	; 219
     81a:	3f e0       	ldi	r19, 0x0F	; 15
     81c:	49 e4       	ldi	r20, 0x49	; 73
     81e:	50 e4       	ldi	r21, 0x40	; 64
     820:	c7 01       	movw	r24, r14
     822:	b6 01       	movw	r22, r12
     824:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     828:	6b 01       	movw	r12, r22
     82a:	7c 01       	movw	r14, r24

	//w radianach????????????????????????????????????
	tel->time=talk+ralk; //ustawianie zegara
     82c:	20 91 64 00 	lds	r18, 0x0064
     830:	30 91 65 00 	lds	r19, 0x0065
     834:	40 91 66 00 	lds	r20, 0x0066
     838:	50 91 67 00 	lds	r21, 0x0067
     83c:	c7 01       	movw	r24, r14
     83e:	b6 01       	movw	r22, r12
     840:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     844:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixsfsi>
     848:	f1 01       	movw	r30, r2
     84a:	71 83       	std	Z+1, r23	; 0x01
     84c:	60 83       	st	Z, r22
	lcd_clr();

}
     84e:	2c 96       	adiw	r28, 0x0c	; 12
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin

	//w radianach????????????????????????????????????
	tel->time=talk+ralk; //ustawianie zegara
	lcd_clr();
     87e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <lcd_clr>

00000882 <nowy_cel>:

}

void nowy_cel(struct Key *klaw, struct Telescope *tel)
{
     882:	2f 92       	push	r2
     884:	3f 92       	push	r3
     886:	4f 92       	push	r4
     888:	5f 92       	push	r5
     88a:	6f 92       	push	r6
     88c:	7f 92       	push	r7
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <nowy_cel+0x26>
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <nowy_cel+0x28>
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <nowy_cel+0x2a>
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	8c 01       	movw	r16, r24
     8b2:	1b 01       	movw	r2, r22
    /*funkcja obslugujaca wprowadzanie nowego celu, 
    zawiera wskazowki dotyczace formatu wprowadzania,
    po wprowadzeniu konwertuje znaki z bufora klawiatury na liczby
    reprezentujace deklinacje i rektastencje zadana*/

	int h=0;
     8b4:	1e 82       	std	Y+6, r1	; 0x06
     8b6:	1d 82       	std	Y+5, r1	; 0x05
	int m=0;
     8b8:	1c 82       	std	Y+4, r1	; 0x04
     8ba:	1b 82       	std	Y+3, r1	; 0x03
	int s=0;
     8bc:	1a 82       	std	Y+2, r1	; 0x02
     8be:	19 82       	std	Y+1, r1	; 0x01
	//testy
	 gotoXy(0,1);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(h);
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	9e 81       	ldd	r25, Y+6	; 0x06
     8cc:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    gotoXy(6,1);
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(m);
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    gotoXy(11,1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8b e0       	ldi	r24, 0x0B	; 11
     8e4:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(s);
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    while(keypad(klaw)!=0b01111101){} //oczekuj na B
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     8f6:	8d 37       	cpi	r24, 0x7D	; 125
     8f8:	d9 f7       	brne	.-10     	; 0x8f0 <nowy_cel+0x6e>


	keypad_clr_buf(); //czyszczenie bufora
     8fa:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
	gotoXy(0,0);
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("podaj dekl i RA ");
     906:	8a ea       	ldi	r24, 0xAA	; 170
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	gotoXy(0,1);
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("format xHyMz ->B");
     916:	8b eb       	ldi	r24, 0xBB	; 187
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     91e:	c8 01       	movw	r24, r16
     920:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     924:	8d 37       	cpi	r24, 0x7D	; 125
     926:	d9 f7       	brne	.-10     	; 0x91e <nowy_cel+0x9c>
	gotoXy(0,0);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("oznaczenia:     ");
     930:	8c ec       	ldi	r24, 0xCC	; 204
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	gotoXy(0,1);
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("H(*) M(#)    ->B");
     940:	8d ed       	ldi	r24, 0xDD	; 221
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     948:	c8 01       	movw	r24, r16
     94a:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     94e:	8d 37       	cpi	r24, 0x7D	; 125
     950:	d9 f7       	brne	.-10     	; 0x948 <nowy_cel+0xc6>
	lcd_clr();
     952:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>

	gotoXy(0,0);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    prints("podaj RA     ->B");
     95e:	8e ee       	ldi	r24, 0xEE	; 238
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
     966:	c8 01       	movw	r24, r16
     968:	02 96       	adiw	r24, 0x02	; 2
     96a:	7c 01       	movw	r14, r24
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     96c:	c8 01       	movw	r24, r16
     96e:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     972:	8d 37       	cpi	r24, 0x7D	; 125
     974:	59 f0       	breq	.+22     	; 0x98c <nowy_cel+0x10a>
    {
    	gotoXy(0,1);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    	keypad_proc(klaw);
     97e:	c8 01       	movw	r24, r16
     980:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>
    	prints(klaw->buf);
     984:	c7 01       	movw	r24, r14
     986:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
     98a:	f0 cf       	rjmp	.-32     	; 0x96c <nowy_cel+0xea>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     98c:	fe 01       	movw	r30, r28
     98e:	31 96       	adiw	r30, 0x01	; 1
     990:	4f 01       	movw	r8, r30
     992:	ff 93       	push	r31
     994:	ef 93       	push	r30
     996:	5e 01       	movw	r10, r28
     998:	f3 e0       	ldi	r31, 0x03	; 3
     99a:	af 0e       	add	r10, r31
     99c:	b1 1c       	adc	r11, r1
     99e:	bf 92       	push	r11
     9a0:	af 92       	push	r10
     9a2:	6e 01       	movw	r12, r28
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	c8 0e       	add	r12, r24
     9a8:	d1 1c       	adc	r13, r1
     9aa:	df 92       	push	r13
     9ac:	cf 92       	push	r12
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	ff 92       	push	r15
     9b8:	ef 92       	push	r14
     9ba:	0e 94 10 0b 	call	0x1620	; 0x1620 <sscanf>
    //testy
    gotoXy(0,1);
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(h);
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ca:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    gotoXy(6,1);
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(m);
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	9c 81       	ldd	r25, Y+4	; 0x04
     9da:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    gotoXy(11,1);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	8b e0       	ldi	r24, 0x0B	; 11
     9e2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    integerToLcd(s);
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ea:	0e 94 af 01 	call	0x35e	; 0x35e <integerToLcd>
    while(keypad(klaw)!=0b01111101){} //oczekuj na B
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	c8 01       	movw	r24, r16
     9fa:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     9fe:	8d 37       	cpi	r24, 0x7D	; 125
     a00:	d9 f7       	brne	.-10     	; 0x9f8 <nowy_cel+0x176>
    tel->re_zad = (15*h+15/60.0*m+15/3600.0*s)*(PI/180.0); //z przeliczeniem na radiany
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	2f e0       	ldi	r18, 0x0F	; 15
     a08:	28 9f       	mul	r18, r24
     a0a:	b0 01       	movw	r22, r0
     a0c:	29 9f       	mul	r18, r25
     a0e:	70 0d       	add	r23, r0
     a10:	11 24       	eor	r1, r1
     a12:	07 2e       	mov	r0, r23
     a14:	00 0c       	add	r0, r0
     a16:	88 0b       	sbc	r24, r24
     a18:	99 0b       	sbc	r25, r25
     a1a:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     a1e:	2b 01       	movw	r4, r22
     a20:	3c 01       	movw	r6, r24
     a22:	6b 81       	ldd	r22, Y+3	; 0x03
     a24:	7c 81       	ldd	r23, Y+4	; 0x04
     a26:	07 2e       	mov	r0, r23
     a28:	00 0c       	add	r0, r0
     a2a:	88 0b       	sbc	r24, r24
     a2c:	99 0b       	sbc	r25, r25
     a2e:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e8       	ldi	r20, 0x80	; 128
     a38:	5e e3       	ldi	r21, 0x3E	; 62
     a3a:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c3 01       	movw	r24, r6
     a44:	b2 01       	movw	r22, r4
     a46:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     a4a:	2b 01       	movw	r4, r22
     a4c:	3c 01       	movw	r6, r24
     a4e:	69 81       	ldd	r22, Y+1	; 0x01
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	07 2e       	mov	r0, r23
     a54:	00 0c       	add	r0, r0
     a56:	88 0b       	sbc	r24, r24
     a58:	99 0b       	sbc	r25, r25
     a5a:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     a5e:	29 e8       	ldi	r18, 0x89	; 137
     a60:	38 e8       	ldi	r19, 0x88	; 136
     a62:	48 e8       	ldi	r20, 0x88	; 136
     a64:	5b e3       	ldi	r21, 0x3B	; 59
     a66:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	c3 01       	movw	r24, r6
     a70:	b2 01       	movw	r22, r4
     a72:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     a76:	25 e3       	ldi	r18, 0x35	; 53
     a78:	3a ef       	ldi	r19, 0xFA	; 250
     a7a:	4e e8       	ldi	r20, 0x8E	; 142
     a7c:	5c e3       	ldi	r21, 0x3C	; 60
     a7e:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     a82:	f1 01       	movw	r30, r2
     a84:	60 87       	std	Z+8, r22	; 0x08
     a86:	71 87       	std	Z+9, r23	; 0x09
     a88:	82 87       	std	Z+10, r24	; 0x0a
     a8a:	93 87       	std	Z+11, r25	; 0x0b

    keypad_clr_buf(); // czyszczenie bufora
     a8c:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
    lcd_clr();
     a90:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
    h=0;m=0;s=0;
     a94:	1e 82       	std	Y+6, r1	; 0x06
     a96:	1d 82       	std	Y+5, r1	; 0x05
     a98:	1c 82       	std	Y+4, r1	; 0x04
     a9a:	1b 82       	std	Y+3, r1	; 0x03
     a9c:	1a 82       	std	Y+2, r1	; 0x02
     a9e:	19 82       	std	Y+1, r1	; 0x01
    klaw->flags &= ~KB_H;
	klaw->flags &= ~KB_M;
     aa0:	f8 01       	movw	r30, r16
     aa2:	84 89       	ldd	r24, Z+20	; 0x14
     aa4:	83 7f       	andi	r24, 0xF3	; 243
     aa6:	84 8b       	std	Z+20, r24	; 0x14
	gotoXy(0,0);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    prints("dekl H to st ->B");
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	91 e0       	ldi	r25, 0x01	; 1
    while(keypad(klaw)!=0b01111101) //oczekuj na B
    {
    	gotoXy(0,1);
    	keypad_proc(klaw);
    	prints(klaw->buf);
     ab4:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
    h=0;m=0;s=0;
    klaw->flags &= ~KB_H;
	klaw->flags &= ~KB_M;
	gotoXy(0,0);
    prints("dekl H to st ->B");
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     ab8:	c8 01       	movw	r24, r16
     aba:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     abe:	8d 37       	cpi	r24, 0x7D	; 125
     ac0:	49 f0       	breq	.+18     	; 0xad4 <nowy_cel+0x252>
    {
    	gotoXy(0,1);
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    	keypad_proc(klaw);
     aca:	c8 01       	movw	r24, r16
     acc:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>
    	prints(klaw->buf);
     ad0:	c7 01       	movw	r24, r14
     ad2:	f0 cf       	rjmp	.-32     	; 0xab4 <nowy_cel+0x232>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     ad4:	9f 92       	push	r9
     ad6:	8f 92       	push	r8
     ad8:	bf 92       	push	r11
     ada:	af 92       	push	r10
     adc:	df 92       	push	r13
     ade:	cf 92       	push	r12
     ae0:	8f ef       	ldi	r24, 0xFF	; 255
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	ff 92       	push	r15
     aea:	ef 92       	push	r14
     aec:	0e 94 10 0b 	call	0x1620	; 0x1620 <sscanf>
    tel->de_zad = (h+m/60.0+s/3600.0)*(PI/180.0); //w radianach
     af0:	6d 81       	ldd	r22, Y+5	; 0x05
     af2:	7e 81       	ldd	r23, Y+6	; 0x06
     af4:	07 2e       	mov	r0, r23
     af6:	00 0c       	add	r0, r0
     af8:	88 0b       	sbc	r24, r24
     afa:	99 0b       	sbc	r25, r25
     afc:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     b00:	6b 01       	movw	r12, r22
     b02:	7c 01       	movw	r14, r24
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	bc 01       	movw	r22, r24
     b0a:	99 0f       	add	r25, r25
     b0c:	88 0b       	sbc	r24, r24
     b0e:	99 0b       	sbc	r25, r25
     b10:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e7       	ldi	r20, 0x70	; 112
     b1a:	52 e4       	ldi	r21, 0x42	; 66
     b1c:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c7 01       	movw	r24, r14
     b26:	b6 01       	movw	r22, r12
     b28:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     b2c:	6b 01       	movw	r12, r22
     b2e:	7c 01       	movw	r14, r24
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	9a 81       	ldd	r25, Y+2	; 0x02
     b34:	bc 01       	movw	r22, r24
     b36:	99 0f       	add	r25, r25
     b38:	88 0b       	sbc	r24, r24
     b3a:	99 0b       	sbc	r25, r25
     b3c:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	41 e6       	ldi	r20, 0x61	; 97
     b46:	55 e4       	ldi	r21, 0x45	; 69
     b48:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     b58:	25 e3       	ldi	r18, 0x35	; 53
     b5a:	3a ef       	ldi	r19, 0xFA	; 250
     b5c:	4e e8       	ldi	r20, 0x8E	; 142
     b5e:	5c e3       	ldi	r21, 0x3C	; 60
     b60:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     b64:	f1 01       	movw	r30, r2
     b66:	64 83       	std	Z+4, r22	; 0x04
     b68:	75 83       	std	Z+5, r23	; 0x05
     b6a:	86 83       	std	Z+6, r24	; 0x06
     b6c:	97 83       	std	Z+7, r25	; 0x07
 	
 	keypad_clr_buf();
     b6e:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
 	lcd_clr();
     b72:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
	klaw->flags='\0'; //czszczenie flag
     b76:	f8 01       	movw	r30, r16
     b78:	14 8a       	std	Z+20, r1	; 0x14
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
}
     b84:	26 96       	adiw	r28, 0x06	; 6
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	3f 90       	pop	r3
     bb2:	2f 90       	pop	r2
     bb4:	08 95       	ret

00000bb6 <obliczenie_nastaw>:

void obliczenie_nastaw(struct Telescope *tel)
{
     bb6:	4f 92       	push	r4
     bb8:	5f 92       	push	r5
     bba:	6f 92       	push	r6
     bbc:	7f 92       	push	r7
     bbe:	8f 92       	push	r8
     bc0:	9f 92       	push	r9
     bc2:	af 92       	push	r10
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	64 97       	sbiw	r28, 0x14	; 20
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	8c 01       	movw	r16, r24
    /*funkcja obliczajaca nastawy dla enkoderow na podstawie wprowadzonych(zadanych)
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
     be8:	fc 01       	movw	r30, r24
     bea:	60 81       	ld	r22, Z
     bec:	71 81       	ldd	r23, Z+1	; 0x01
     bee:	07 2e       	mov	r0, r23
     bf0:	00 0c       	add	r0, r0
     bf2:	88 0b       	sbc	r24, r24
     bf4:	99 0b       	sbc	r25, r25
     bf6:	0e 94 c2 08 	call	0x1184	; 0x1184 <__floatsisf>
     bfa:	f8 01       	movw	r30, r16
     bfc:	20 85       	ldd	r18, Z+8	; 0x08
     bfe:	31 85       	ldd	r19, Z+9	; 0x09
     c00:	42 85       	ldd	r20, Z+10	; 0x0a
     c02:	53 85       	ldd	r21, Z+11	; 0x0b
     c04:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
     c08:	4b 01       	movw	r8, r22
     c0a:	5c 01       	movw	r10, r24
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
     c0c:	f8 01       	movw	r30, r16
     c0e:	24 81       	ldd	r18, Z+4	; 0x04
     c10:	35 81       	ldd	r19, Z+5	; 0x05
     c12:	46 81       	ldd	r20, Z+6	; 0x06
     c14:	57 81       	ldd	r21, Z+7	; 0x07
     c16:	ca 01       	movw	r24, r20
     c18:	b9 01       	movw	r22, r18
     c1a:	29 8b       	std	Y+17, r18	; 0x11
     c1c:	3a 8b       	std	Y+18, r19	; 0x12
     c1e:	4b 8b       	std	Y+19, r20	; 0x13
     c20:	5c 8b       	std	Y+20, r21	; 0x14
     c22:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     c26:	2b 01       	movw	r4, r22
     c28:	3c 01       	movw	r6, r24
     c2a:	f8 01       	movw	r30, r16
     c2c:	c4 88       	ldd	r12, Z+20	; 0x14
     c2e:	d5 88       	ldd	r13, Z+21	; 0x15
     c30:	e6 88       	ldd	r14, Z+22	; 0x16
     c32:	f7 88       	ldd	r15, Z+23	; 0x17
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     c3c:	6d 83       	std	Y+5, r22	; 0x05
     c3e:	7e 83       	std	Y+6, r23	; 0x06
     c40:	8f 83       	std	Y+7, r24	; 0x07
     c42:	98 87       	std	Y+8, r25	; 0x08
     c44:	29 89       	ldd	r18, Y+17	; 0x11
     c46:	3a 89       	ldd	r19, Y+18	; 0x12
     c48:	4b 89       	ldd	r20, Y+19	; 0x13
     c4a:	5c 89       	ldd	r21, Y+20	; 0x14
     c4c:	ca 01       	movw	r24, r20
     c4e:	b9 01       	movw	r22, r18
     c50:	0e 94 13 08 	call	0x1026	; 0x1026 <cos>
     c54:	69 83       	std	Y+1, r22	; 0x01
     c56:	7a 83       	std	Y+2, r23	; 0x02
     c58:	8b 83       	std	Y+3, r24	; 0x03
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	c7 01       	movw	r24, r14
     c5e:	b6 01       	movw	r22, r12
     c60:	0e 94 13 08 	call	0x1026	; 0x1026 <cos>
     c64:	69 87       	std	Y+9, r22	; 0x09
     c66:	7a 87       	std	Y+10, r23	; 0x0a
     c68:	8b 87       	std	Y+11, r24	; 0x0b
     c6a:	9c 87       	std	Y+12, r25	; 0x0c
     c6c:	c5 01       	movw	r24, r10
     c6e:	b4 01       	movw	r22, r8
     c70:	0e 94 13 08 	call	0x1026	; 0x1026 <cos>
     c74:	6d 87       	std	Y+13, r22	; 0x0d
     c76:	7e 87       	std	Y+14, r23	; 0x0e
     c78:	8f 87       	std	Y+15, r24	; 0x0f
     c7a:	98 8b       	std	Y+16, r25	; 0x10
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	4f 81       	ldd	r20, Y+7	; 0x07
     c82:	58 85       	ldd	r21, Y+8	; 0x08
     c84:	c3 01       	movw	r24, r6
     c86:	b2 01       	movw	r22, r4
     c88:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     c8c:	6b 01       	movw	r12, r22
     c8e:	7c 01       	movw	r14, r24
     c90:	29 85       	ldd	r18, Y+9	; 0x09
     c92:	3a 85       	ldd	r19, Y+10	; 0x0a
     c94:	4b 85       	ldd	r20, Y+11	; 0x0b
     c96:	5c 85       	ldd	r21, Y+12	; 0x0c
     c98:	69 81       	ldd	r22, Y+1	; 0x01
     c9a:	7a 81       	ldd	r23, Y+2	; 0x02
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ca0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     ca4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ca6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ca8:	4f 85       	ldd	r20, Y+15	; 0x0f
     caa:	58 89       	ldd	r21, Y+16	; 0x10
     cac:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     cbc:	0e 94 c4 07 	call	0xf88	; 0xf88 <asin>
     cc0:	6b 01       	movw	r12, r22
     cc2:	7c 01       	movw	r14, r24
     cc4:	f8 01       	movw	r30, r16
     cc6:	64 87       	std	Z+12, r22	; 0x0c
     cc8:	75 87       	std	Z+13, r23	; 0x0d
     cca:	86 87       	std	Z+14, r24	; 0x0e
     ccc:	97 87       	std	Z+15, r25	; 0x0f
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     cce:	c5 01       	movw	r24, r10
     cd0:	b4 01       	movw	r22, r8
     cd2:	0e 94 81 0a 	call	0x1502	; 0x1502 <sin>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	69 81       	ldd	r22, Y+1	; 0x01
     cdc:	7a 81       	ldd	r23, Y+2	; 0x02
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	9c 81       	ldd	r25, Y+4	; 0x04
     ce2:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     ce6:	4b 01       	movw	r8, r22
     ce8:	5c 01       	movw	r10, r24
     cea:	c3 01       	movw	r24, r6
     cec:	b2 01       	movw	r22, r4
     cee:	90 58       	subi	r25, 0x80	; 128
     cf0:	29 85       	ldd	r18, Y+9	; 0x09
     cf2:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf4:	4b 85       	ldd	r20, Y+11	; 0x0b
     cf6:	5c 85       	ldd	r21, Y+12	; 0x0c
     cf8:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     cfc:	2b 01       	movw	r4, r22
     cfe:	3c 01       	movw	r6, r24
     d00:	2d 81       	ldd	r18, Y+5	; 0x05
     d02:	3e 81       	ldd	r19, Y+6	; 0x06
     d04:	4f 81       	ldd	r20, Y+7	; 0x07
     d06:	58 85       	ldd	r21, Y+8	; 0x08
     d08:	69 81       	ldd	r22, Y+1	; 0x01
     d0a:	7a 81       	ldd	r23, Y+2	; 0x02
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	9c 81       	ldd	r25, Y+4	; 0x04
     d10:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     d14:	2d 85       	ldd	r18, Y+13	; 0x0d
     d16:	3e 85       	ldd	r19, Y+14	; 0x0e
     d18:	4f 85       	ldd	r20, Y+15	; 0x0f
     d1a:	58 89       	ldd	r21, Y+16	; 0x10
     d1c:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c3 01       	movw	r24, r6
     d26:	b2 01       	movw	r22, r4
     d28:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	c5 01       	movw	r24, r10
     d32:	b4 01       	movw	r22, r8
     d34:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     d38:	0e 94 df 07 	call	0xfbe	; 0xfbe <atan>
     d3c:	4b 01       	movw	r8, r22
     d3e:	5c 01       	movw	r10, r24
		if(tel->obr_obl<=0) tel->obr_obl+=2*PI;
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	a9 01       	movw	r20, r18
     d46:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	34 f4       	brge	.+12     	; 0xd5a <obliczenie_nastaw+0x1a4>
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     d4e:	f8 01       	movw	r30, r16
     d50:	80 8a       	std	Z+16, r8	; 0x10
     d52:	91 8a       	std	Z+17, r9	; 0x11
     d54:	a2 8a       	std	Z+18, r10	; 0x12
     d56:	b3 8a       	std	Z+19, r11	; 0x13
     d58:	0d c0       	rjmp	.+26     	; 0xd74 <obliczenie_nastaw+0x1be>
		if(tel->obr_obl<=0) tel->obr_obl+=2*PI;
     d5a:	2b ed       	ldi	r18, 0xDB	; 219
     d5c:	3f e0       	ldi	r19, 0x0F	; 15
     d5e:	49 ec       	ldi	r20, 0xC9	; 201
     d60:	50 e4       	ldi	r21, 0x40	; 64
     d62:	c5 01       	movw	r24, r10
     d64:	b4 01       	movw	r22, r8
     d66:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3>
     d6a:	f8 01       	movw	r30, r16
     d6c:	60 8b       	std	Z+16, r22	; 0x10
     d6e:	71 8b       	std	Z+17, r23	; 0x11
     d70:	82 8b       	std	Z+18, r24	; 0x12
     d72:	93 8b       	std	Z+19, r25	; 0x13

	tel->wys_obl=(tel->wys_obl*EN1_RANGE)/(2.0*PI); //przeliczenie na obroty
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	41 ee       	ldi	r20, 0xE1	; 225
     d7a:	53 e4       	ldi	r21, 0x43	; 67
     d7c:	c7 01       	movw	r24, r14
     d7e:	b6 01       	movw	r22, r12
     d80:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     d84:	2b ed       	ldi	r18, 0xDB	; 219
     d86:	3f e0       	ldi	r19, 0x0F	; 15
     d88:	49 ec       	ldi	r20, 0xC9	; 201
     d8a:	50 e4       	ldi	r21, 0x40	; 64
     d8c:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     d90:	f8 01       	movw	r30, r16
     d92:	64 87       	std	Z+12, r22	; 0x0c
     d94:	75 87       	std	Z+13, r23	; 0x0d
     d96:	86 87       	std	Z+14, r24	; 0x0e
     d98:	97 87       	std	Z+15, r25	; 0x0f
	tel->obr_obl=(tel->obr_obl*EN2_RANGE)/(2.0*PI);
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	41 ee       	ldi	r20, 0xE1	; 225
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	60 89       	ldd	r22, Z+16	; 0x10
     da4:	71 89       	ldd	r23, Z+17	; 0x11
     da6:	82 89       	ldd	r24, Z+18	; 0x12
     da8:	93 89       	ldd	r25, Z+19	; 0x13
     daa:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
     dae:	2b ed       	ldi	r18, 0xDB	; 219
     db0:	3f e0       	ldi	r19, 0x0F	; 15
     db2:	49 ec       	ldi	r20, 0xC9	; 201
     db4:	50 e4       	ldi	r21, 0x40	; 64
     db6:	0e 94 18 08 	call	0x1030	; 0x1030 <__divsf3>
     dba:	f8 01       	movw	r30, r16
     dbc:	60 8b       	std	Z+16, r22	; 0x10
     dbe:	71 8b       	std	Z+17, r23	; 0x11
     dc0:	82 8b       	std	Z+18, r24	; 0x12
     dc2:	93 8b       	std	Z+19, r25	; 0x13
     dc4:	64 96       	adiw	r28, 0x14	; 20
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	08 95       	ret

00000df2 <main>:


int main(void)
{
	system_init();
     df2:	0e 94 93 00 	call	0x126	; 0x126 <system_init>
	lcdInit();
     df6:	0e 94 44 01 	call	0x288	; 0x288 <lcdInit>
		if(keypad() == 1)
		{
			PORTC ^= (1 << 0); 
		}
*/
		keypad(&keypad_A); //odczyt klawiatury
     dfa:	8a e1       	ldi	r24, 0x1A	; 26
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
		keypad_proc(&keypad_A); //przetwarzanie znakow
     e02:	8a e1       	ldi	r24, 0x1A	; 26
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>

		if(keypad_A.flags & KB_NEW)
     e0a:	80 91 2e 01 	lds	r24, 0x012E
     e0e:	86 ff       	sbrs	r24, 6
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <main+0x36>
		{
			nowy_cel(&keypad_A,&telescope_A);
     e12:	63 e3       	ldi	r22, 0x33	; 51
     e14:	71 e0       	ldi	r23, 0x01	; 1
     e16:	8a e1       	ldi	r24, 0x1A	; 26
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	0e 94 41 04 	call	0x882	; 0x882 <nowy_cel>
			keypad_A.flags &= ~KB_NEW;
     e1e:	80 91 2e 01 	lds	r24, 0x012E
     e22:	8f 7b       	andi	r24, 0xBF	; 191
     e24:	80 93 2e 01 	sts	0x012E, r24
		}
		if(keypad_A.flags & KB_CAL)
     e28:	80 91 2e 01 	lds	r24, 0x012E
     e2c:	85 ff       	sbrs	r24, 5
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <main+0x58>
		{
			kalibracja(&encoder1,&encoder2,&telescope_A); // funkcja z pushto_lib
     e30:	43 e3       	ldi	r20, 0x33	; 51
     e32:	51 e0       	ldi	r21, 0x01	; 1
     e34:	6b e4       	ldi	r22, 0x4B	; 75
     e36:	71 e0       	ldi	r23, 0x01	; 1
     e38:	8f e2       	ldi	r24, 0x2F	; 47
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 08 03 	call	0x610	; 0x610 <kalibracja>
			keypad_A.flags &= ~KB_CAL;
     e40:	80 91 2e 01 	lds	r24, 0x012E
     e44:	8f 7d       	andi	r24, 0xDF	; 223
     e46:	80 93 2e 01 	sts	0x012E, r24
		}
		if(keypad_A.flags & KB_CLR)
     e4a:	80 91 2e 01 	lds	r24, 0x012E
     e4e:	84 ff       	sbrs	r24, 4
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <main+0x6e>
		{
			lcd_clr();
     e52:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
			keypad_A.flags &= ~KB_CLR;
     e56:	80 91 2e 01 	lds	r24, 0x012E
     e5a:	8f 7e       	andi	r24, 0xEF	; 239
     e5c:	80 93 2e 01 	sts	0x012E, r24
		}
		if(telescope_A.update)
     e60:	80 91 35 01 	lds	r24, 0x0135
     e64:	90 91 36 01 	lds	r25, 0x0136
     e68:	89 2b       	or	r24, r25
     e6a:	21 f0       	breq	.+8      	; 0xe74 <main+0x82>
		{
			obliczenie_nastaw(&telescope_A); //funkcja na obliczenie nastaw, co 10sek (patrz ISR(TIMER1_COMPA_vect))
     e6c:	83 e3       	ldi	r24, 0x33	; 51
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 db 05 	call	0xbb6	; 0xbb6 <obliczenie_nastaw>
		//integerToLcd(telescope_A.obr_zad);
		//gotoXy(0,1);
		//sprintf(buf,"%f",telescope_A.obr_zad);
		//integerToLcd(telescope_A.obr_zad);

		if(keypad_A.i > 14)
     e74:	80 91 2c 01 	lds	r24, 0x012C
     e78:	90 91 2d 01 	lds	r25, 0x012D
     e7c:	0f 97       	sbiw	r24, 0x0f	; 15
     e7e:	0c f4       	brge	.+2      	; 0xe82 <main+0x90>
     e80:	bc cf       	rjmp	.-136    	; 0xdfa <main+0x8>
			keypad_A.i=0;
     e82:	10 92 2d 01 	sts	0x012D, r1
     e86:	10 92 2c 01 	sts	0x012C, r1
     e8a:	b7 cf       	rjmp	.-146    	; 0xdfa <main+0x8>

00000e8c <acos>:
     e8c:	9f 93       	push	r25
     e8e:	9f 77       	andi	r25, 0x7F	; 127
     e90:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_arccos>
     e94:	0f 90       	pop	r0
     e96:	00 20       	and	r0, r0
     e98:	42 f4       	brpl	.+16     	; 0xeaa <acos+0x1e>
     e9a:	90 58       	subi	r25, 0x80	; 128
     e9c:	a2 ea       	ldi	r26, 0xA2	; 162
     e9e:	2a ed       	ldi	r18, 0xDA	; 218
     ea0:	3f e0       	ldi	r19, 0x0F	; 15
     ea2:	49 e4       	ldi	r20, 0x49	; 73
     ea4:	50 e4       	ldi	r21, 0x40	; 64
     ea6:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
     eaa:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_round>

00000eae <__subsf3>:
     eae:	50 58       	subi	r21, 0x80	; 128

00000eb0 <__addsf3>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	aa 27       	eor	r26, r26
     eb4:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
     eb8:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_round>
     ebc:	0e 94 85 09 	call	0x130a	; 0x130a <__fp_pscA>
     ec0:	38 f0       	brcs	.+14     	; 0xed0 <__addsf3+0x20>
     ec2:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscB>
     ec6:	20 f0       	brcs	.+8      	; 0xed0 <__addsf3+0x20>
     ec8:	39 f4       	brne	.+14     	; 0xed8 <__addsf3+0x28>
     eca:	9f 3f       	cpi	r25, 0xFF	; 255
     ecc:	19 f4       	brne	.+6      	; 0xed4 <__addsf3+0x24>
     ece:	26 f4       	brtc	.+8      	; 0xed8 <__addsf3+0x28>
     ed0:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>
     ed4:	0e f4       	brtc	.+2      	; 0xed8 <__addsf3+0x28>
     ed6:	e0 95       	com	r30
     ed8:	e7 fb       	bst	r30, 7
     eda:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>

00000ede <__addsf3x>:
     ede:	e9 2f       	mov	r30, r25
     ee0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_split3>
     ee4:	58 f3       	brcs	.-42     	; 0xebc <__addsf3+0xc>
     ee6:	ba 17       	cp	r27, r26
     ee8:	62 07       	cpc	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	95 07       	cpc	r25, r21
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__addsf3x+0x1c>
     ef2:	79 f4       	brne	.+30     	; 0xf12 <__addsf3x+0x34>
     ef4:	a6 f5       	brtc	.+104    	; 0xf5e <__addsf3x+0x80>
     ef6:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_zero>
     efa:	0e f4       	brtc	.+2      	; 0xefe <__addsf3x+0x20>
     efc:	e0 95       	com	r30
     efe:	0b 2e       	mov	r0, r27
     f00:	ba 2f       	mov	r27, r26
     f02:	a0 2d       	mov	r26, r0
     f04:	0b 01       	movw	r0, r22
     f06:	b9 01       	movw	r22, r18
     f08:	90 01       	movw	r18, r0
     f0a:	0c 01       	movw	r0, r24
     f0c:	ca 01       	movw	r24, r20
     f0e:	a0 01       	movw	r20, r0
     f10:	11 24       	eor	r1, r1
     f12:	ff 27       	eor	r31, r31
     f14:	59 1b       	sub	r21, r25
     f16:	99 f0       	breq	.+38     	; 0xf3e <__addsf3x+0x60>
     f18:	59 3f       	cpi	r21, 0xF9	; 249
     f1a:	50 f4       	brcc	.+20     	; 0xf30 <__addsf3x+0x52>
     f1c:	50 3e       	cpi	r21, 0xE0	; 224
     f1e:	68 f1       	brcs	.+90     	; 0xf7a <__addsf3x+0x9c>
     f20:	1a 16       	cp	r1, r26
     f22:	f0 40       	sbci	r31, 0x00	; 0
     f24:	a2 2f       	mov	r26, r18
     f26:	23 2f       	mov	r18, r19
     f28:	34 2f       	mov	r19, r20
     f2a:	44 27       	eor	r20, r20
     f2c:	58 5f       	subi	r21, 0xF8	; 248
     f2e:	f3 cf       	rjmp	.-26     	; 0xf16 <__addsf3x+0x38>
     f30:	46 95       	lsr	r20
     f32:	37 95       	ror	r19
     f34:	27 95       	ror	r18
     f36:	a7 95       	ror	r26
     f38:	f0 40       	sbci	r31, 0x00	; 0
     f3a:	53 95       	inc	r21
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__addsf3x+0x52>
     f3e:	7e f4       	brtc	.+30     	; 0xf5e <__addsf3x+0x80>
     f40:	1f 16       	cp	r1, r31
     f42:	ba 0b       	sbc	r27, r26
     f44:	62 0b       	sbc	r22, r18
     f46:	73 0b       	sbc	r23, r19
     f48:	84 0b       	sbc	r24, r20
     f4a:	ba f0       	brmi	.+46     	; 0xf7a <__addsf3x+0x9c>
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <__addsf3x+0x9a>
     f50:	ff 0f       	add	r31, r31
     f52:	bb 1f       	adc	r27, r27
     f54:	66 1f       	adc	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	c2 f7       	brpl	.-16     	; 0xf4c <__addsf3x+0x6e>
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <__addsf3x+0x9c>
     f5e:	ba 0f       	add	r27, r26
     f60:	62 1f       	adc	r22, r18
     f62:	73 1f       	adc	r23, r19
     f64:	84 1f       	adc	r24, r20
     f66:	48 f4       	brcc	.+18     	; 0xf7a <__addsf3x+0x9c>
     f68:	87 95       	ror	r24
     f6a:	77 95       	ror	r23
     f6c:	67 95       	ror	r22
     f6e:	b7 95       	ror	r27
     f70:	f7 95       	ror	r31
     f72:	9e 3f       	cpi	r25, 0xFE	; 254
     f74:	08 f0       	brcs	.+2      	; 0xf78 <__addsf3x+0x9a>
     f76:	b0 cf       	rjmp	.-160    	; 0xed8 <__addsf3+0x28>
     f78:	93 95       	inc	r25
     f7a:	88 0f       	add	r24, r24
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <__addsf3x+0xa2>
     f7e:	99 27       	eor	r25, r25
     f80:	ee 0f       	add	r30, r30
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	08 95       	ret

00000f88 <asin>:
     f88:	9f 93       	push	r25
     f8a:	9f 77       	andi	r25, 0x7F	; 127
     f8c:	ee e3       	ldi	r30, 0x3E	; 62
     f8e:	89 37       	cpi	r24, 0x79	; 121
     f90:	9e 07       	cpc	r25, r30
     f92:	28 f4       	brcc	.+10     	; 0xf9e <asin+0x16>
     f94:	e4 e5       	ldi	r30, 0x54	; 84
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__fp_powsodd>
     f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <asin+0x2e>
     f9e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_arccos>
     fa2:	90 58       	subi	r25, 0x80	; 128
     fa4:	a2 ea       	ldi	r26, 0xA2	; 162
     fa6:	2a ed       	ldi	r18, 0xDA	; 218
     fa8:	3f e0       	ldi	r19, 0x0F	; 15
     faa:	49 ec       	ldi	r20, 0xC9	; 201
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
     fb2:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_round>
     fb6:	0f 90       	pop	r0
     fb8:	07 fc       	sbrc	r0, 7
     fba:	90 58       	subi	r25, 0x80	; 128
     fbc:	08 95       	ret

00000fbe <atan>:
     fbe:	df 93       	push	r29
     fc0:	dd 27       	eor	r29, r29
     fc2:	b9 2f       	mov	r27, r25
     fc4:	bf 77       	andi	r27, 0x7F	; 127
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	48 07       	cpc	r20, r24
     fd0:	5b 07       	cpc	r21, r27
     fd2:	18 f4       	brcc	.+6      	; 0xfda <atan+0x1c>
     fd4:	d9 2f       	mov	r29, r25
     fd6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <inverse>
     fda:	9f 93       	push	r25
     fdc:	8f 93       	push	r24
     fde:	7f 93       	push	r23
     fe0:	6f 93       	push	r22
     fe2:	0e 94 cf 0a 	call	0x159e	; 0x159e <square>
     fe6:	e8 e6       	ldi	r30, 0x68	; 104
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_powser>
     fee:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_round>
     ff2:	2f 91       	pop	r18
     ff4:	3f 91       	pop	r19
     ff6:	4f 91       	pop	r20
     ff8:	5f 91       	pop	r21
     ffa:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3x>
     ffe:	dd 23       	and	r29, r29
    1000:	51 f0       	breq	.+20     	; 0x1016 <atan+0x58>
    1002:	90 58       	subi	r25, 0x80	; 128
    1004:	a2 ea       	ldi	r26, 0xA2	; 162
    1006:	2a ed       	ldi	r18, 0xDA	; 218
    1008:	3f e0       	ldi	r19, 0x0F	; 15
    100a:	49 ec       	ldi	r20, 0xC9	; 201
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	d0 78       	andi	r29, 0x80	; 128
    1010:	5d 27       	eor	r21, r29
    1012:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
    1016:	df 91       	pop	r29
    1018:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_round>

0000101c <__cmpsf2>:
    101c:	0e 94 1d 09 	call	0x123a	; 0x123a <__fp_cmp>
    1020:	08 f4       	brcc	.+2      	; 0x1024 <__cmpsf2+0x8>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	08 95       	ret

00001026 <cos>:
    1026:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_rempio2>
    102a:	e3 95       	inc	r30
    102c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_sinus>

00001030 <__divsf3>:
    1030:	0e 94 2c 08 	call	0x1058	; 0x1058 <__divsf3x>
    1034:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_round>
    1038:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscB>
    103c:	58 f0       	brcs	.+22     	; 0x1054 <__divsf3+0x24>
    103e:	0e 94 85 09 	call	0x130a	; 0x130a <__fp_pscA>
    1042:	40 f0       	brcs	.+16     	; 0x1054 <__divsf3+0x24>
    1044:	29 f4       	brne	.+10     	; 0x1050 <__divsf3+0x20>
    1046:	5f 3f       	cpi	r21, 0xFF	; 255
    1048:	29 f0       	breq	.+10     	; 0x1054 <__divsf3+0x24>
    104a:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_szero>
    1054:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>

00001058 <__divsf3x>:
    1058:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_split3>
    105c:	68 f3       	brcs	.-38     	; 0x1038 <__divsf3+0x8>

0000105e <__divsf3_pse>:
    105e:	99 23       	and	r25, r25
    1060:	b1 f3       	breq	.-20     	; 0x104e <__divsf3+0x1e>
    1062:	55 23       	and	r21, r21
    1064:	91 f3       	breq	.-28     	; 0x104a <__divsf3+0x1a>
    1066:	95 1b       	sub	r25, r21
    1068:	55 0b       	sbc	r21, r21
    106a:	bb 27       	eor	r27, r27
    106c:	aa 27       	eor	r26, r26
    106e:	62 17       	cp	r22, r18
    1070:	73 07       	cpc	r23, r19
    1072:	84 07       	cpc	r24, r20
    1074:	38 f0       	brcs	.+14     	; 0x1084 <__divsf3_pse+0x26>
    1076:	9f 5f       	subi	r25, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	22 0f       	add	r18, r18
    107c:	33 1f       	adc	r19, r19
    107e:	44 1f       	adc	r20, r20
    1080:	aa 1f       	adc	r26, r26
    1082:	a9 f3       	breq	.-22     	; 0x106e <__divsf3_pse+0x10>
    1084:	35 d0       	rcall	.+106    	; 0x10f0 <__divsf3_pse+0x92>
    1086:	0e 2e       	mov	r0, r30
    1088:	3a f0       	brmi	.+14     	; 0x1098 <__divsf3_pse+0x3a>
    108a:	e0 e8       	ldi	r30, 0x80	; 128
    108c:	32 d0       	rcall	.+100    	; 0x10f2 <__divsf3_pse+0x94>
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	e6 95       	lsr	r30
    1094:	00 1c       	adc	r0, r0
    1096:	ca f7       	brpl	.-14     	; 0x108a <__divsf3_pse+0x2c>
    1098:	2b d0       	rcall	.+86     	; 0x10f0 <__divsf3_pse+0x92>
    109a:	fe 2f       	mov	r31, r30
    109c:	29 d0       	rcall	.+82     	; 0x10f0 <__divsf3_pse+0x92>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	bb 1f       	adc	r27, r27
    10a6:	26 17       	cp	r18, r22
    10a8:	37 07       	cpc	r19, r23
    10aa:	48 07       	cpc	r20, r24
    10ac:	ab 07       	cpc	r26, r27
    10ae:	b0 e8       	ldi	r27, 0x80	; 128
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__divsf3_pse+0x56>
    10b2:	bb 0b       	sbc	r27, r27
    10b4:	80 2d       	mov	r24, r0
    10b6:	bf 01       	movw	r22, r30
    10b8:	ff 27       	eor	r31, r31
    10ba:	93 58       	subi	r25, 0x83	; 131
    10bc:	5f 4f       	sbci	r21, 0xFF	; 255
    10be:	3a f0       	brmi	.+14     	; 0x10ce <__divsf3_pse+0x70>
    10c0:	9e 3f       	cpi	r25, 0xFE	; 254
    10c2:	51 05       	cpc	r21, r1
    10c4:	78 f0       	brcs	.+30     	; 0x10e4 <__divsf3_pse+0x86>
    10c6:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    10ca:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_szero>
    10ce:	5f 3f       	cpi	r21, 0xFF	; 255
    10d0:	e4 f3       	brlt	.-8      	; 0x10ca <__divsf3_pse+0x6c>
    10d2:	98 3e       	cpi	r25, 0xE8	; 232
    10d4:	d4 f3       	brlt	.-12     	; 0x10ca <__divsf3_pse+0x6c>
    10d6:	86 95       	lsr	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	9f 5f       	subi	r25, 0xFF	; 255
    10e2:	c9 f7       	brne	.-14     	; 0x10d6 <__divsf3_pse+0x78>
    10e4:	88 0f       	add	r24, r24
    10e6:	91 1d       	adc	r25, r1
    10e8:	96 95       	lsr	r25
    10ea:	87 95       	ror	r24
    10ec:	97 f9       	bld	r25, 7
    10ee:	08 95       	ret
    10f0:	e1 e0       	ldi	r30, 0x01	; 1
    10f2:	66 0f       	add	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	bb 1f       	adc	r27, r27
    10fa:	62 17       	cp	r22, r18
    10fc:	73 07       	cpc	r23, r19
    10fe:	84 07       	cpc	r24, r20
    1100:	ba 07       	cpc	r27, r26
    1102:	20 f0       	brcs	.+8      	; 0x110c <__divsf3_pse+0xae>
    1104:	62 1b       	sub	r22, r18
    1106:	73 0b       	sbc	r23, r19
    1108:	84 0b       	sbc	r24, r20
    110a:	ba 0b       	sbc	r27, r26
    110c:	ee 1f       	adc	r30, r30
    110e:	88 f7       	brcc	.-30     	; 0x10f2 <__divsf3_pse+0x94>
    1110:	e0 95       	com	r30
    1112:	08 95       	ret

00001114 <__fixsfsi>:
    1114:	0e 94 91 08 	call	0x1122	; 0x1122 <__fixunssfsi>
    1118:	68 94       	set
    111a:	b1 11       	cpse	r27, r1
    111c:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_szero>
    1120:	08 95       	ret

00001122 <__fixunssfsi>:
    1122:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fp_splitA>
    1126:	88 f0       	brcs	.+34     	; 0x114a <__fixunssfsi+0x28>
    1128:	9f 57       	subi	r25, 0x7F	; 127
    112a:	98 f0       	brcs	.+38     	; 0x1152 <__fixunssfsi+0x30>
    112c:	b9 2f       	mov	r27, r25
    112e:	99 27       	eor	r25, r25
    1130:	b7 51       	subi	r27, 0x17	; 23
    1132:	b0 f0       	brcs	.+44     	; 0x1160 <__fixunssfsi+0x3e>
    1134:	e1 f0       	breq	.+56     	; 0x116e <__fixunssfsi+0x4c>
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	1a f0       	brmi	.+6      	; 0x1146 <__fixunssfsi+0x24>
    1140:	ba 95       	dec	r27
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__fixunssfsi+0x14>
    1144:	14 c0       	rjmp	.+40     	; 0x116e <__fixunssfsi+0x4c>
    1146:	b1 30       	cpi	r27, 0x01	; 1
    1148:	91 f0       	breq	.+36     	; 0x116e <__fixunssfsi+0x4c>
    114a:	0e 94 05 0a 	call	0x140a	; 0x140a <__fp_zero>
    114e:	b1 e0       	ldi	r27, 0x01	; 1
    1150:	08 95       	ret
    1152:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__fp_zero>
    1156:	67 2f       	mov	r22, r23
    1158:	78 2f       	mov	r23, r24
    115a:	88 27       	eor	r24, r24
    115c:	b8 5f       	subi	r27, 0xF8	; 248
    115e:	39 f0       	breq	.+14     	; 0x116e <__fixunssfsi+0x4c>
    1160:	b9 3f       	cpi	r27, 0xF9	; 249
    1162:	cc f3       	brlt	.-14     	; 0x1156 <__fixunssfsi+0x34>
    1164:	86 95       	lsr	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b3 95       	inc	r27
    116c:	d9 f7       	brne	.-10     	; 0x1164 <__fixunssfsi+0x42>
    116e:	3e f4       	brtc	.+14     	; 0x117e <__fixunssfsi+0x5c>
    1170:	90 95       	com	r25
    1172:	80 95       	com	r24
    1174:	70 95       	com	r23
    1176:	61 95       	neg	r22
    1178:	7f 4f       	sbci	r23, 0xFF	; 255
    117a:	8f 4f       	sbci	r24, 0xFF	; 255
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	08 95       	ret

00001180 <__floatunsisf>:
    1180:	e8 94       	clt
    1182:	09 c0       	rjmp	.+18     	; 0x1196 <__floatsisf+0x12>

00001184 <__floatsisf>:
    1184:	97 fb       	bst	r25, 7
    1186:	3e f4       	brtc	.+14     	; 0x1196 <__floatsisf+0x12>
    1188:	90 95       	com	r25
    118a:	80 95       	com	r24
    118c:	70 95       	com	r23
    118e:	61 95       	neg	r22
    1190:	7f 4f       	sbci	r23, 0xFF	; 255
    1192:	8f 4f       	sbci	r24, 0xFF	; 255
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	99 23       	and	r25, r25
    1198:	a9 f0       	breq	.+42     	; 0x11c4 <__floatsisf+0x40>
    119a:	f9 2f       	mov	r31, r25
    119c:	96 e9       	ldi	r25, 0x96	; 150
    119e:	bb 27       	eor	r27, r27
    11a0:	93 95       	inc	r25
    11a2:	f6 95       	lsr	r31
    11a4:	87 95       	ror	r24
    11a6:	77 95       	ror	r23
    11a8:	67 95       	ror	r22
    11aa:	b7 95       	ror	r27
    11ac:	f1 11       	cpse	r31, r1
    11ae:	f8 cf       	rjmp	.-16     	; 0x11a0 <__floatsisf+0x1c>
    11b0:	fa f4       	brpl	.+62     	; 0x11f0 <__floatsisf+0x6c>
    11b2:	bb 0f       	add	r27, r27
    11b4:	11 f4       	brne	.+4      	; 0x11ba <__floatsisf+0x36>
    11b6:	60 ff       	sbrs	r22, 0
    11b8:	1b c0       	rjmp	.+54     	; 0x11f0 <__floatsisf+0x6c>
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	8f 4f       	sbci	r24, 0xFF	; 255
    11c0:	9f 4f       	sbci	r25, 0xFF	; 255
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <__floatsisf+0x6c>
    11c4:	88 23       	and	r24, r24
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__floatsisf+0x48>
    11c8:	96 e9       	ldi	r25, 0x96	; 150
    11ca:	11 c0       	rjmp	.+34     	; 0x11ee <__floatsisf+0x6a>
    11cc:	77 23       	and	r23, r23
    11ce:	21 f0       	breq	.+8      	; 0x11d8 <__floatsisf+0x54>
    11d0:	9e e8       	ldi	r25, 0x8E	; 142
    11d2:	87 2f       	mov	r24, r23
    11d4:	76 2f       	mov	r23, r22
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <__floatsisf+0x5e>
    11d8:	66 23       	and	r22, r22
    11da:	71 f0       	breq	.+28     	; 0x11f8 <__floatsisf+0x74>
    11dc:	96 e8       	ldi	r25, 0x86	; 134
    11de:	86 2f       	mov	r24, r22
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	2a f0       	brmi	.+10     	; 0x11f0 <__floatsisf+0x6c>
    11e6:	9a 95       	dec	r25
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	88 1f       	adc	r24, r24
    11ee:	da f7       	brpl	.-10     	; 0x11e6 <__floatsisf+0x62>
    11f0:	88 0f       	add	r24, r24
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	97 f9       	bld	r25, 7
    11f8:	08 95       	ret

000011fa <__fp_arccos>:
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	1f 93       	push	r17
    1200:	0f 93       	push	r16
    1202:	8b 01       	movw	r16, r22
    1204:	ec 01       	movw	r28, r24
    1206:	e5 e9       	ldi	r30, 0x95	; 149
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_powser>
    120e:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_round>
    1212:	98 01       	movw	r18, r16
    1214:	ae 01       	movw	r20, r28
    1216:	8b 01       	movw	r16, r22
    1218:	ec 01       	movw	r28, r24
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 e8       	ldi	r24, 0x80	; 128
    1220:	9f e3       	ldi	r25, 0x3F	; 63
    1222:	0e 94 57 07 	call	0xeae	; 0xeae <__subsf3>
    1226:	0e 94 8f 0a 	call	0x151e	; 0x151e <sqrt>
    122a:	98 01       	movw	r18, r16
    122c:	ae 01       	movw	r20, r28
    122e:	0f 91       	pop	r16
    1230:	1f 91       	pop	r17
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__mulsf3x>

0000123a <__fp_cmp>:
    123a:	99 0f       	add	r25, r25
    123c:	00 08       	sbc	r0, r0
    123e:	55 0f       	add	r21, r21
    1240:	aa 0b       	sbc	r26, r26
    1242:	e0 e8       	ldi	r30, 0x80	; 128
    1244:	fe ef       	ldi	r31, 0xFE	; 254
    1246:	16 16       	cp	r1, r22
    1248:	17 06       	cpc	r1, r23
    124a:	e8 07       	cpc	r30, r24
    124c:	f9 07       	cpc	r31, r25
    124e:	c0 f0       	brcs	.+48     	; 0x1280 <__fp_cmp+0x46>
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	e4 07       	cpc	r30, r20
    1256:	f5 07       	cpc	r31, r21
    1258:	98 f0       	brcs	.+38     	; 0x1280 <__fp_cmp+0x46>
    125a:	62 1b       	sub	r22, r18
    125c:	73 0b       	sbc	r23, r19
    125e:	84 0b       	sbc	r24, r20
    1260:	95 0b       	sbc	r25, r21
    1262:	39 f4       	brne	.+14     	; 0x1272 <__fp_cmp+0x38>
    1264:	0a 26       	eor	r0, r26
    1266:	61 f0       	breq	.+24     	; 0x1280 <__fp_cmp+0x46>
    1268:	23 2b       	or	r18, r19
    126a:	24 2b       	or	r18, r20
    126c:	25 2b       	or	r18, r21
    126e:	21 f4       	brne	.+8      	; 0x1278 <__fp_cmp+0x3e>
    1270:	08 95       	ret
    1272:	0a 26       	eor	r0, r26
    1274:	09 f4       	brne	.+2      	; 0x1278 <__fp_cmp+0x3e>
    1276:	a1 40       	sbci	r26, 0x01	; 1
    1278:	a6 95       	lsr	r26
    127a:	8f ef       	ldi	r24, 0xFF	; 255
    127c:	81 1d       	adc	r24, r1
    127e:	81 1d       	adc	r24, r1
    1280:	08 95       	ret

00001282 <__fp_inf>:
    1282:	97 f9       	bld	r25, 7
    1284:	9f 67       	ori	r25, 0x7F	; 127
    1286:	80 e8       	ldi	r24, 0x80	; 128
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	08 95       	ret

0000128e <__fp_nan>:
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	80 ec       	ldi	r24, 0xC0	; 192
    1292:	08 95       	ret

00001294 <__fp_powser>:
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	1f 93       	push	r17
    129a:	0f 93       	push	r16
    129c:	ff 92       	push	r15
    129e:	ef 92       	push	r14
    12a0:	df 92       	push	r13
    12a2:	7b 01       	movw	r14, r22
    12a4:	8c 01       	movw	r16, r24
    12a6:	68 94       	set
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <__fp_powser+0x22>
    12aa:	da 2e       	mov	r13, r26
    12ac:	ef 01       	movw	r28, r30
    12ae:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3x>
    12b2:	fe 01       	movw	r30, r28
    12b4:	e8 94       	clt
    12b6:	a5 91       	lpm	r26, Z+
    12b8:	25 91       	lpm	r18, Z+
    12ba:	35 91       	lpm	r19, Z+
    12bc:	45 91       	lpm	r20, Z+
    12be:	55 91       	lpm	r21, Z+
    12c0:	a6 f3       	brts	.-24     	; 0x12aa <__fp_powser+0x16>
    12c2:	ef 01       	movw	r28, r30
    12c4:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
    12c8:	fe 01       	movw	r30, r28
    12ca:	97 01       	movw	r18, r14
    12cc:	a8 01       	movw	r20, r16
    12ce:	da 94       	dec	r13
    12d0:	69 f7       	brne	.-38     	; 0x12ac <__fp_powser+0x18>
    12d2:	df 90       	pop	r13
    12d4:	ef 90       	pop	r14
    12d6:	ff 90       	pop	r15
    12d8:	0f 91       	pop	r16
    12da:	1f 91       	pop	r17
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <__fp_powsodd>:
    12e2:	9f 93       	push	r25
    12e4:	8f 93       	push	r24
    12e6:	7f 93       	push	r23
    12e8:	6f 93       	push	r22
    12ea:	ff 93       	push	r31
    12ec:	ef 93       	push	r30
    12ee:	9b 01       	movw	r18, r22
    12f0:	ac 01       	movw	r20, r24
    12f2:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3>
    12f6:	ef 91       	pop	r30
    12f8:	ff 91       	pop	r31
    12fa:	0e 94 4a 09 	call	0x1294	; 0x1294 <__fp_powser>
    12fe:	2f 91       	pop	r18
    1300:	3f 91       	pop	r19
    1302:	4f 91       	pop	r20
    1304:	5f 91       	pop	r21
    1306:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__mulsf3>

0000130a <__fp_pscA>:
    130a:	00 24       	eor	r0, r0
    130c:	0a 94       	dec	r0
    130e:	16 16       	cp	r1, r22
    1310:	17 06       	cpc	r1, r23
    1312:	18 06       	cpc	r1, r24
    1314:	09 06       	cpc	r0, r25
    1316:	08 95       	ret

00001318 <__fp_pscB>:
    1318:	00 24       	eor	r0, r0
    131a:	0a 94       	dec	r0
    131c:	12 16       	cp	r1, r18
    131e:	13 06       	cpc	r1, r19
    1320:	14 06       	cpc	r1, r20
    1322:	05 06       	cpc	r0, r21
    1324:	08 95       	ret
    1326:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>

0000132a <__fp_rempio2>:
    132a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fp_splitA>
    132e:	d8 f3       	brcs	.-10     	; 0x1326 <__fp_pscB+0xe>
    1330:	e8 94       	clt
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	bb 27       	eor	r27, r27
    1336:	9f 57       	subi	r25, 0x7F	; 127
    1338:	f0 f0       	brcs	.+60     	; 0x1376 <__fp_rempio2+0x4c>
    133a:	2a ed       	ldi	r18, 0xDA	; 218
    133c:	3f e0       	ldi	r19, 0x0F	; 15
    133e:	49 ec       	ldi	r20, 0xC9	; 201
    1340:	06 c0       	rjmp	.+12     	; 0x134e <__fp_rempio2+0x24>
    1342:	ee 0f       	add	r30, r30
    1344:	bb 0f       	add	r27, r27
    1346:	66 1f       	adc	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	88 1f       	adc	r24, r24
    134c:	28 f0       	brcs	.+10     	; 0x1358 <__fp_rempio2+0x2e>
    134e:	b2 3a       	cpi	r27, 0xA2	; 162
    1350:	62 07       	cpc	r22, r18
    1352:	73 07       	cpc	r23, r19
    1354:	84 07       	cpc	r24, r20
    1356:	28 f0       	brcs	.+10     	; 0x1362 <__fp_rempio2+0x38>
    1358:	b2 5a       	subi	r27, 0xA2	; 162
    135a:	62 0b       	sbc	r22, r18
    135c:	73 0b       	sbc	r23, r19
    135e:	84 0b       	sbc	r24, r20
    1360:	e3 95       	inc	r30
    1362:	9a 95       	dec	r25
    1364:	72 f7       	brpl	.-36     	; 0x1342 <__fp_rempio2+0x18>
    1366:	80 38       	cpi	r24, 0x80	; 128
    1368:	30 f4       	brcc	.+12     	; 0x1376 <__fp_rempio2+0x4c>
    136a:	9a 95       	dec	r25
    136c:	bb 0f       	add	r27, r27
    136e:	66 1f       	adc	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	88 1f       	adc	r24, r24
    1374:	d2 f7       	brpl	.-12     	; 0x136a <__fp_rempio2+0x40>
    1376:	90 48       	sbci	r25, 0x80	; 128
    1378:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_mpack_finite>

0000137c <__fp_round>:
    137c:	09 2e       	mov	r0, r25
    137e:	03 94       	inc	r0
    1380:	00 0c       	add	r0, r0
    1382:	11 f4       	brne	.+4      	; 0x1388 <__fp_round+0xc>
    1384:	88 23       	and	r24, r24
    1386:	52 f0       	brmi	.+20     	; 0x139c <__fp_round+0x20>
    1388:	bb 0f       	add	r27, r27
    138a:	40 f4       	brcc	.+16     	; 0x139c <__fp_round+0x20>
    138c:	bf 2b       	or	r27, r31
    138e:	11 f4       	brne	.+4      	; 0x1394 <__fp_round+0x18>
    1390:	60 ff       	sbrs	r22, 0
    1392:	04 c0       	rjmp	.+8      	; 0x139c <__fp_round+0x20>
    1394:	6f 5f       	subi	r22, 0xFF	; 255
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	8f 4f       	sbci	r24, 0xFF	; 255
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	08 95       	ret

0000139e <__fp_sinus>:
    139e:	ef 93       	push	r30
    13a0:	e0 ff       	sbrs	r30, 0
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <__fp_sinus+0x14>
    13a4:	a2 ea       	ldi	r26, 0xA2	; 162
    13a6:	2a ed       	ldi	r18, 0xDA	; 218
    13a8:	3f e0       	ldi	r19, 0x0F	; 15
    13aa:	49 ec       	ldi	r20, 0xC9	; 201
    13ac:	5f eb       	ldi	r21, 0xBF	; 191
    13ae:	0e 94 6f 07 	call	0xede	; 0xede <__addsf3x>
    13b2:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_round>
    13b6:	0f 90       	pop	r0
    13b8:	03 94       	inc	r0
    13ba:	01 fc       	sbrc	r0, 1
    13bc:	90 58       	subi	r25, 0x80	; 128
    13be:	ed eb       	ldi	r30, 0xBD	; 189
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__fp_powsodd>

000013c6 <__fp_split3>:
    13c6:	57 fd       	sbrc	r21, 7
    13c8:	90 58       	subi	r25, 0x80	; 128
    13ca:	44 0f       	add	r20, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	59 f0       	breq	.+22     	; 0x13e6 <__fp_splitA+0x10>
    13d0:	5f 3f       	cpi	r21, 0xFF	; 255
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <__fp_splitA+0x1a>
    13d4:	47 95       	ror	r20

000013d6 <__fp_splitA>:
    13d6:	88 0f       	add	r24, r24
    13d8:	97 fb       	bst	r25, 7
    13da:	99 1f       	adc	r25, r25
    13dc:	61 f0       	breq	.+24     	; 0x13f6 <__fp_splitA+0x20>
    13de:	9f 3f       	cpi	r25, 0xFF	; 255
    13e0:	79 f0       	breq	.+30     	; 0x1400 <__fp_splitA+0x2a>
    13e2:	87 95       	ror	r24
    13e4:	08 95       	ret
    13e6:	12 16       	cp	r1, r18
    13e8:	13 06       	cpc	r1, r19
    13ea:	14 06       	cpc	r1, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	f2 cf       	rjmp	.-28     	; 0x13d4 <__fp_split3+0xe>
    13f0:	46 95       	lsr	r20
    13f2:	f1 df       	rcall	.-30     	; 0x13d6 <__fp_splitA>
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <__fp_splitA+0x30>
    13f6:	16 16       	cp	r1, r22
    13f8:	17 06       	cpc	r1, r23
    13fa:	18 06       	cpc	r1, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	f1 cf       	rjmp	.-30     	; 0x13e2 <__fp_splitA+0xc>
    1400:	86 95       	lsr	r24
    1402:	71 05       	cpc	r23, r1
    1404:	61 05       	cpc	r22, r1
    1406:	08 94       	sec
    1408:	08 95       	ret

0000140a <__fp_zero>:
    140a:	e8 94       	clt

0000140c <__fp_szero>:
    140c:	bb 27       	eor	r27, r27
    140e:	66 27       	eor	r22, r22
    1410:	77 27       	eor	r23, r23
    1412:	cb 01       	movw	r24, r22
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret

00001418 <inverse>:
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 e8       	ldi	r24, 0x80	; 128
    1422:	9f e3       	ldi	r25, 0x3F	; 63
    1424:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__divsf3>

00001428 <__mulsf3>:
    1428:	0e 94 27 0a 	call	0x144e	; 0x144e <__mulsf3x>
    142c:	0c 94 be 09 	jmp	0x137c	; 0x137c <__fp_round>
    1430:	0e 94 85 09 	call	0x130a	; 0x130a <__fp_pscA>
    1434:	38 f0       	brcs	.+14     	; 0x1444 <__mulsf3+0x1c>
    1436:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscB>
    143a:	20 f0       	brcs	.+8      	; 0x1444 <__mulsf3+0x1c>
    143c:	95 23       	and	r25, r21
    143e:	11 f0       	breq	.+4      	; 0x1444 <__mulsf3+0x1c>
    1440:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    1444:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>
    1448:	11 24       	eor	r1, r1
    144a:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_szero>

0000144e <__mulsf3x>:
    144e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__fp_split3>
    1452:	70 f3       	brcs	.-36     	; 0x1430 <__mulsf3+0x8>

00001454 <__mulsf3_pse>:
    1454:	95 9f       	mul	r25, r21
    1456:	c1 f3       	breq	.-16     	; 0x1448 <__mulsf3+0x20>
    1458:	95 0f       	add	r25, r21
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	55 1f       	adc	r21, r21
    145e:	62 9f       	mul	r22, r18
    1460:	f0 01       	movw	r30, r0
    1462:	72 9f       	mul	r23, r18
    1464:	bb 27       	eor	r27, r27
    1466:	f0 0d       	add	r31, r0
    1468:	b1 1d       	adc	r27, r1
    146a:	63 9f       	mul	r22, r19
    146c:	aa 27       	eor	r26, r26
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	aa 1f       	adc	r26, r26
    1474:	64 9f       	mul	r22, r20
    1476:	66 27       	eor	r22, r22
    1478:	b0 0d       	add	r27, r0
    147a:	a1 1d       	adc	r26, r1
    147c:	66 1f       	adc	r22, r22
    147e:	82 9f       	mul	r24, r18
    1480:	22 27       	eor	r18, r18
    1482:	b0 0d       	add	r27, r0
    1484:	a1 1d       	adc	r26, r1
    1486:	62 1f       	adc	r22, r18
    1488:	73 9f       	mul	r23, r19
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	83 9f       	mul	r24, r19
    1492:	a0 0d       	add	r26, r0
    1494:	61 1d       	adc	r22, r1
    1496:	22 1f       	adc	r18, r18
    1498:	74 9f       	mul	r23, r20
    149a:	33 27       	eor	r19, r19
    149c:	a0 0d       	add	r26, r0
    149e:	61 1d       	adc	r22, r1
    14a0:	23 1f       	adc	r18, r19
    14a2:	84 9f       	mul	r24, r20
    14a4:	60 0d       	add	r22, r0
    14a6:	21 1d       	adc	r18, r1
    14a8:	82 2f       	mov	r24, r18
    14aa:	76 2f       	mov	r23, r22
    14ac:	6a 2f       	mov	r22, r26
    14ae:	11 24       	eor	r1, r1
    14b0:	9f 57       	subi	r25, 0x7F	; 127
    14b2:	50 40       	sbci	r21, 0x00	; 0
    14b4:	9a f0       	brmi	.+38     	; 0x14dc <__mulsf3_pse+0x88>
    14b6:	f1 f0       	breq	.+60     	; 0x14f4 <__mulsf3_pse+0xa0>
    14b8:	88 23       	and	r24, r24
    14ba:	4a f0       	brmi	.+18     	; 0x14ce <__mulsf3_pse+0x7a>
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	bb 1f       	adc	r27, r27
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	91 50       	subi	r25, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	a9 f7       	brne	.-22     	; 0x14b8 <__mulsf3_pse+0x64>
    14ce:	9e 3f       	cpi	r25, 0xFE	; 254
    14d0:	51 05       	cpc	r21, r1
    14d2:	80 f0       	brcs	.+32     	; 0x14f4 <__mulsf3_pse+0xa0>
    14d4:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_inf>
    14d8:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_szero>
    14dc:	5f 3f       	cpi	r21, 0xFF	; 255
    14de:	e4 f3       	brlt	.-8      	; 0x14d8 <__mulsf3_pse+0x84>
    14e0:	98 3e       	cpi	r25, 0xE8	; 232
    14e2:	d4 f3       	brlt	.-12     	; 0x14d8 <__mulsf3_pse+0x84>
    14e4:	86 95       	lsr	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b7 95       	ror	r27
    14ec:	f7 95       	ror	r31
    14ee:	e7 95       	ror	r30
    14f0:	9f 5f       	subi	r25, 0xFF	; 255
    14f2:	c1 f7       	brne	.-16     	; 0x14e4 <__mulsf3_pse+0x90>
    14f4:	fe 2b       	or	r31, r30
    14f6:	88 0f       	add	r24, r24
    14f8:	91 1d       	adc	r25, r1
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	97 f9       	bld	r25, 7
    1500:	08 95       	ret

00001502 <sin>:
    1502:	9f 93       	push	r25
    1504:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_rempio2>
    1508:	0f 90       	pop	r0
    150a:	07 fc       	sbrc	r0, 7
    150c:	ee 5f       	subi	r30, 0xFE	; 254
    150e:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_sinus>
    1512:	19 f4       	brne	.+6      	; 0x151a <sin+0x18>
    1514:	16 f4       	brtc	.+4      	; 0x151a <sin+0x18>
    1516:	0c 94 47 09 	jmp	0x128e	; 0x128e <__fp_nan>
    151a:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__fp_mpack>

0000151e <sqrt>:
    151e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__fp_splitA>
    1522:	b8 f3       	brcs	.-18     	; 0x1512 <sin+0x10>
    1524:	99 23       	and	r25, r25
    1526:	c9 f3       	breq	.-14     	; 0x151a <sin+0x18>
    1528:	b6 f3       	brts	.-20     	; 0x1516 <sin+0x14>
    152a:	9f 57       	subi	r25, 0x7F	; 127
    152c:	55 0b       	sbc	r21, r21
    152e:	87 ff       	sbrs	r24, 7
    1530:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fp_norm2>
    1534:	00 24       	eor	r0, r0
    1536:	a0 e6       	ldi	r26, 0x60	; 96
    1538:	40 ea       	ldi	r20, 0xA0	; 160
    153a:	90 01       	movw	r18, r0
    153c:	80 58       	subi	r24, 0x80	; 128
    153e:	56 95       	lsr	r21
    1540:	97 95       	ror	r25
    1542:	28 f4       	brcc	.+10     	; 0x154e <sqrt+0x30>
    1544:	80 5c       	subi	r24, 0xC0	; 192
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	20 f0       	brcs	.+8      	; 0x1556 <sqrt+0x38>
    154e:	26 17       	cp	r18, r22
    1550:	37 07       	cpc	r19, r23
    1552:	48 07       	cpc	r20, r24
    1554:	30 f4       	brcc	.+12     	; 0x1562 <sqrt+0x44>
    1556:	62 1b       	sub	r22, r18
    1558:	73 0b       	sbc	r23, r19
    155a:	84 0b       	sbc	r24, r20
    155c:	20 29       	or	r18, r0
    155e:	31 29       	or	r19, r1
    1560:	4a 2b       	or	r20, r26
    1562:	a6 95       	lsr	r26
    1564:	17 94       	ror	r1
    1566:	07 94       	ror	r0
    1568:	20 25       	eor	r18, r0
    156a:	31 25       	eor	r19, r1
    156c:	4a 27       	eor	r20, r26
    156e:	58 f7       	brcc	.-42     	; 0x1546 <sqrt+0x28>
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	88 1f       	adc	r24, r24
    1576:	20 f0       	brcs	.+8      	; 0x1580 <sqrt+0x62>
    1578:	26 17       	cp	r18, r22
    157a:	37 07       	cpc	r19, r23
    157c:	48 07       	cpc	r20, r24
    157e:	30 f4       	brcc	.+12     	; 0x158c <sqrt+0x6e>
    1580:	62 0b       	sbc	r22, r18
    1582:	73 0b       	sbc	r23, r19
    1584:	84 0b       	sbc	r24, r20
    1586:	20 0d       	add	r18, r0
    1588:	31 1d       	adc	r19, r1
    158a:	41 1d       	adc	r20, r1
    158c:	a0 95       	com	r26
    158e:	81 f7       	brne	.-32     	; 0x1570 <sqrt+0x52>
    1590:	b9 01       	movw	r22, r18
    1592:	84 2f       	mov	r24, r20
    1594:	91 58       	subi	r25, 0x81	; 129
    1596:	88 0f       	add	r24, r24
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	08 95       	ret

0000159e <square>:
    159e:	9b 01       	movw	r18, r22
    15a0:	ac 01       	movw	r20, r24
    15a2:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__mulsf3>

000015a6 <__fp_mpack>:
    15a6:	9f 3f       	cpi	r25, 0xFF	; 255
    15a8:	31 f0       	breq	.+12     	; 0x15b6 <__fp_mpack_finite+0xc>

000015aa <__fp_mpack_finite>:
    15aa:	91 50       	subi	r25, 0x01	; 1
    15ac:	20 f4       	brcc	.+8      	; 0x15b6 <__fp_mpack_finite+0xc>
    15ae:	87 95       	ror	r24
    15b0:	77 95       	ror	r23
    15b2:	67 95       	ror	r22
    15b4:	b7 95       	ror	r27
    15b6:	88 0f       	add	r24, r24
    15b8:	91 1d       	adc	r25, r1
    15ba:	96 95       	lsr	r25
    15bc:	87 95       	ror	r24
    15be:	97 f9       	bld	r25, 7
    15c0:	08 95       	ret

000015c2 <__fp_norm2>:
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	50 40       	sbci	r21, 0x00	; 0
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	d2 f7       	brpl	.-12     	; 0x15c2 <__fp_norm2>
    15ce:	08 95       	ret

000015d0 <__divmodhi4>:
    15d0:	97 fb       	bst	r25, 7
    15d2:	07 2e       	mov	r0, r23
    15d4:	16 f4       	brtc	.+4      	; 0x15da <__divmodhi4+0xa>
    15d6:	00 94       	com	r0
    15d8:	07 d0       	rcall	.+14     	; 0x15e8 <__divmodhi4_neg1>
    15da:	77 fd       	sbrc	r23, 7
    15dc:	09 d0       	rcall	.+18     	; 0x15f0 <__divmodhi4_neg2>
    15de:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__udivmodhi4>
    15e2:	07 fc       	sbrc	r0, 7
    15e4:	05 d0       	rcall	.+10     	; 0x15f0 <__divmodhi4_neg2>
    15e6:	3e f4       	brtc	.+14     	; 0x15f6 <__divmodhi4_exit>

000015e8 <__divmodhi4_neg1>:
    15e8:	90 95       	com	r25
    15ea:	81 95       	neg	r24
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <__divmodhi4_neg2>:
    15f0:	70 95       	com	r23
    15f2:	61 95       	neg	r22
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255

000015f6 <__divmodhi4_exit>:
    15f6:	08 95       	ret

000015f8 <__udivmodhi4>:
    15f8:	aa 1b       	sub	r26, r26
    15fa:	bb 1b       	sub	r27, r27
    15fc:	51 e1       	ldi	r21, 0x11	; 17
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <__udivmodhi4_ep>

00001600 <__udivmodhi4_loop>:
    1600:	aa 1f       	adc	r26, r26
    1602:	bb 1f       	adc	r27, r27
    1604:	a6 17       	cp	r26, r22
    1606:	b7 07       	cpc	r27, r23
    1608:	10 f0       	brcs	.+4      	; 0x160e <__udivmodhi4_ep>
    160a:	a6 1b       	sub	r26, r22
    160c:	b7 0b       	sbc	r27, r23

0000160e <__udivmodhi4_ep>:
    160e:	88 1f       	adc	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	5a 95       	dec	r21
    1614:	a9 f7       	brne	.-22     	; 0x1600 <__udivmodhi4_loop>
    1616:	80 95       	com	r24
    1618:	90 95       	com	r25
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	08 95       	ret

00001620 <sscanf>:
    1620:	ae e0       	ldi	r26, 0x0E	; 14
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e6 e1       	ldi	r30, 0x16	; 22
    1626:	fb e0       	ldi	r31, 0x0B	; 11
    1628:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__prologue_saves__+0x20>
    162c:	85 e0       	ldi	r24, 0x05	; 5
    162e:	8c 83       	std	Y+4, r24	; 0x04
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	9a 83       	std	Y+2, r25	; 0x02
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	ae 01       	movw	r20, r28
    163a:	49 5e       	subi	r20, 0xE9	; 233
    163c:	5f 4f       	sbci	r21, 0xFF	; 255
    163e:	6d 89       	ldd	r22, Y+21	; 0x15
    1640:	7e 89       	ldd	r23, Y+22	; 0x16
    1642:	ce 01       	movw	r24, r28
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	0e 94 a9 0c 	call	0x1952	; 0x1952 <vfscanf>
    164a:	2e 96       	adiw	r28, 0x0e	; 14
    164c:	e2 e0       	ldi	r30, 0x02	; 2
    164e:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <__epilogue_restores__+0x20>

00001652 <putval>:
    1652:	20 fd       	sbrc	r18, 0
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <putval+0x16>
    1656:	fc 01       	movw	r30, r24
    1658:	23 fd       	sbrc	r18, 3
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <putval+0x14>
    165c:	22 ff       	sbrs	r18, 2
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <putval+0x12>
    1660:	73 83       	std	Z+3, r23	; 0x03
    1662:	62 83       	std	Z+2, r22	; 0x02
    1664:	51 83       	std	Z+1, r21	; 0x01
    1666:	40 83       	st	Z, r20
    1668:	08 95       	ret

0000166a <mulacc>:
    166a:	44 fd       	sbrc	r20, 4
    166c:	10 c0       	rjmp	.+32     	; 0x168e <mulacc+0x24>
    166e:	46 fd       	sbrc	r20, 6
    1670:	10 c0       	rjmp	.+32     	; 0x1692 <mulacc+0x28>
    1672:	db 01       	movw	r26, r22
    1674:	fc 01       	movw	r30, r24
    1676:	aa 0f       	add	r26, r26
    1678:	bb 1f       	adc	r27, r27
    167a:	ee 1f       	adc	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	10 94       	com	r1
    1680:	d1 f7       	brne	.-12     	; 0x1676 <mulacc+0xc>
    1682:	6a 0f       	add	r22, r26
    1684:	7b 1f       	adc	r23, r27
    1686:	8e 1f       	adc	r24, r30
    1688:	9f 1f       	adc	r25, r31
    168a:	31 e0       	ldi	r19, 0x01	; 1
    168c:	03 c0       	rjmp	.+6      	; 0x1694 <mulacc+0x2a>
    168e:	33 e0       	ldi	r19, 0x03	; 3
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <mulacc+0x2a>
    1692:	34 e0       	ldi	r19, 0x04	; 4
    1694:	66 0f       	add	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	31 50       	subi	r19, 0x01	; 1
    169e:	d1 f7       	brne	.-12     	; 0x1694 <mulacc+0x2a>
    16a0:	62 0f       	add	r22, r18
    16a2:	71 1d       	adc	r23, r1
    16a4:	81 1d       	adc	r24, r1
    16a6:	91 1d       	adc	r25, r1
    16a8:	08 95       	ret

000016aa <skip_spaces>:
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	8c 01       	movw	r16, r24
    16b4:	c8 01       	movw	r24, r16
    16b6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    16ba:	ec 01       	movw	r28, r24
    16bc:	97 fd       	sbrc	r25, 7
    16be:	08 c0       	rjmp	.+16     	; 0x16d0 <skip_spaces+0x26>
    16c0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <isspace>
    16c4:	89 2b       	or	r24, r25
    16c6:	b1 f7       	brne	.-20     	; 0x16b4 <skip_spaces+0xa>
    16c8:	b8 01       	movw	r22, r16
    16ca:	ce 01       	movw	r24, r28
    16cc:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ungetc>
    16d0:	ce 01       	movw	r24, r28
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <conv_int>:
    16dc:	a1 e0       	ldi	r26, 0x01	; 1
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e4 e7       	ldi	r30, 0x74	; 116
    16e2:	fb e0       	ldi	r31, 0x0B	; 11
    16e4:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__prologue_saves__+0xc>
    16e8:	8c 01       	movw	r16, r24
    16ea:	c6 2e       	mov	r12, r22
    16ec:	7a 01       	movw	r14, r20
    16ee:	29 83       	std	Y+1, r18	; 0x01
    16f0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    16f4:	ac 01       	movw	r20, r24
    16f6:	55 27       	eor	r21, r21
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	4b 32       	cpi	r20, 0x2B	; 43
    16fc:	51 05       	cpc	r21, r1
    16fe:	21 f0       	breq	.+8      	; 0x1708 <conv_int+0x2c>
    1700:	4d 32       	cpi	r20, 0x2D	; 45
    1702:	51 05       	cpc	r21, r1
    1704:	69 f4       	brne	.+26     	; 0x1720 <conv_int+0x44>
    1706:	20 68       	ori	r18, 0x80	; 128
    1708:	ca 94       	dec	r12
    170a:	c1 10       	cpse	r12, r1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <conv_int+0x36>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	76 c0       	rjmp	.+236    	; 0x17fe <conv_int+0x122>
    1712:	c8 01       	movw	r24, r16
    1714:	29 83       	std	Y+1, r18	; 0x01
    1716:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    171a:	29 81       	ldd	r18, Y+1	; 0x01
    171c:	97 fd       	sbrc	r25, 7
    171e:	f7 cf       	rjmp	.-18     	; 0x170e <conv_int+0x32>
    1720:	32 2f       	mov	r19, r18
    1722:	3d 7f       	andi	r19, 0xFD	; 253
    1724:	d3 2e       	mov	r13, r19
    1726:	32 2f       	mov	r19, r18
    1728:	30 73       	andi	r19, 0x30	; 48
    172a:	49 f5       	brne	.+82     	; 0x177e <conv_int+0xa2>
    172c:	80 33       	cpi	r24, 0x30	; 48
    172e:	39 f5       	brne	.+78     	; 0x177e <conv_int+0xa2>
    1730:	bb 24       	eor	r11, r11
    1732:	ba 94       	dec	r11
    1734:	bc 0c       	add	r11, r12
    1736:	09 f4       	brne	.+2      	; 0x173a <conv_int+0x5e>
    1738:	4e c0       	rjmp	.+156    	; 0x17d6 <conv_int+0xfa>
    173a:	c8 01       	movw	r24, r16
    173c:	29 83       	std	Y+1, r18	; 0x01
    173e:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    1742:	29 81       	ldd	r18, Y+1	; 0x01
    1744:	97 fd       	sbrc	r25, 7
    1746:	47 c0       	rjmp	.+142    	; 0x17d6 <conv_int+0xfa>
    1748:	38 2f       	mov	r19, r24
    174a:	3f 7d       	andi	r19, 0xDF	; 223
    174c:	38 35       	cpi	r19, 0x58	; 88
    174e:	69 f4       	brne	.+26     	; 0x176a <conv_int+0x8e>
    1750:	8d 2d       	mov	r24, r13
    1752:	82 64       	ori	r24, 0x42	; 66
    1754:	d8 2e       	mov	r13, r24
    1756:	ca 94       	dec	r12
    1758:	ca 94       	dec	r12
    175a:	cc 20       	and	r12, r12
    175c:	e1 f1       	breq	.+120    	; 0x17d6 <conv_int+0xfa>
    175e:	c8 01       	movw	r24, r16
    1760:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    1764:	97 ff       	sbrs	r25, 7
    1766:	0b c0       	rjmp	.+22     	; 0x177e <conv_int+0xa2>
    1768:	36 c0       	rjmp	.+108    	; 0x17d6 <conv_int+0xfa>
    176a:	26 ff       	sbrs	r18, 6
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <conv_int+0x9a>
    176e:	2d 2d       	mov	r18, r13
    1770:	22 60       	ori	r18, 0x02	; 2
    1772:	d2 2e       	mov	r13, r18
    1774:	03 c0       	rjmp	.+6      	; 0x177c <conv_int+0xa0>
    1776:	3d 2d       	mov	r19, r13
    1778:	32 61       	ori	r19, 0x12	; 18
    177a:	d3 2e       	mov	r13, r19
    177c:	cb 2c       	mov	r12, r11
    177e:	81 2c       	mov	r8, r1
    1780:	91 2c       	mov	r9, r1
    1782:	54 01       	movw	r10, r8
    1784:	20 ed       	ldi	r18, 0xD0	; 208
    1786:	28 0f       	add	r18, r24
    1788:	28 30       	cpi	r18, 0x08	; 8
    178a:	80 f0       	brcs	.+32     	; 0x17ac <conv_int+0xd0>
    178c:	d4 fe       	sbrs	r13, 4
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <conv_int+0xbc>
    1790:	b8 01       	movw	r22, r16
    1792:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ungetc>
    1796:	1c c0       	rjmp	.+56     	; 0x17d0 <conv_int+0xf4>
    1798:	2a 30       	cpi	r18, 0x0A	; 10
    179a:	40 f0       	brcs	.+16     	; 0x17ac <conv_int+0xd0>
    179c:	d6 fe       	sbrs	r13, 6
    179e:	f8 cf       	rjmp	.-16     	; 0x1790 <conv_int+0xb4>
    17a0:	2f 7d       	andi	r18, 0xDF	; 223
    17a2:	3f ee       	ldi	r19, 0xEF	; 239
    17a4:	32 0f       	add	r19, r18
    17a6:	36 30       	cpi	r19, 0x06	; 6
    17a8:	98 f7       	brcc	.-26     	; 0x1790 <conv_int+0xb4>
    17aa:	27 50       	subi	r18, 0x07	; 7
    17ac:	4d 2d       	mov	r20, r13
    17ae:	c5 01       	movw	r24, r10
    17b0:	b4 01       	movw	r22, r8
    17b2:	0e 94 35 0b 	call	0x166a	; 0x166a <mulacc>
    17b6:	4b 01       	movw	r8, r22
    17b8:	5c 01       	movw	r10, r24
    17ba:	8d 2d       	mov	r24, r13
    17bc:	82 60       	ori	r24, 0x02	; 2
    17be:	d8 2e       	mov	r13, r24
    17c0:	ca 94       	dec	r12
    17c2:	cc 20       	and	r12, r12
    17c4:	59 f0       	breq	.+22     	; 0x17dc <conv_int+0x100>
    17c6:	c8 01       	movw	r24, r16
    17c8:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    17cc:	97 ff       	sbrs	r25, 7
    17ce:	da cf       	rjmp	.-76     	; 0x1784 <conv_int+0xa8>
    17d0:	d1 fc       	sbrc	r13, 1
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <conv_int+0x100>
    17d4:	9c cf       	rjmp	.-200    	; 0x170e <conv_int+0x32>
    17d6:	81 2c       	mov	r8, r1
    17d8:	91 2c       	mov	r9, r1
    17da:	54 01       	movw	r10, r8
    17dc:	d7 fe       	sbrs	r13, 7
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <conv_int+0x114>
    17e0:	b0 94       	com	r11
    17e2:	a0 94       	com	r10
    17e4:	90 94       	com	r9
    17e6:	80 94       	com	r8
    17e8:	81 1c       	adc	r8, r1
    17ea:	91 1c       	adc	r9, r1
    17ec:	a1 1c       	adc	r10, r1
    17ee:	b1 1c       	adc	r11, r1
    17f0:	2d 2d       	mov	r18, r13
    17f2:	b5 01       	movw	r22, r10
    17f4:	a4 01       	movw	r20, r8
    17f6:	c7 01       	movw	r24, r14
    17f8:	0e 94 29 0b 	call	0x1652	; 0x1652 <putval>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	21 96       	adiw	r28, 0x01	; 1
    1800:	ec e0       	ldi	r30, 0x0C	; 12
    1802:	0c 94 67 0e 	jmp	0x1cce	; 0x1cce <__epilogue_restores__+0xc>

00001806 <conv_brk>:
    1806:	a1 e2       	ldi	r26, 0x21	; 33
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e9 e0       	ldi	r30, 0x09	; 9
    180c:	fc e0       	ldi	r31, 0x0C	; 12
    180e:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__prologue_saves__+0x8>
    1812:	5c 01       	movw	r10, r24
    1814:	7a 01       	movw	r14, r20
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	6c 01       	movw	r12, r24
    181c:	80 e2       	ldi	r24, 0x20	; 32
    181e:	f6 01       	movw	r30, r12
    1820:	11 92       	st	Z+, r1
    1822:	8a 95       	dec	r24
    1824:	e9 f7       	brne	.-6      	; 0x1820 <conv_brk+0x1a>
    1826:	f5 01       	movw	r30, r10
    1828:	83 80       	ldd	r8, Z+3	; 0x03
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	91 2c       	mov	r9, r1
    1830:	71 2c       	mov	r7, r1
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	a1 e0       	ldi	r26, 0x01	; 1
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	f9 01       	movw	r30, r18
    183a:	83 fc       	sbrc	r8, 3
    183c:	85 91       	lpm	r24, Z+
    183e:	83 fe       	sbrs	r8, 3
    1840:	81 91       	ld	r24, Z+
    1842:	8f 01       	movw	r16, r30
    1844:	98 2f       	mov	r25, r24
    1846:	9f 01       	movw	r18, r30
    1848:	81 11       	cpse	r24, r1
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <conv_brk+0x4c>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	7c c0       	rjmp	.+248    	; 0x194a <conv_brk+0x144>
    1852:	8e 35       	cpi	r24, 0x5E	; 94
    1854:	19 f4       	brne	.+6      	; 0x185c <conv_brk+0x56>
    1856:	41 15       	cp	r20, r1
    1858:	51 05       	cpc	r21, r1
    185a:	49 f1       	breq	.+82     	; 0x18ae <conv_brk+0xa8>
    185c:	e7 2f       	mov	r30, r23
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	e4 17       	cp	r30, r20
    1862:	f5 07       	cpc	r31, r21
    1864:	3c f4       	brge	.+14     	; 0x1874 <conv_brk+0x6e>
    1866:	8d 35       	cpi	r24, 0x5D	; 93
    1868:	59 f1       	breq	.+86     	; 0x18c0 <conv_brk+0xba>
    186a:	8d 32       	cpi	r24, 0x2D	; 45
    186c:	19 f4       	brne	.+6      	; 0x1874 <conv_brk+0x6e>
    186e:	77 20       	and	r7, r7
    1870:	01 f1       	breq	.+64     	; 0x18b2 <conv_brk+0xac>
    1872:	03 c0       	rjmp	.+6      	; 0x187a <conv_brk+0x74>
    1874:	71 10       	cpse	r7, r1
    1876:	01 c0       	rjmp	.+2      	; 0x187a <conv_brk+0x74>
    1878:	98 2e       	mov	r9, r24
    187a:	89 2f       	mov	r24, r25
    187c:	86 95       	lsr	r24
    187e:	86 95       	lsr	r24
    1880:	86 95       	lsr	r24
    1882:	86 01       	movw	r16, r12
    1884:	08 0f       	add	r16, r24
    1886:	11 1d       	adc	r17, r1
    1888:	89 2f       	mov	r24, r25
    188a:	87 70       	andi	r24, 0x07	; 7
    188c:	3d 01       	movw	r6, r26
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <conv_brk+0x8c>
    1890:	66 0c       	add	r6, r6
    1892:	8a 95       	dec	r24
    1894:	ea f7       	brpl	.-6      	; 0x1890 <conv_brk+0x8a>
    1896:	f8 01       	movw	r30, r16
    1898:	80 81       	ld	r24, Z
    189a:	86 29       	or	r24, r6
    189c:	80 83       	st	Z, r24
    189e:	99 15       	cp	r25, r9
    18a0:	59 f0       	breq	.+22     	; 0x18b8 <conv_brk+0xb2>
    18a2:	99 15       	cp	r25, r9
    18a4:	10 f4       	brcc	.+4      	; 0x18aa <conv_brk+0xa4>
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	e8 cf       	rjmp	.-48     	; 0x187a <conv_brk+0x74>
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	e6 cf       	rjmp	.-52     	; 0x187a <conv_brk+0x74>
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <conv_brk+0xb4>
    18b2:	77 24       	eor	r7, r7
    18b4:	73 94       	inc	r7
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <conv_brk+0xb4>
    18b8:	71 2c       	mov	r7, r1
    18ba:	4f 5f       	subi	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	bc cf       	rjmp	.-136    	; 0x1838 <conv_brk+0x32>
    18c0:	77 20       	and	r7, r7
    18c2:	19 f0       	breq	.+6      	; 0x18ca <conv_brk+0xc4>
    18c4:	8e 81       	ldd	r24, Y+6	; 0x06
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	8e 83       	std	Y+6, r24	; 0x06
    18ca:	71 11       	cpse	r23, r1
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <conv_brk+0xce>
    18ce:	99 24       	eor	r9, r9
    18d0:	93 94       	inc	r9
    18d2:	16 c0       	rjmp	.+44     	; 0x1900 <conv_brk+0xfa>
    18d4:	f6 01       	movw	r30, r12
    18d6:	9e 01       	movw	r18, r28
    18d8:	2f 5d       	subi	r18, 0xDF	; 223
    18da:	3f 4f       	sbci	r19, 0xFF	; 255
    18dc:	80 81       	ld	r24, Z
    18de:	80 95       	com	r24
    18e0:	81 93       	st	Z+, r24
    18e2:	e2 17       	cp	r30, r18
    18e4:	f3 07       	cpc	r31, r19
    18e6:	d1 f7       	brne	.-12     	; 0x18dc <conv_brk+0xd6>
    18e8:	f2 cf       	rjmp	.-28     	; 0x18ce <conv_brk+0xc8>
    18ea:	e1 14       	cp	r14, r1
    18ec:	f1 04       	cpc	r15, r1
    18ee:	29 f0       	breq	.+10     	; 0x18fa <conv_brk+0xf4>
    18f0:	f7 01       	movw	r30, r14
    18f2:	80 83       	st	Z, r24
    18f4:	c7 01       	movw	r24, r14
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	7c 01       	movw	r14, r24
    18fa:	61 50       	subi	r22, 0x01	; 1
    18fc:	91 2c       	mov	r9, r1
    18fe:	f9 f0       	breq	.+62     	; 0x193e <conv_brk+0x138>
    1900:	c5 01       	movw	r24, r10
    1902:	69 a3       	std	Y+33, r22	; 0x21
    1904:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    1908:	69 a1       	ldd	r22, Y+33	; 0x21
    190a:	97 fd       	sbrc	r25, 7
    190c:	16 c0       	rjmp	.+44     	; 0x193a <conv_brk+0x134>
    190e:	28 2f       	mov	r18, r24
    1910:	26 95       	lsr	r18
    1912:	26 95       	lsr	r18
    1914:	26 95       	lsr	r18
    1916:	f6 01       	movw	r30, r12
    1918:	e2 0f       	add	r30, r18
    191a:	f1 1d       	adc	r31, r1
    191c:	20 81       	ld	r18, Z
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	ac 01       	movw	r20, r24
    1922:	47 70       	andi	r20, 0x07	; 7
    1924:	55 27       	eor	r21, r21
    1926:	02 c0       	rjmp	.+4      	; 0x192c <conv_brk+0x126>
    1928:	35 95       	asr	r19
    192a:	27 95       	ror	r18
    192c:	4a 95       	dec	r20
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <conv_brk+0x122>
    1930:	20 fd       	sbrc	r18, 0
    1932:	db cf       	rjmp	.-74     	; 0x18ea <conv_brk+0xe4>
    1934:	b5 01       	movw	r22, r10
    1936:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ungetc>
    193a:	91 10       	cpse	r9, r1
    193c:	87 cf       	rjmp	.-242    	; 0x184c <conv_brk+0x46>
    193e:	e1 14       	cp	r14, r1
    1940:	f1 04       	cpc	r15, r1
    1942:	11 f0       	breq	.+4      	; 0x1948 <conv_brk+0x142>
    1944:	f7 01       	movw	r30, r14
    1946:	10 82       	st	Z, r1
    1948:	c8 01       	movw	r24, r16
    194a:	a1 96       	adiw	r28, 0x21	; 33
    194c:	ee e0       	ldi	r30, 0x0E	; 14
    194e:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <__epilogue_restores__+0x8>

00001952 <vfscanf>:
    1952:	4f 92       	push	r4
    1954:	5f 92       	push	r5
    1956:	7f 92       	push	r7
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	6c 01       	movw	r12, r24
    1978:	2b 01       	movw	r4, r22
    197a:	5a 01       	movw	r10, r20
    197c:	fc 01       	movw	r30, r24
    197e:	17 82       	std	Z+7, r1	; 0x07
    1980:	16 82       	std	Z+6, r1	; 0x06
    1982:	71 2c       	mov	r7, r1
    1984:	f6 01       	movw	r30, r12
    1986:	f3 80       	ldd	r15, Z+3	; 0x03
    1988:	f2 01       	movw	r30, r4
    198a:	f3 fc       	sbrc	r15, 3
    198c:	85 91       	lpm	r24, Z+
    198e:	f3 fe       	sbrs	r15, 3
    1990:	81 91       	ld	r24, Z+
    1992:	38 2f       	mov	r19, r24
    1994:	2f 01       	movw	r4, r30
    1996:	88 23       	and	r24, r24
    1998:	09 f4       	brne	.+2      	; 0x199c <vfscanf+0x4a>
    199a:	f3 c0       	rjmp	.+486    	; 0x1b82 <vfscanf+0x230>
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	39 83       	std	Y+1, r19	; 0x01
    19a0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <isspace>
    19a4:	39 81       	ldd	r19, Y+1	; 0x01
    19a6:	89 2b       	or	r24, r25
    19a8:	21 f0       	breq	.+8      	; 0x19b2 <vfscanf+0x60>
    19aa:	c6 01       	movw	r24, r12
    19ac:	0e 94 55 0b 	call	0x16aa	; 0x16aa <skip_spaces>
    19b0:	e9 cf       	rjmp	.-46     	; 0x1984 <vfscanf+0x32>
    19b2:	35 32       	cpi	r19, 0x25	; 37
    19b4:	41 f4       	brne	.+16     	; 0x19c6 <vfscanf+0x74>
    19b6:	f2 01       	movw	r30, r4
    19b8:	f3 fc       	sbrc	r15, 3
    19ba:	35 91       	lpm	r19, Z+
    19bc:	f3 fe       	sbrs	r15, 3
    19be:	31 91       	ld	r19, Z+
    19c0:	2f 01       	movw	r4, r30
    19c2:	35 32       	cpi	r19, 0x25	; 37
    19c4:	69 f4       	brne	.+26     	; 0x19e0 <vfscanf+0x8e>
    19c6:	c6 01       	movw	r24, r12
    19c8:	39 83       	std	Y+1, r19	; 0x01
    19ca:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    19ce:	39 81       	ldd	r19, Y+1	; 0x01
    19d0:	97 fd       	sbrc	r25, 7
    19d2:	d5 c0       	rjmp	.+426    	; 0x1b7e <vfscanf+0x22c>
    19d4:	38 17       	cp	r19, r24
    19d6:	b1 f2       	breq	.-84     	; 0x1984 <vfscanf+0x32>
    19d8:	b6 01       	movw	r22, r12
    19da:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ungetc>
    19de:	d1 c0       	rjmp	.+418    	; 0x1b82 <vfscanf+0x230>
    19e0:	3a 32       	cpi	r19, 0x2A	; 42
    19e2:	39 f4       	brne	.+14     	; 0x19f2 <vfscanf+0xa0>
    19e4:	f3 fc       	sbrc	r15, 3
    19e6:	35 91       	lpm	r19, Z+
    19e8:	f3 fe       	sbrs	r15, 3
    19ea:	31 91       	ld	r19, Z+
    19ec:	2f 01       	movw	r4, r30
    19ee:	51 e0       	ldi	r21, 0x01	; 1
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <vfscanf+0xa2>
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	42 01       	movw	r8, r4
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	20 ed       	ldi	r18, 0xD0	; 208
    19fa:	23 0f       	add	r18, r19
    19fc:	2a 30       	cpi	r18, 0x0A	; 10
    19fe:	90 f4       	brcc	.+36     	; 0x1a24 <vfscanf+0xd2>
    1a00:	52 60       	ori	r21, 0x02	; 2
    1a02:	61 2f       	mov	r22, r17
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	59 83       	std	Y+1, r21	; 0x01
    1a0e:	0e 94 35 0b 	call	0x166a	; 0x166a <mulacc>
    1a12:	16 2f       	mov	r17, r22
    1a14:	f4 01       	movw	r30, r8
    1a16:	f3 fc       	sbrc	r15, 3
    1a18:	35 91       	lpm	r19, Z+
    1a1a:	f3 fe       	sbrs	r15, 3
    1a1c:	31 91       	ld	r19, Z+
    1a1e:	4f 01       	movw	r8, r30
    1a20:	59 81       	ldd	r21, Y+1	; 0x01
    1a22:	ea cf       	rjmp	.-44     	; 0x19f8 <vfscanf+0xa6>
    1a24:	05 2f       	mov	r16, r21
    1a26:	23 2f       	mov	r18, r19
    1a28:	24 01       	movw	r4, r8
    1a2a:	51 ff       	sbrs	r21, 1
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <vfscanf+0xe2>
    1a2e:	11 11       	cpse	r17, r1
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <vfscanf+0xe4>
    1a32:	a7 c0       	rjmp	.+334    	; 0x1b82 <vfscanf+0x230>
    1a34:	1f ef       	ldi	r17, 0xFF	; 255
    1a36:	38 36       	cpi	r19, 0x68	; 104
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <vfscanf+0xee>
    1a3a:	3c 36       	cpi	r19, 0x6C	; 108
    1a3c:	59 f0       	breq	.+22     	; 0x1a54 <vfscanf+0x102>
    1a3e:	11 c0       	rjmp	.+34     	; 0x1a62 <vfscanf+0x110>
    1a40:	f4 01       	movw	r30, r8
    1a42:	f3 fc       	sbrc	r15, 3
    1a44:	25 91       	lpm	r18, Z+
    1a46:	f3 fe       	sbrs	r15, 3
    1a48:	21 91       	ld	r18, Z+
    1a4a:	2f 01       	movw	r4, r30
    1a4c:	28 36       	cpi	r18, 0x68	; 104
    1a4e:	49 f4       	brne	.+18     	; 0x1a62 <vfscanf+0x110>
    1a50:	05 2f       	mov	r16, r21
    1a52:	08 60       	ori	r16, 0x08	; 8
    1a54:	04 60       	ori	r16, 0x04	; 4
    1a56:	f2 01       	movw	r30, r4
    1a58:	f3 fc       	sbrc	r15, 3
    1a5a:	25 91       	lpm	r18, Z+
    1a5c:	f3 fe       	sbrs	r15, 3
    1a5e:	21 91       	ld	r18, Z+
    1a60:	2f 01       	movw	r4, r30
    1a62:	22 23       	and	r18, r18
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <vfscanf+0x116>
    1a66:	8d c0       	rjmp	.+282    	; 0x1b82 <vfscanf+0x230>
    1a68:	62 2f       	mov	r22, r18
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	8c ed       	ldi	r24, 0xDC	; 220
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	29 83       	std	Y+1, r18	; 0x01
    1a72:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <strchr_P>
    1a76:	29 81       	ldd	r18, Y+1	; 0x01
    1a78:	89 2b       	or	r24, r25
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <vfscanf+0x12c>
    1a7c:	82 c0       	rjmp	.+260    	; 0x1b82 <vfscanf+0x230>
    1a7e:	00 fd       	sbrc	r16, 0
    1a80:	07 c0       	rjmp	.+14     	; 0x1a90 <vfscanf+0x13e>
    1a82:	f5 01       	movw	r30, r10
    1a84:	e0 80       	ld	r14, Z
    1a86:	f1 80       	ldd	r15, Z+1	; 0x01
    1a88:	c5 01       	movw	r24, r10
    1a8a:	02 96       	adiw	r24, 0x02	; 2
    1a8c:	5c 01       	movw	r10, r24
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfscanf+0x142>
    1a90:	e1 2c       	mov	r14, r1
    1a92:	f1 2c       	mov	r15, r1
    1a94:	2e 36       	cpi	r18, 0x6E	; 110
    1a96:	51 f4       	brne	.+20     	; 0x1aac <vfscanf+0x15a>
    1a98:	f6 01       	movw	r30, r12
    1a9a:	46 81       	ldd	r20, Z+6	; 0x06
    1a9c:	57 81       	ldd	r21, Z+7	; 0x07
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	70 e0       	ldi	r23, 0x00	; 0
    1aa2:	20 2f       	mov	r18, r16
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	0e 94 29 0b 	call	0x1652	; 0x1652 <putval>
    1aaa:	6c cf       	rjmp	.-296    	; 0x1984 <vfscanf+0x32>
    1aac:	23 36       	cpi	r18, 0x63	; 99
    1aae:	91 f4       	brne	.+36     	; 0x1ad4 <vfscanf+0x182>
    1ab0:	01 ff       	sbrs	r16, 1
    1ab2:	11 e0       	ldi	r17, 0x01	; 1
    1ab4:	c6 01       	movw	r24, r12
    1ab6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    1aba:	97 fd       	sbrc	r25, 7
    1abc:	60 c0       	rjmp	.+192    	; 0x1b7e <vfscanf+0x22c>
    1abe:	e1 14       	cp	r14, r1
    1ac0:	f1 04       	cpc	r15, r1
    1ac2:	29 f0       	breq	.+10     	; 0x1ace <vfscanf+0x17c>
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	80 83       	st	Z, r24
    1ac8:	c7 01       	movw	r24, r14
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	7c 01       	movw	r14, r24
    1ace:	11 50       	subi	r17, 0x01	; 1
    1ad0:	89 f7       	brne	.-30     	; 0x1ab4 <vfscanf+0x162>
    1ad2:	51 c0       	rjmp	.+162    	; 0x1b76 <vfscanf+0x224>
    1ad4:	2b 35       	cpi	r18, 0x5B	; 91
    1ad6:	59 f4       	brne	.+22     	; 0x1aee <vfscanf+0x19c>
    1ad8:	92 01       	movw	r18, r4
    1ada:	a7 01       	movw	r20, r14
    1adc:	61 2f       	mov	r22, r17
    1ade:	c6 01       	movw	r24, r12
    1ae0:	0e 94 03 0c 	call	0x1806	; 0x1806 <conv_brk>
    1ae4:	2c 01       	movw	r4, r24
    1ae6:	89 2b       	or	r24, r25
    1ae8:	09 f0       	breq	.+2      	; 0x1aec <vfscanf+0x19a>
    1aea:	45 c0       	rjmp	.+138    	; 0x1b76 <vfscanf+0x224>
    1aec:	3f c0       	rjmp	.+126    	; 0x1b6c <vfscanf+0x21a>
    1aee:	c6 01       	movw	r24, r12
    1af0:	29 83       	std	Y+1, r18	; 0x01
    1af2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <skip_spaces>
    1af6:	29 81       	ldd	r18, Y+1	; 0x01
    1af8:	97 fd       	sbrc	r25, 7
    1afa:	41 c0       	rjmp	.+130    	; 0x1b7e <vfscanf+0x22c>
    1afc:	2f 36       	cpi	r18, 0x6F	; 111
    1afe:	59 f1       	breq	.+86     	; 0x1b56 <vfscanf+0x204>
    1b00:	28 f4       	brcc	.+10     	; 0x1b0c <vfscanf+0x1ba>
    1b02:	24 36       	cpi	r18, 0x64	; 100
    1b04:	31 f1       	breq	.+76     	; 0x1b52 <vfscanf+0x200>
    1b06:	29 36       	cpi	r18, 0x69	; 105
    1b08:	49 f1       	breq	.+82     	; 0x1b5c <vfscanf+0x20a>
    1b0a:	27 c0       	rjmp	.+78     	; 0x1b5a <vfscanf+0x208>
    1b0c:	23 37       	cpi	r18, 0x73	; 115
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <vfscanf+0x1d8>
    1b10:	25 37       	cpi	r18, 0x75	; 117
    1b12:	f9 f0       	breq	.+62     	; 0x1b52 <vfscanf+0x200>
    1b14:	22 c0       	rjmp	.+68     	; 0x1b5a <vfscanf+0x208>
    1b16:	e1 14       	cp	r14, r1
    1b18:	f1 04       	cpc	r15, r1
    1b1a:	29 f0       	breq	.+10     	; 0x1b26 <vfscanf+0x1d4>
    1b1c:	f7 01       	movw	r30, r14
    1b1e:	80 82       	st	Z, r8
    1b20:	c7 01       	movw	r24, r14
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	7c 01       	movw	r14, r24
    1b26:	11 50       	subi	r17, 0x01	; 1
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <vfscanf+0x1f4>
    1b2a:	c6 01       	movw	r24, r12
    1b2c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <fgetc>
    1b30:	4c 01       	movw	r8, r24
    1b32:	97 fd       	sbrc	r25, 7
    1b34:	08 c0       	rjmp	.+16     	; 0x1b46 <vfscanf+0x1f4>
    1b36:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <isspace>
    1b3a:	89 2b       	or	r24, r25
    1b3c:	61 f3       	breq	.-40     	; 0x1b16 <vfscanf+0x1c4>
    1b3e:	b6 01       	movw	r22, r12
    1b40:	c4 01       	movw	r24, r8
    1b42:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <ungetc>
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	a9 f0       	breq	.+42     	; 0x1b76 <vfscanf+0x224>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	10 82       	st	Z, r1
    1b50:	12 c0       	rjmp	.+36     	; 0x1b76 <vfscanf+0x224>
    1b52:	00 62       	ori	r16, 0x20	; 32
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <vfscanf+0x20a>
    1b56:	00 61       	ori	r16, 0x10	; 16
    1b58:	01 c0       	rjmp	.+2      	; 0x1b5c <vfscanf+0x20a>
    1b5a:	00 64       	ori	r16, 0x40	; 64
    1b5c:	20 2f       	mov	r18, r16
    1b5e:	a7 01       	movw	r20, r14
    1b60:	61 2f       	mov	r22, r17
    1b62:	c6 01       	movw	r24, r12
    1b64:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <conv_int>
    1b68:	81 11       	cpse	r24, r1
    1b6a:	05 c0       	rjmp	.+10     	; 0x1b76 <vfscanf+0x224>
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	83 81       	ldd	r24, Z+3	; 0x03
    1b70:	80 73       	andi	r24, 0x30	; 48
    1b72:	29 f4       	brne	.+10     	; 0x1b7e <vfscanf+0x22c>
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfscanf+0x230>
    1b76:	00 fd       	sbrc	r16, 0
    1b78:	05 cf       	rjmp	.-502    	; 0x1984 <vfscanf+0x32>
    1b7a:	73 94       	inc	r7
    1b7c:	03 cf       	rjmp	.-506    	; 0x1984 <vfscanf+0x32>
    1b7e:	77 20       	and	r7, r7
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <vfscanf+0x236>
    1b82:	87 2d       	mov	r24, r7
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfscanf+0x23a>
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	0f 90       	pop	r0
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	af 90       	pop	r10
    1ba2:	9f 90       	pop	r9
    1ba4:	8f 90       	pop	r8
    1ba6:	7f 90       	pop	r7
    1ba8:	5f 90       	pop	r5
    1baa:	4f 90       	pop	r4
    1bac:	08 95       	ret

00001bae <isspace>:
    1bae:	91 11       	cpse	r25, r1
    1bb0:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__ctype_isfalse>
    1bb4:	80 32       	cpi	r24, 0x20	; 32
    1bb6:	19 f0       	breq	.+6      	; 0x1bbe <isspace+0x10>
    1bb8:	89 50       	subi	r24, 0x09	; 9
    1bba:	85 50       	subi	r24, 0x05	; 5
    1bbc:	c8 f7       	brcc	.-14     	; 0x1bb0 <isspace+0x2>
    1bbe:	08 95       	ret

00001bc0 <strchr_P>:
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	05 90       	lpm	r0, Z+
    1bc4:	06 16       	cp	r0, r22
    1bc6:	21 f0       	breq	.+8      	; 0x1bd0 <strchr_P+0x10>
    1bc8:	00 20       	and	r0, r0
    1bca:	d9 f7       	brne	.-10     	; 0x1bc2 <strchr_P+0x2>
    1bcc:	c0 01       	movw	r24, r0
    1bce:	08 95       	ret
    1bd0:	31 97       	sbiw	r30, 0x01	; 1
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	08 95       	ret

00001bd6 <fgetc>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	20 ff       	sbrs	r18, 0
    1be0:	33 c0       	rjmp	.+102    	; 0x1c48 <fgetc+0x72>
    1be2:	26 ff       	sbrs	r18, 6
    1be4:	0a c0       	rjmp	.+20     	; 0x1bfa <fgetc+0x24>
    1be6:	2f 7b       	andi	r18, 0xBF	; 191
    1be8:	2b 83       	std	Y+3, r18	; 0x03
    1bea:	8e 81       	ldd	r24, Y+6	; 0x06
    1bec:	9f 81       	ldd	r25, Y+7	; 0x07
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	9f 83       	std	Y+7, r25	; 0x07
    1bf2:	8e 83       	std	Y+6, r24	; 0x06
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	29 c0       	rjmp	.+82     	; 0x1c4c <fgetc+0x76>
    1bfa:	22 ff       	sbrs	r18, 2
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <fgetc+0x46>
    1bfe:	e8 81       	ld	r30, Y
    1c00:	f9 81       	ldd	r31, Y+1	; 0x01
    1c02:	80 81       	ld	r24, Z
    1c04:	08 2e       	mov	r0, r24
    1c06:	00 0c       	add	r0, r0
    1c08:	99 0b       	sbc	r25, r25
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	19 f4       	brne	.+6      	; 0x1c14 <fgetc+0x3e>
    1c0e:	20 62       	ori	r18, 0x20	; 32
    1c10:	2b 83       	std	Y+3, r18	; 0x03
    1c12:	1a c0       	rjmp	.+52     	; 0x1c48 <fgetc+0x72>
    1c14:	31 96       	adiw	r30, 0x01	; 1
    1c16:	f9 83       	std	Y+1, r31	; 0x01
    1c18:	e8 83       	st	Y, r30
    1c1a:	0e c0       	rjmp	.+28     	; 0x1c38 <fgetc+0x62>
    1c1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c20:	09 95       	icall
    1c22:	97 ff       	sbrs	r25, 7
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <fgetc+0x62>
    1c26:	2b 81       	ldd	r18, Y+3	; 0x03
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <fgetc+0x5a>
    1c2c:	80 e2       	ldi	r24, 0x20	; 32
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <fgetc+0x5c>
    1c30:	80 e1       	ldi	r24, 0x10	; 16
    1c32:	82 2b       	or	r24, r18
    1c34:	8b 83       	std	Y+3, r24	; 0x03
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <fgetc+0x72>
    1c38:	2e 81       	ldd	r18, Y+6	; 0x06
    1c3a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c3c:	2f 5f       	subi	r18, 0xFF	; 255
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	3f 83       	std	Y+7, r19	; 0x07
    1c42:	2e 83       	std	Y+6, r18	; 0x06
    1c44:	99 27       	eor	r25, r25
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <fgetc+0x76>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	08 95       	ret

00001c52 <ungetc>:
    1c52:	fb 01       	movw	r30, r22
    1c54:	23 81       	ldd	r18, Z+3	; 0x03
    1c56:	20 ff       	sbrs	r18, 0
    1c58:	12 c0       	rjmp	.+36     	; 0x1c7e <ungetc+0x2c>
    1c5a:	26 fd       	sbrc	r18, 6
    1c5c:	10 c0       	rjmp	.+32     	; 0x1c7e <ungetc+0x2c>
    1c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	93 07       	cpc	r25, r19
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <ungetc+0x2c>
    1c66:	82 83       	std	Z+2, r24	; 0x02
    1c68:	2f 7d       	andi	r18, 0xDF	; 223
    1c6a:	20 64       	ori	r18, 0x40	; 64
    1c6c:	23 83       	std	Z+3, r18	; 0x03
    1c6e:	26 81       	ldd	r18, Z+6	; 0x06
    1c70:	37 81       	ldd	r19, Z+7	; 0x07
    1c72:	21 50       	subi	r18, 0x01	; 1
    1c74:	31 09       	sbc	r19, r1
    1c76:	37 83       	std	Z+7, r19	; 0x07
    1c78:	26 83       	std	Z+6, r18	; 0x06
    1c7a:	99 27       	eor	r25, r25
    1c7c:	08 95       	ret
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	08 95       	ret

00001c84 <__ctype_isfalse>:
    1c84:	99 27       	eor	r25, r25
    1c86:	88 27       	eor	r24, r24

00001c88 <__ctype_istrue>:
    1c88:	08 95       	ret

00001c8a <__prologue_saves__>:
    1c8a:	2f 92       	push	r2
    1c8c:	3f 92       	push	r3
    1c8e:	4f 92       	push	r4
    1c90:	5f 92       	push	r5
    1c92:	6f 92       	push	r6
    1c94:	7f 92       	push	r7
    1c96:	8f 92       	push	r8
    1c98:	9f 92       	push	r9
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	ca 1b       	sub	r28, r26
    1cb4:	db 0b       	sbc	r29, r27
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	09 94       	ijmp

00001cc2 <__epilogue_restores__>:
    1cc2:	2a 88       	ldd	r2, Y+18	; 0x12
    1cc4:	39 88       	ldd	r3, Y+17	; 0x11
    1cc6:	48 88       	ldd	r4, Y+16	; 0x10
    1cc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cca:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ccc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cce:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cd4:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd6:	c8 84       	ldd	r12, Y+8	; 0x08
    1cd8:	df 80       	ldd	r13, Y+7	; 0x07
    1cda:	ee 80       	ldd	r14, Y+6	; 0x06
    1cdc:	fd 80       	ldd	r15, Y+5	; 0x05
    1cde:	0c 81       	ldd	r16, Y+4	; 0x04
    1ce0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ce2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ce4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce6:	ce 0f       	add	r28, r30
    1ce8:	d1 1d       	adc	r29, r1
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	ed 01       	movw	r28, r26
    1cf6:	08 95       	ret

00001cf8 <_exit>:
    1cf8:	f8 94       	cli

00001cfa <__stop_program>:
    1cfa:	ff cf       	rjmp	.-2      	; 0x1cfa <__stop_program>
