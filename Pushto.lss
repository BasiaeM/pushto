
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800070  00800070  00000680  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7d  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000055d  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037c  00000000  00000000  0000194a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00001cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000257  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a7  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 02 	call	0x530	; 0x530 <main>
  8a:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <system_init>:


void system_init (void)
{	
	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
  92:	85 b7       	in	r24, 0x35	; 53
  94:	85 60       	ori	r24, 0x05	; 5
  96:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 6c       	ori	r24, 0xC0	; 192
  9c:	8b bf       	out	0x3b, r24	; 59
	
	/*inicjalizacja LCD*/
	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26

	/*inicjalizacja encoderow*/
	EN_DIR = 0b00000000; //Ustawienie pinow dla encoderow
  a2:	11 ba       	out	0x11, r1	; 17
	EN_PORT = 0b00001111; //pullupy dla encoderow
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	92 bb       	out	0x12, r25	; 18

	encoder1.maskA=0b00000100;
  a8:	e4 e8       	ldi	r30, 0x84	; 132
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	90 83       	st	Z, r25
	encoder1.maskB=0b00000001;
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	91 83       	std	Z+1, r25	; 0x01
	encoder1.count=0; //----------------------------enkodery start 0 
  b4:	13 82       	std	Z+3, r1	; 0x03
  b6:	12 82       	std	Z+2, r1	; 0x02
	encoder2.maskA=0b000001000;
  b8:	e8 e8       	ldi	r30, 0x88	; 136
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	98 e0       	ldi	r25, 0x08	; 8
  be:	90 83       	st	Z, r25
	encoder2.maskB=0b000000010;
  c0:	92 e0       	ldi	r25, 0x02	; 2
  c2:	91 83       	std	Z+1, r25	; 0x01
	encoder2.count=0;
  c4:	13 82       	std	Z+3, r1	; 0x03
  c6:	12 82       	std	Z+2, r1	; 0x02

	//inicjalizacja klawiatury
	keypad_A.i=0; //zerowanie wskaznika buforu
  c8:	e0 e7       	ldi	r30, 0x70	; 112
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	12 8a       	std	Z+18, r1	; 0x12
  ce:	11 8a       	std	Z+17, r1	; 0x11
	keypad_A.flags='\0';
  d0:	13 8a       	std	Z+19, r1	; 0x13
	
	//############# Timer1 16bit config ####################
	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
  d2:	9f b5       	in	r25, 0x2f	; 47
  d4:	9f bd       	out	0x2f, r25	; 47
 	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Mode = CTC, Prescaler = 64
  d6:	9e b5       	in	r25, 0x2e	; 46
  d8:	9b 60       	ori	r25, 0x0B	; 11
  da:	9e bd       	out	0x2e, r25	; 46
	OCR1A = 31250;   // timer compare value 1Hz - 31250 
  dc:	22 e1       	ldi	r18, 0x12	; 18
  de:	3a e7       	ldi	r19, 0x7A	; 122
  e0:	3b bd       	out	0x2b, r19	; 43
  e2:	2a bd       	out	0x2a, r18	; 42
	TIMSK|=(1<<OCIE1A); //enable compare reg A interrupt
  e4:	99 b7       	in	r25, 0x39	; 57
  e6:	90 61       	ori	r25, 0x10	; 16
  e8:	99 bf       	out	0x39, r25	; 57
	
    	sei(); // enable global interrupts
  ea:	78 94       	sei

    	//dioda -test
    	DDRC = 0xFF;
  ec:	84 bb       	out	0x14, r24	; 20
    	PORTC = 0xFF;
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	08 95       	ret

000000f2 <__vector_6>:
    	sscanf(buf1,"ala ma kota"); // dziala, moze byc uzywane
    	*/
}

ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1

}
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <__vector_1>:

ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	direction(&encoder1);
 128:	84 e8       	ldi	r24, 0x84	; 132
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 81 02 	call	0x502	; 0x502 <direction>
}
 130:	ff 91       	pop	r31
 132:	ef 91       	pop	r30
 134:	bf 91       	pop	r27
 136:	af 91       	pop	r26
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_2>:

ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
	direction(&encoder2);
 174:	88 e8       	ldi	r24, 0x88	; 136
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 81 02 	call	0x502	; 0x502 <direction>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <lcdcmd>:
#include <util/delay.h>

void lcdcmd(unsigned char Data)
{

LCD_PORT &= ~RS; //because sending command
 19e:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
 1a0:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
 1a2:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT &= 0x0f;
 1a4:	9b b3       	in	r25, 0x1b	; 27
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	9b bb       	out	0x1b, r25	; 27

LCD_PORT |= ((Data ) & 0xf0);
 1aa:	9b b3       	in	r25, 0x1b	; 27
 1ac:	28 2f       	mov	r18, r24
 1ae:	20 7f       	andi	r18, 0xF0	; 240
 1b0:	92 2b       	or	r25, r18
 1b2:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
 1b4:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
 1b6:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	e3 ef       	ldi	r30, 0xF3	; 243
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcdcmd+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcdcmd+0x24>
 1c2:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 1c4:	da 98       	cbi	0x1b, 2	; 27

LCD_PORT &= 0x0f;
 1c6:	9b b3       	in	r25, 0x1b	; 27
 1c8:	9f 70       	andi	r25, 0x0F	; 15
 1ca:	9b bb       	out	0x1b, r25	; 27

LCD_PORT  |= ((Data<<4) &  0xf0);
 1cc:	2b b3       	in	r18, 0x1b	; 27
 1ce:	f0 e1       	ldi	r31, 0x10	; 16
 1d0:	8f 9f       	mul	r24, r31
 1d2:	c0 01       	movw	r24, r0
 1d4:	11 24       	eor	r1, r1
 1d6:	82 2b       	or	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 1da:	da 9a       	sbi	0x1b, 2	; 27
 1dc:	83 ef       	ldi	r24, 0xF3	; 243
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcdcmd+0x42>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcdcmd+0x48>
 1e6:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 1e8:	da 98       	cbi	0x1b, 2	; 27
 1ea:	08 95       	ret

000001ec <lcdData>:


}
void lcdData(unsigned char l)
{
LCD_PORT |=RS;  //because sending data
 1ec:	d8 9a       	sbi	0x1b, 0	; 27
LCD_PORT &=~RW;
 1ee:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  &=~EN;
 1f0:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
 1f2:	9b b3       	in	r25, 0x1b	; 27
 1f4:	9f 70       	andi	r25, 0x0F	; 15
 1f6:	9b bb       	out	0x1b, r25	; 27
LCD_PORT |=((l ) & 0xf0);
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	28 2f       	mov	r18, r24
 1fc:	20 7f       	andi	r18, 0xF0	; 240
 1fe:	92 2b       	or	r25, r18
 200:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
 202:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
 204:	da 9a       	sbi	0x1b, 2	; 27
 206:	e3 ef       	ldi	r30, 0xF3	; 243
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcdData+0x1e>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcdData+0x24>
 210:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 212:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
 214:	9b b3       	in	r25, 0x1b	; 27
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	9b bb       	out	0x1b, r25	; 27
LCD_PORT  |= ((l<<4) &  0xf0);
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	f0 e1       	ldi	r31, 0x10	; 16
 21e:	8f 9f       	mul	r24, r31
 220:	c0 01       	movw	r24, r0
 222:	11 24       	eor	r1, r1
 224:	82 2b       	or	r24, r18
 226:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 228:	da 9a       	sbi	0x1b, 2	; 27
 22a:	83 ef       	ldi	r24, 0xF3	; 243
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcdData+0x42>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcdData+0x48>
 234:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 236:	da 98       	cbi	0x1b, 2	; 27
 238:	08 95       	ret

0000023a <lcdInit>:

}

void lcdInit(void)
{
LCD_PORT &=~RS;
 23a:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
 23c:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
 23e:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT |= 0x30;
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	80 63       	ori	r24, 0x30	; 48
 244:	8b bb       	out	0x1b, r24	; 27
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	97 e2       	ldi	r25, 0x27	; 39
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcdInit+0x10>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcdInit+0x16>
 250:	00 00       	nop
_delay_ms(40);
LCD_PORT  |=EN;
 252:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 254:	da 98       	cbi	0x1b, 2	; 27
 256:	81 ee       	ldi	r24, 0xE1	; 225
 258:	94 e0       	ldi	r25, 0x04	; 4
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcdInit+0x20>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcdInit+0x26>
 260:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
 262:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 264:	da 98       	cbi	0x1b, 2	; 27
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcdInit+0x30>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcdInit+0x36>
 270:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
 272:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 274:	da 98       	cbi	0x1b, 2	; 27
 276:	83 ef       	ldi	r24, 0xF3	; 243
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcdInit+0x40>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcdInit+0x46>
 280:	00 00       	nop
_delay_ms(2);

LCD_PORT &= 0x20;
 282:	8b b3       	in	r24, 0x1b	; 27
 284:	80 72       	andi	r24, 0x20	; 32
 286:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 288:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 28a:	da 98       	cbi	0x1b, 2	; 27
lcdcmd(0x28);   //set data length 4 bit 2 line
 28c:	88 e2       	ldi	r24, 0x28	; 40
 28e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcdcmd>
 292:	83 ed       	ldi	r24, 0xD3	; 211
 294:	90 e3       	ldi	r25, 0x30	; 48
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcdInit+0x5c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <lcdInit+0x62>
 29c:	00 00       	nop
_delay_ms(50);
lcdcmd(0x0E);   // set display on cursor on blink on
 29e:	8e e0       	ldi	r24, 0x0E	; 14
 2a0:	0e 94 cf 00 	call	0x19e	; 0x19e <lcdcmd>
 2a4:	83 ed       	ldi	r24, 0xD3	; 211
 2a6:	90 e3       	ldi	r25, 0x30	; 48
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcdInit+0x6e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcdInit+0x74>
 2ae:	00 00       	nop
_delay_ms(50);
lcdcmd(0x01); // clear lcd
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 cf 00 	call	0x19e	; 0x19e <lcdcmd>
 2b6:	83 ed       	ldi	r24, 0xD3	; 211
 2b8:	90 e3       	ldi	r25, 0x30	; 48
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcdInit+0x80>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcdInit+0x86>
 2c0:	00 00       	nop
_delay_ms(50);
lcdcmd(0x06);  // cursor shift direction
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	0e 94 cf 00 	call	0x19e	; 0x19e <lcdcmd>
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <lcdInit+0x92>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <lcdInit+0x98>
 2d2:	00 00       	nop
_delay_ms(50);
lcdcmd(0x80);  //set ram address
 2d4:	80 e8       	ldi	r24, 0x80	; 128
 2d6:	0e 94 cf 00 	call	0x19e	; 0x19e <lcdcmd>
 2da:	83 ed       	ldi	r24, 0xD3	; 211
 2dc:	90 e3       	ldi	r25, 0x30	; 48
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcdInit+0xa4>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <lcdInit+0xaa>
 2e4:	00 00       	nop
 2e6:	08 95       	ret

000002e8 <prints>:
}



void prints(const char *s)
  {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	ec 01       	movw	r28, r24

    while (*s)
 2ee:	89 91       	ld	r24, Y+
 2f0:	88 23       	and	r24, r24
 2f2:	19 f0       	breq	.+6      	; 0x2fa <prints+0x12>
      {
	 lcdData(*s);
 2f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdData>
 2f8:	fa cf       	rjmp	.-12     	; 0x2ee <prints+0x6>
	 s++;
      }
  }
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
 if(x<40)
 300:	88 32       	cpi	r24, 0x28	; 40
 302:	28 f4       	brcc	.+10     	; 0x30e <gotoXy+0xe>
 {
  if(y) x |= 0x40;
 304:	61 11       	cpse	r22, r1
 306:	80 64       	ori	r24, 0x40	; 64
  x |=0x80;
  lcdcmd(x);
 308:	80 68       	ori	r24, 0x80	; 128
 30a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <lcdcmd>
 30e:	08 95       	ret

00000310 <integerToLcd>:
  }

}
void integerToLcd(int integer )
{
 310:	ef 92       	push	r14
 312:	ff 92       	push	r15
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	7c 01       	movw	r14, r24

unsigned char thousands,hundreds,tens,ones;
thousands = integer / 1000;
 324:	68 ee       	ldi	r22, 0xE8	; 232
 326:	73 e0       	ldi	r23, 0x03	; 3
 328:	0e 94 c4 02 	call	0x588	; 0x588 <__divmodhi4>

    lcdData(thousands + 0x30);
 32c:	80 e3       	ldi	r24, 0x30	; 48
 32e:	86 0f       	add	r24, r22
 330:	69 83       	std	Y+1, r22	; 0x01
 332:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdData>

	 hundreds = ((integer - thousands*1000)-1) / 100;
 336:	88 e1       	ldi	r24, 0x18	; 24
 338:	9c ef       	ldi	r25, 0xFC	; 252
 33a:	69 81       	ldd	r22, Y+1	; 0x01
 33c:	68 9f       	mul	r22, r24
 33e:	90 01       	movw	r18, r0
 340:	69 9f       	mul	r22, r25
 342:	30 0d       	add	r19, r0
 344:	11 24       	eor	r1, r1
 346:	2e 0d       	add	r18, r14
 348:	3f 1d       	adc	r19, r15
 34a:	c9 01       	movw	r24, r18
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	04 e6       	ldi	r16, 0x64	; 100
 350:	10 e0       	ldi	r17, 0x00	; 0
 352:	b8 01       	movw	r22, r16
 354:	0e 94 c4 02 	call	0x588	; 0x588 <__divmodhi4>

	lcdData( hundreds + 0x30);
 358:	80 e3       	ldi	r24, 0x30	; 48
 35a:	86 0f       	add	r24, r22
 35c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdData>
tens=(integer%100)/10;
 360:	c7 01       	movw	r24, r14
 362:	b8 01       	movw	r22, r16
 364:	0e 94 c4 02 	call	0x588	; 0x588 <__divmodhi4>
 368:	0a e0       	ldi	r16, 0x0A	; 10
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	b8 01       	movw	r22, r16
 36e:	0e 94 c4 02 	call	0x588	; 0x588 <__divmodhi4>

	lcdData( tens + 0x30);
 372:	80 e3       	ldi	r24, 0x30	; 48
 374:	86 0f       	add	r24, r22
 376:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdData>
	ones=integer%10;
 37a:	c7 01       	movw	r24, r14
 37c:	b8 01       	movw	r22, r16
 37e:	0e 94 c4 02 	call	0x588	; 0x588 <__divmodhi4>

	lcdData( ones + 0x30);
 382:	80 5d       	subi	r24, 0xD0	; 208
}
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
tens=(integer%100)/10;

	lcdData( tens + 0x30);
	ones=integer%10;

	lcdData( ones + 0x30);
 392:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <lcdData>

00000396 <keypad>:
#include "keypad.h"

char keypad(struct Key *klaw) 
 {
 396:	fc 01       	movw	r30, r24
	klaw->result=0;
 398:	10 82       	st	Z, r1
	KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	87 bb       	out	0x17, r24	; 23
	KB_PORT=0b00001111;
 39e:	9f e0       	ldi	r25, 0x0F	; 15
 3a0:	98 bb       	out	0x18, r25	; 24
 3a2:	a7 ea       	ldi	r26, 0xA7	; 167
 3a4:	b1 e6       	ldi	r27, 0x61	; 97
 3a6:	11 97       	sbiw	r26, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <keypad+0x10>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <keypad+0x16>
 3ac:	00 00       	nop
	_delay_ms(100);
	klaw->result = KB_PIN;
 3ae:	26 b3       	in	r18, 0x16	; 22
 3b0:	20 83       	st	Z, r18

	//odczyt wierszy
	KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
 3b2:	97 bb       	out	0x17, r25	; 23
	KB_PORT=0b11110000;
 3b4:	88 bb       	out	0x18, r24	; 24
 3b6:	87 ea       	ldi	r24, 0xA7	; 167
 3b8:	91 e6       	ldi	r25, 0x61	; 97
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <keypad+0x24>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <keypad+0x2a>
 3c0:	00 00       	nop
	_delay_ms(100);
	klaw->result |= KB_PIN; 
 3c2:	86 b3       	in	r24, 0x16	; 22
 3c4:	90 81       	ld	r25, Z
 3c6:	89 2b       	or	r24, r25
 3c8:	80 83       	st	Z, r24

	return klaw->result; //ostatnio wcisniety
}
 3ca:	08 95       	ret

000003cc <keypad_proc>:

void keypad_proc(struct Key *klaw)
{
 3cc:	fc 01       	movw	r30, r24

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
 3ce:	80 81       	ld	r24, Z
 3d0:	87 3d       	cpi	r24, 0xD7	; 215
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <keypad_proc+0xa>
 3d4:	8a c0       	rjmp	.+276    	; 0x4ea <__stack+0x8b>
 3d6:	f8 f4       	brcc	.+62     	; 0x416 <keypad_proc+0x4a>
 3d8:	87 3b       	cpi	r24, 0xB7	; 183
 3da:	09 f4       	brne	.+2      	; 0x3de <keypad_proc+0x12>
 3dc:	4f c0       	rjmp	.+158    	; 0x47c <__stack+0x1d>
 3de:	60 f4       	brcc	.+24     	; 0x3f8 <keypad_proc+0x2c>
 3e0:	8b 37       	cpi	r24, 0x7B	; 123
 3e2:	e1 f1       	breq	.+120    	; 0x45c <keypad_proc+0x90>
 3e4:	8d 37       	cpi	r24, 0x7D	; 125
 3e6:	b9 f1       	breq	.+110    	; 0x456 <keypad_proc+0x8a>
 3e8:	87 37       	cpi	r24, 0x77	; 119
 3ea:	09 f0       	breq	.+2      	; 0x3ee <keypad_proc+0x22>
 3ec:	85 c0       	rjmp	.+266    	; 0x4f8 <__stack+0x99>
 3ee:	df 01       	movw	r26, r30
 3f0:	11 96       	adiw	r26, 0x01	; 1
 3f2:	cf 01       	movw	r24, r30
 3f4:	41 96       	adiw	r24, 0x11	; 17
 3f6:	4e c0       	rjmp	.+156    	; 0x494 <__stack+0x35>
 3f8:	8d 3b       	cpi	r24, 0xBD	; 189
 3fa:	09 f4       	brne	.+2      	; 0x3fe <keypad_proc+0x32>
 3fc:	70 c0       	rjmp	.+224    	; 0x4de <__stack+0x7f>
 3fe:	8e 3b       	cpi	r24, 0xBE	; 190
 400:	09 f4       	brne	.+2      	; 0x404 <keypad_proc+0x38>
 402:	5b c0       	rjmp	.+182    	; 0x4ba <__stack+0x5b>
 404:	8b 3b       	cpi	r24, 0xBB	; 187
 406:	09 f0       	breq	.+2      	; 0x40a <keypad_proc+0x3e>
 408:	77 c0       	rjmp	.+238    	; 0x4f8 <__stack+0x99>
		case 0b11101101     : klaw->buf[klaw->i]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i]='9'; break; //9
 40a:	a1 89       	ldd	r26, Z+17	; 0x11
 40c:	b2 89       	ldd	r27, Z+18	; 0x12
 40e:	ae 0f       	add	r26, r30
 410:	bf 1f       	adc	r27, r31
 412:	89 e3       	ldi	r24, 0x39	; 57
 414:	6f c0       	rjmp	.+222    	; 0x4f4 <__stack+0x95>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
 416:	87 3e       	cpi	r24, 0xE7	; 231
 418:	29 f1       	breq	.+74     	; 0x464 <__stack+0x5>
 41a:	78 f4       	brcc	.+30     	; 0x43a <keypad_proc+0x6e>
 41c:	8d 3d       	cpi	r24, 0xDD	; 221
 41e:	09 f4       	brne	.+2      	; 0x422 <keypad_proc+0x56>
 420:	58 c0       	rjmp	.+176    	; 0x4d2 <__stack+0x73>
 422:	8e 3d       	cpi	r24, 0xDE	; 222
 424:	09 f4       	brne	.+2      	; 0x428 <keypad_proc+0x5c>
 426:	43 c0       	rjmp	.+134    	; 0x4ae <__stack+0x4f>
 428:	8b 3d       	cpi	r24, 0xDB	; 219
 42a:	09 f0       	breq	.+2      	; 0x42e <keypad_proc+0x62>
 42c:	65 c0       	rjmp	.+202    	; 0x4f8 <__stack+0x99>
		case 0b10111110     : klaw->buf[klaw->i]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i]='8'; break; //8
 42e:	a1 89       	ldd	r26, Z+17	; 0x11
 430:	b2 89       	ldd	r27, Z+18	; 0x12
 432:	ae 0f       	add	r26, r30
 434:	bf 1f       	adc	r27, r31
 436:	88 e3       	ldi	r24, 0x38	; 56
 438:	5d c0       	rjmp	.+186    	; 0x4f4 <__stack+0x95>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
 43a:	8d 3e       	cpi	r24, 0xED	; 237
 43c:	09 f4       	brne	.+2      	; 0x440 <keypad_proc+0x74>
 43e:	43 c0       	rjmp	.+134    	; 0x4c6 <__stack+0x67>
 440:	8e 3e       	cpi	r24, 0xEE	; 238
 442:	79 f1       	breq	.+94     	; 0x4a2 <__stack+0x43>
 444:	8b 3e       	cpi	r24, 0xEB	; 235
 446:	09 f0       	breq	.+2      	; 0x44a <keypad_proc+0x7e>
 448:	57 c0       	rjmp	.+174    	; 0x4f8 <__stack+0x99>
		case 0b11011110     : klaw->buf[klaw->i]='2'; break; //2
		case 0b10111110     : klaw->buf[klaw->i]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i]='7'; break; //7
 44a:	a1 89       	ldd	r26, Z+17	; 0x11
 44c:	b2 89       	ldd	r27, Z+18	; 0x12
 44e:	ae 0f       	add	r26, r30
 450:	bf 1f       	adc	r27, r31
 452:	87 e3       	ldi	r24, 0x37	; 55
 454:	4f c0       	rjmp	.+158    	; 0x4f4 <__stack+0x95>
	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
	{
		//klawisze funkcyjne
		
		//case 0b01111110     : ; break; //A - potwierdzenie (accept)
		case 0b01111101     : klaw->flags |= KB_NEW; break; //B - wprowadzanie nowego obiektu
 456:	83 89       	ldd	r24, Z+19	; 0x13
 458:	80 64       	ori	r24, 0x40	; 64
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__stack+0x1>
		case 0b01111011     : klaw->flags |= KB_CAL ; break; //C - kalibracja (calibration)
 45c:	83 89       	ldd	r24, Z+19	; 0x13
 45e:	80 62       	ori	r24, 0x20	; 32
 460:	83 8b       	std	Z+19, r24	; 0x13
 462:	4a c0       	rjmp	.+148    	; 0x4f8 <__stack+0x99>

		case 0b11100111     : { //* H
			if(!(klaw->flags & KB_H))
 464:	83 89       	ldd	r24, Z+19	; 0x13
 466:	83 fd       	sbrc	r24, 3
 468:	07 c0       	rjmp	.+14     	; 0x478 <__stack+0x19>
				klaw->buf[klaw->i]='H';
 46a:	a1 89       	ldd	r26, Z+17	; 0x11
 46c:	b2 89       	ldd	r27, Z+18	; 0x12
 46e:	ae 0f       	add	r26, r30
 470:	bf 1f       	adc	r27, r31
 472:	98 e4       	ldi	r25, 0x48	; 72
 474:	11 96       	adiw	r26, 0x01	; 1
 476:	9c 93       	st	X, r25
			klaw->flags |= KB_H;
 478:	88 60       	ori	r24, 0x08	; 8
 47a:	f2 cf       	rjmp	.-28     	; 0x460 <__stack+0x1>

		} break; 
		case 0b10110111     :{ //# M
			if(!(klaw->flags & KB_M))
 47c:	83 89       	ldd	r24, Z+19	; 0x13
 47e:	82 fd       	sbrc	r24, 2
 480:	07 c0       	rjmp	.+14     	; 0x490 <__stack+0x31>
				klaw->buf[klaw->i]='M';
 482:	a1 89       	ldd	r26, Z+17	; 0x11
 484:	b2 89       	ldd	r27, Z+18	; 0x12
 486:	ae 0f       	add	r26, r30
 488:	bf 1f       	adc	r27, r31
 48a:	9d e4       	ldi	r25, 0x4D	; 77
 48c:	11 96       	adiw	r26, 0x01	; 1
 48e:	9c 93       	st	X, r25
			klaw->flags |= KB_M;
 490:	84 60       	ori	r24, 0x04	; 4
 492:	e6 cf       	rjmp	.-52     	; 0x460 <__stack+0x1>
	
		}break; 

		case 0b01110111     : { //D - czyszczenie
			for(int i=0;i<16;i++) //czyszczenie bufora
				klaw->buf[i]='\0'; 
 494:	1d 92       	st	X+, r1
			klaw->flags |= KB_M;
	
		}break; 

		case 0b01110111     : { //D - czyszczenie
			for(int i=0;i<16;i++) //czyszczenie bufora
 496:	a8 17       	cp	r26, r24
 498:	b9 07       	cpc	r27, r25
 49a:	e1 f7       	brne	.-8      	; 0x494 <__stack+0x35>
				klaw->buf[i]='\0'; 
			//czyszczenie flag
			klaw->flags &= ~KB_H;
			klaw->flags &= ~KB_M;
 49c:	83 89       	ldd	r24, Z+19	; 0x13
 49e:	83 7f       	andi	r24, 0xF3	; 243
 4a0:	df cf       	rjmp	.-66     	; 0x460 <__stack+0x1>
			klaw->i = 0;
		}; break; 
		
		
		//klawisz numeryczny     
		case 0b11101110     : klaw->buf[klaw->i]='1'; break; //1
 4a2:	a1 89       	ldd	r26, Z+17	; 0x11
 4a4:	b2 89       	ldd	r27, Z+18	; 0x12
 4a6:	ae 0f       	add	r26, r30
 4a8:	bf 1f       	adc	r27, r31
 4aa:	81 e3       	ldi	r24, 0x31	; 49
 4ac:	23 c0       	rjmp	.+70     	; 0x4f4 <__stack+0x95>
		case 0b11011110     : klaw->buf[klaw->i]='2'; break; //2
 4ae:	a1 89       	ldd	r26, Z+17	; 0x11
 4b0:	b2 89       	ldd	r27, Z+18	; 0x12
 4b2:	ae 0f       	add	r26, r30
 4b4:	bf 1f       	adc	r27, r31
 4b6:	82 e3       	ldi	r24, 0x32	; 50
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <__stack+0x95>
		case 0b10111110     : klaw->buf[klaw->i]='3'; break; //3
 4ba:	a1 89       	ldd	r26, Z+17	; 0x11
 4bc:	b2 89       	ldd	r27, Z+18	; 0x12
 4be:	ae 0f       	add	r26, r30
 4c0:	bf 1f       	adc	r27, r31
 4c2:	83 e3       	ldi	r24, 0x33	; 51
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <__stack+0x95>
		case 0b11101101     : klaw->buf[klaw->i]='4'; break; //4
 4c6:	a1 89       	ldd	r26, Z+17	; 0x11
 4c8:	b2 89       	ldd	r27, Z+18	; 0x12
 4ca:	ae 0f       	add	r26, r30
 4cc:	bf 1f       	adc	r27, r31
 4ce:	84 e3       	ldi	r24, 0x34	; 52
 4d0:	11 c0       	rjmp	.+34     	; 0x4f4 <__stack+0x95>
		case 0b11011101     : klaw->buf[klaw->i]='5'; break; //5
 4d2:	a1 89       	ldd	r26, Z+17	; 0x11
 4d4:	b2 89       	ldd	r27, Z+18	; 0x12
 4d6:	ae 0f       	add	r26, r30
 4d8:	bf 1f       	adc	r27, r31
 4da:	85 e3       	ldi	r24, 0x35	; 53
 4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <__stack+0x95>
		case 0b10111101     : klaw->buf[klaw->i]='6'; break; //6
 4de:	a1 89       	ldd	r26, Z+17	; 0x11
 4e0:	b2 89       	ldd	r27, Z+18	; 0x12
 4e2:	ae 0f       	add	r26, r30
 4e4:	bf 1f       	adc	r27, r31
 4e6:	86 e3       	ldi	r24, 0x36	; 54
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <__stack+0x95>
		case 0b11101011     : klaw->buf[klaw->i]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i]='9'; break; //9
		case 0b11010111     : klaw->buf[klaw->i]='0'; break; //0
 4ea:	a1 89       	ldd	r26, Z+17	; 0x11
 4ec:	b2 89       	ldd	r27, Z+18	; 0x12
 4ee:	ae 0f       	add	r26, r30
 4f0:	bf 1f       	adc	r27, r31
 4f2:	80 e3       	ldi	r24, 0x30	; 48
 4f4:	11 96       	adiw	r26, 0x01	; 1
 4f6:	8c 93       	st	X, r24
		//default:
	}
	klaw->i=0;
 4f8:	12 8a       	std	Z+18, r1	; 0x12
 4fa:	11 8a       	std	Z+17, r1	; 0x11
	klaw->result=0xFF;
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	80 83       	st	Z, r24
 500:	08 95       	ret

00000502 <direction>:
#include "encoder.h"

void direction(struct Enc *danyEncoder)
{
 502:	fc 01       	movw	r30, r24
if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
 504:	90 b3       	in	r25, 0x10	; 16
 506:	80 81       	ld	r24, Z
 508:	89 23       	and	r24, r25
 50a:	91 81       	ldd	r25, Z+1	; 0x01
 50c:	22 81       	ldd	r18, Z+2	; 0x02
 50e:	33 81       	ldd	r19, Z+3	; 0x03
 510:	88 23       	and	r24, r24
 512:	31 f0       	breq	.+12     	; 0x520 <direction+0x1e>
{
	if(EN_PIN & danyEncoder->maskB)
 514:	80 b3       	in	r24, 0x10	; 16
 516:	98 23       	and	r25, r24
 518:	31 f0       	breq	.+12     	; 0x526 <direction+0x24>
		danyEncoder->count-=1;
 51a:	21 50       	subi	r18, 0x01	; 1
 51c:	31 09       	sbc	r19, r1
 51e:	05 c0       	rjmp	.+10     	; 0x52a <direction+0x28>
	else
		danyEncoder->count+=1;
}
else									//A zmienilo stan na niski
{
	if(EN_PIN & danyEncoder->maskB)
 520:	80 b3       	in	r24, 0x10	; 16
 522:	98 23       	and	r25, r24
 524:	d1 f3       	breq	.-12     	; 0x51a <direction+0x18>
if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
{
	if(EN_PIN & danyEncoder->maskB)
		danyEncoder->count-=1;
	else
		danyEncoder->count+=1;
 526:	2f 5f       	subi	r18, 0xFF	; 255
 528:	3f 4f       	sbci	r19, 0xFF	; 255
 52a:	33 83       	std	Z+3, r19	; 0x03
 52c:	22 83       	std	Z+2, r18	; 0x02
 52e:	08 95       	ret

00000530 <main>:


int main(void)
{

	system_init();
 530:	0e 94 49 00 	call	0x92	; 0x92 <system_init>
	lcdInit();
 534:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdInit>
	prints("PUSHTO");
 538:	80 e6       	ldi	r24, 0x60	; 96
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <prints>
	while(1)
	{

		
		gotoXy(0,0);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 80 01 	call	0x300	; 0x300 <gotoXy>
		prints("E1=");
 548:	87 e6       	ldi	r24, 0x67	; 103
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <prints>
		integerToLcd(encoder1.count);
 550:	80 91 86 00 	lds	r24, 0x0086
 554:	90 91 87 00 	lds	r25, 0x0087
 558:	0e 94 88 01 	call	0x310	; 0x310 <integerToLcd>
		prints(" E2=");
 55c:	8b e6       	ldi	r24, 0x6B	; 107
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 74 01 	call	0x2e8	; 0x2e8 <prints>
		integerToLcd(encoder2.count);
 564:	80 91 8a 00 	lds	r24, 0x008A
 568:	90 91 8b 00 	lds	r25, 0x008B
 56c:	0e 94 88 01 	call	0x310	; 0x310 <integerToLcd>
		gotoXy(0,1);
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 80 01 	call	0x300	; 0x300 <gotoXy>

		integerToLcd(keypad(&keypad_A));
 578:	80 e7       	ldi	r24, 0x70	; 112
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 cb 01 	call	0x396	; 0x396 <keypad>
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 88 01 	call	0x310	; 0x310 <integerToLcd>
		prints(keypad_A.buf[0]);

		if(keypad_A.i > 14)
			keypad_A.i=0;
*/
	}
 586:	dc cf       	rjmp	.-72     	; 0x540 <main+0x10>

00000588 <__divmodhi4>:
 588:	97 fb       	bst	r25, 7
 58a:	07 2e       	mov	r0, r23
 58c:	16 f4       	brtc	.+4      	; 0x592 <__divmodhi4+0xa>
 58e:	00 94       	com	r0
 590:	07 d0       	rcall	.+14     	; 0x5a0 <__divmodhi4_neg1>
 592:	77 fd       	sbrc	r23, 7
 594:	09 d0       	rcall	.+18     	; 0x5a8 <__divmodhi4_neg2>
 596:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__udivmodhi4>
 59a:	07 fc       	sbrc	r0, 7
 59c:	05 d0       	rcall	.+10     	; 0x5a8 <__divmodhi4_neg2>
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__divmodhi4_exit>

000005a0 <__divmodhi4_neg1>:
 5a0:	90 95       	com	r25
 5a2:	81 95       	neg	r24
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__divmodhi4_neg2>:
 5a8:	70 95       	com	r23
 5aa:	61 95       	neg	r22
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255

000005ae <__divmodhi4_exit>:
 5ae:	08 95       	ret

000005b0 <__udivmodhi4>:
 5b0:	aa 1b       	sub	r26, r26
 5b2:	bb 1b       	sub	r27, r27
 5b4:	51 e1       	ldi	r21, 0x11	; 17
 5b6:	07 c0       	rjmp	.+14     	; 0x5c6 <__udivmodhi4_ep>

000005b8 <__udivmodhi4_loop>:
 5b8:	aa 1f       	adc	r26, r26
 5ba:	bb 1f       	adc	r27, r27
 5bc:	a6 17       	cp	r26, r22
 5be:	b7 07       	cpc	r27, r23
 5c0:	10 f0       	brcs	.+4      	; 0x5c6 <__udivmodhi4_ep>
 5c2:	a6 1b       	sub	r26, r22
 5c4:	b7 0b       	sbc	r27, r23

000005c6 <__udivmodhi4_ep>:
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	5a 95       	dec	r21
 5cc:	a9 f7       	brne	.-22     	; 0x5b8 <__udivmodhi4_loop>
 5ce:	80 95       	com	r24
 5d0:	90 95       	com	r25
 5d2:	bc 01       	movw	r22, r24
 5d4:	cd 01       	movw	r24, r26
 5d6:	08 95       	ret

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
