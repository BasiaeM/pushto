
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000051e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800070  00800070  000005c2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000005c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a49  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000453  00000000  00000000  000010e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000323  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000221  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_1>
   8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 02 	call	0x488	; 0x488 <main>
  8a:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <system_init>:


void system_init (void)
{	
	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
  92:	85 b7       	in	r24, 0x35	; 53
  94:	85 60       	ori	r24, 0x05	; 5
  96:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 6c       	ori	r24, 0xC0	; 192
  9c:	8b bf       	out	0x3b, r24	; 59
	
	/*inicjalizacja LCD*/
	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26

	/*inicjalizacja encoderow*/
	EN_DIR = 0b00000000; //Ustawienie pinow dla encoderow
  a2:	11 ba       	out	0x11, r1	; 17
	EN_PORT = 0b00001111; //pullupy dla encoderow
  a4:	8f e0       	ldi	r24, 0x0F	; 15
  a6:	82 bb       	out	0x12, r24	; 18

	encoder1.maskA=0b00000100;
  a8:	e0 e7       	ldi	r30, 0x70	; 112
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	80 83       	st	Z, r24
	encoder1.maskB=0b00000001;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	81 83       	std	Z+1, r24	; 0x01
	encoder1.count=0;
  b4:	13 82       	std	Z+3, r1	; 0x03
  b6:	12 82       	std	Z+2, r1	; 0x02
	encoder2.maskA=0b000001000;
  b8:	e4 e7       	ldi	r30, 0x74	; 116
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	80 83       	st	Z, r24
	encoder2.maskB=0b000000010;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	81 83       	std	Z+1, r24	; 0x01
	encoder2.count=0;
  c4:	13 82       	std	Z+3, r1	; 0x03
  c6:	12 82       	std	Z+2, r1	; 0x02
	
	//############# Timer1 16bit config ####################
	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	8f bd       	out	0x2f, r24	; 47
 	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Mode = CTC, Prescaler = 64
  cc:	8e b5       	in	r24, 0x2e	; 46
  ce:	8b 60       	ori	r24, 0x0B	; 11
  d0:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31250;   // timer compare value 1Hz - 31250 
  d2:	82 e1       	ldi	r24, 0x12	; 18
  d4:	9a e7       	ldi	r25, 0x7A	; 122
  d6:	9b bd       	out	0x2b, r25	; 43
  d8:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A); //enable compare reg A interrupt
  da:	89 b7       	in	r24, 0x39	; 57
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	89 bf       	out	0x39, r24	; 57
	
    	sei(); // enable global interrupts
  e0:	78 94       	sei
  e2:	08 95       	ret

000000e4 <__vector_6>:

}

ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1

}
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_1>:

ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	direction(&encoder1);
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 2d 02 	call	0x45a	; 0x45a <direction>
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_2>:

ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	direction(&encoder2);
 166:	84 e7       	ldi	r24, 0x74	; 116
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 2d 02 	call	0x45a	; 0x45a <direction>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <lcdcmd>:
#include <util/delay.h>

void lcdcmd(unsigned char Data)
{

LCD_PORT &= ~RS; //because sending command
 190:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
 192:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
 194:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT &= 0x0f;
 196:	9b b3       	in	r25, 0x1b	; 27
 198:	9f 70       	andi	r25, 0x0F	; 15
 19a:	9b bb       	out	0x1b, r25	; 27

LCD_PORT |= ((Data ) & 0xf0);
 19c:	9b b3       	in	r25, 0x1b	; 27
 19e:	28 2f       	mov	r18, r24
 1a0:	20 7f       	andi	r18, 0xF0	; 240
 1a2:	92 2b       	or	r25, r18
 1a4:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
 1a6:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
 1a8:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	e3 ef       	ldi	r30, 0xF3	; 243
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcdcmd+0x1e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcdcmd+0x24>
 1b4:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 1b6:	da 98       	cbi	0x1b, 2	; 27

LCD_PORT &= 0x0f;
 1b8:	9b b3       	in	r25, 0x1b	; 27
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	9b bb       	out	0x1b, r25	; 27

LCD_PORT  |= ((Data<<4) &  0xf0);
 1be:	2b b3       	in	r18, 0x1b	; 27
 1c0:	f0 e1       	ldi	r31, 0x10	; 16
 1c2:	8f 9f       	mul	r24, r31
 1c4:	c0 01       	movw	r24, r0
 1c6:	11 24       	eor	r1, r1
 1c8:	82 2b       	or	r24, r18
 1ca:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 1cc:	da 9a       	sbi	0x1b, 2	; 27
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcdcmd+0x42>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcdcmd+0x48>
 1d8:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 1da:	da 98       	cbi	0x1b, 2	; 27
 1dc:	08 95       	ret

000001de <lcdData>:


}
void lcdData(unsigned char l)
{
LCD_PORT |=RS;  //because sending data
 1de:	d8 9a       	sbi	0x1b, 0	; 27
LCD_PORT &=~RW;
 1e0:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  &=~EN;
 1e2:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
 1e4:	9b b3       	in	r25, 0x1b	; 27
 1e6:	9f 70       	andi	r25, 0x0F	; 15
 1e8:	9b bb       	out	0x1b, r25	; 27
LCD_PORT |=((l ) & 0xf0);
 1ea:	9b b3       	in	r25, 0x1b	; 27
 1ec:	28 2f       	mov	r18, r24
 1ee:	20 7f       	andi	r18, 0xF0	; 240
 1f0:	92 2b       	or	r25, r18
 1f2:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
 1f4:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
 1f6:	da 9a       	sbi	0x1b, 2	; 27
 1f8:	e3 ef       	ldi	r30, 0xF3	; 243
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcdData+0x1e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcdData+0x24>
 202:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 204:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
 206:	9b b3       	in	r25, 0x1b	; 27
 208:	9f 70       	andi	r25, 0x0F	; 15
 20a:	9b bb       	out	0x1b, r25	; 27
LCD_PORT  |= ((l<<4) &  0xf0);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	f0 e1       	ldi	r31, 0x10	; 16
 210:	8f 9f       	mul	r24, r31
 212:	c0 01       	movw	r24, r0
 214:	11 24       	eor	r1, r1
 216:	82 2b       	or	r24, r18
 218:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 21a:	da 9a       	sbi	0x1b, 2	; 27
 21c:	83 ef       	ldi	r24, 0xF3	; 243
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <lcdData+0x42>
 224:	00 c0       	rjmp	.+0      	; 0x226 <lcdData+0x48>
 226:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
 228:	da 98       	cbi	0x1b, 2	; 27
 22a:	08 95       	ret

0000022c <lcdInit>:

}

void lcdInit(void)
{
LCD_PORT &=~RS;
 22c:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
 22e:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
 230:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT |= 0x30;
 232:	8b b3       	in	r24, 0x1b	; 27
 234:	80 63       	ori	r24, 0x30	; 48
 236:	8b bb       	out	0x1b, r24	; 27
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	97 e2       	ldi	r25, 0x27	; 39
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcdInit+0x10>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcdInit+0x16>
 242:	00 00       	nop
_delay_ms(40);
LCD_PORT  |=EN;
 244:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 246:	da 98       	cbi	0x1b, 2	; 27
 248:	81 ee       	ldi	r24, 0xE1	; 225
 24a:	94 e0       	ldi	r25, 0x04	; 4
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcdInit+0x20>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcdInit+0x26>
 252:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
 254:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 256:	da 98       	cbi	0x1b, 2	; 27
 258:	81 ee       	ldi	r24, 0xE1	; 225
 25a:	94 e0       	ldi	r25, 0x04	; 4
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcdInit+0x30>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcdInit+0x36>
 262:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
 264:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 266:	da 98       	cbi	0x1b, 2	; 27
 268:	83 ef       	ldi	r24, 0xF3	; 243
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcdInit+0x40>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcdInit+0x46>
 272:	00 00       	nop
_delay_ms(2);

LCD_PORT &= 0x20;
 274:	8b b3       	in	r24, 0x1b	; 27
 276:	80 72       	andi	r24, 0x20	; 32
 278:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
 27a:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
 27c:	da 98       	cbi	0x1b, 2	; 27
lcdcmd(0x28);   //set data length 4 bit 2 line
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	0e 94 c8 00 	call	0x190	; 0x190 <lcdcmd>
 284:	83 ed       	ldi	r24, 0xD3	; 211
 286:	90 e3       	ldi	r25, 0x30	; 48
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcdInit+0x5c>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcdInit+0x62>
 28e:	00 00       	nop
_delay_ms(50);
lcdcmd(0x0E);   // set display on cursor on blink on
 290:	8e e0       	ldi	r24, 0x0E	; 14
 292:	0e 94 c8 00 	call	0x190	; 0x190 <lcdcmd>
 296:	83 ed       	ldi	r24, 0xD3	; 211
 298:	90 e3       	ldi	r25, 0x30	; 48
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcdInit+0x6e>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcdInit+0x74>
 2a0:	00 00       	nop
_delay_ms(50);
lcdcmd(0x01); // clear lcd
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 c8 00 	call	0x190	; 0x190 <lcdcmd>
 2a8:	83 ed       	ldi	r24, 0xD3	; 211
 2aa:	90 e3       	ldi	r25, 0x30	; 48
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcdInit+0x80>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <lcdInit+0x86>
 2b2:	00 00       	nop
_delay_ms(50);
lcdcmd(0x06);  // cursor shift direction
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	0e 94 c8 00 	call	0x190	; 0x190 <lcdcmd>
 2ba:	83 ed       	ldi	r24, 0xD3	; 211
 2bc:	90 e3       	ldi	r25, 0x30	; 48
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcdInit+0x92>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcdInit+0x98>
 2c4:	00 00       	nop
_delay_ms(50);
lcdcmd(0x80);  //set ram address
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	0e 94 c8 00 	call	0x190	; 0x190 <lcdcmd>
 2cc:	83 ed       	ldi	r24, 0xD3	; 211
 2ce:	90 e3       	ldi	r25, 0x30	; 48
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcdInit+0xa4>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcdInit+0xaa>
 2d6:	00 00       	nop
 2d8:	08 95       	ret

000002da <prints>:
}



void prints(const char *s)
  {
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24

    while (*s)
 2e0:	89 91       	ld	r24, Y+
 2e2:	88 23       	and	r24, r24
 2e4:	19 f0       	breq	.+6      	; 0x2ec <prints+0x12>
      {
	 lcdData(*s);
 2e6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdData>
 2ea:	fa cf       	rjmp	.-12     	; 0x2e0 <prints+0x6>
	 s++;
      }
  }
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
 if(x<40)
 2f2:	88 32       	cpi	r24, 0x28	; 40
 2f4:	28 f4       	brcc	.+10     	; 0x300 <gotoXy+0xe>
 {
  if(y) x |= 0x40;
 2f6:	61 11       	cpse	r22, r1
 2f8:	80 64       	ori	r24, 0x40	; 64
  x |=0x80;
  lcdcmd(x);
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	0c 94 c8 00 	jmp	0x190	; 0x190 <lcdcmd>
 300:	08 95       	ret

00000302 <integerToLcd>:
  }

}
void integerToLcd(int integer )
{
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	1f 92       	push	r1
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	7c 01       	movw	r14, r24

unsigned char thousands,hundreds,tens,ones;
thousands = integer / 1000;
 316:	68 ee       	ldi	r22, 0xE8	; 232
 318:	73 e0       	ldi	r23, 0x03	; 3
 31a:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>

    lcdData(thousands + 0x30);
 31e:	80 e3       	ldi	r24, 0x30	; 48
 320:	86 0f       	add	r24, r22
 322:	69 83       	std	Y+1, r22	; 0x01
 324:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdData>

	 hundreds = ((integer - thousands*1000)-1) / 100;
 328:	88 e1       	ldi	r24, 0x18	; 24
 32a:	9c ef       	ldi	r25, 0xFC	; 252
 32c:	69 81       	ldd	r22, Y+1	; 0x01
 32e:	68 9f       	mul	r22, r24
 330:	90 01       	movw	r18, r0
 332:	69 9f       	mul	r22, r25
 334:	30 0d       	add	r19, r0
 336:	11 24       	eor	r1, r1
 338:	2e 0d       	add	r18, r14
 33a:	3f 1d       	adc	r19, r15
 33c:	c9 01       	movw	r24, r18
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	04 e6       	ldi	r16, 0x64	; 100
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	b8 01       	movw	r22, r16
 346:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>

	lcdData( hundreds + 0x30);
 34a:	80 e3       	ldi	r24, 0x30	; 48
 34c:	86 0f       	add	r24, r22
 34e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdData>
tens=(integer%100)/10;
 352:	c7 01       	movw	r24, r14
 354:	b8 01       	movw	r22, r16
 356:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>
 35a:	0a e0       	ldi	r16, 0x0A	; 10
 35c:	10 e0       	ldi	r17, 0x00	; 0
 35e:	b8 01       	movw	r22, r16
 360:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>

	lcdData( tens + 0x30);
 364:	80 e3       	ldi	r24, 0x30	; 48
 366:	86 0f       	add	r24, r22
 368:	0e 94 ef 00 	call	0x1de	; 0x1de <lcdData>
	ones=integer%10;
 36c:	c7 01       	movw	r24, r14
 36e:	b8 01       	movw	r22, r16
 370:	0e 94 65 02 	call	0x4ca	; 0x4ca <__divmodhi4>

	lcdData( ones + 0x30);
 374:	80 5d       	subi	r24, 0xD0	; 208
}
 376:	0f 90       	pop	r0
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
tens=(integer%100)/10;

	lcdData( tens + 0x30);
	ones=integer%10;

	lcdData( ones + 0x30);
 384:	0c 94 ef 00 	jmp	0x1de	; 0x1de <lcdData>

00000388 <keypad>:

char i;
unsigned char result;
char keypad(void) 
 {
result=0;
 388:	10 92 79 00 	sts	0x0079, r1
KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
 38c:	80 ef       	ldi	r24, 0xF0	; 240
 38e:	84 bb       	out	0x14, r24	; 20
KB_PORT=0b00001111;
 390:	9f e0       	ldi	r25, 0x0F	; 15
 392:	95 bb       	out	0x15, r25	; 21
 394:	ef e4       	ldi	r30, 0x4F	; 79
 396:	f3 ec       	ldi	r31, 0xC3	; 195
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <keypad+0x10>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <keypad+0x16>
 39e:	00 00       	nop
_delay_ms(200);
result=KB_PIN;
 3a0:	23 b3       	in	r18, 0x13	; 19
 3a2:	20 93 79 00 	sts	0x0079, r18

//odczyt wierszy
KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
 3a6:	94 bb       	out	0x14, r25	; 20
KB_PORT=0b11110000;
 3a8:	85 bb       	out	0x15, r24	; 21
 3aa:	ef e4       	ldi	r30, 0x4F	; 79
 3ac:	f3 ec       	ldi	r31, 0xC3	; 195
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <keypad+0x26>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <keypad+0x2c>
 3b4:	00 00       	nop
_delay_ms(200);
result = result | KB_PIN; 
 3b6:	23 b3       	in	r18, 0x13	; 19
 3b8:	80 91 79 00 	lds	r24, 0x0079
 3bc:	82 2b       	or	r24, r18
 3be:	80 93 79 00 	sts	0x0079, r24

//uzyskanie kodu skanowania 
switch
 3c2:	8e 3b       	cpi	r24, 0xBE	; 190
 3c4:	89 f1       	breq	.+98     	; 0x428 <keypad+0xa0>
 3c6:	a0 f4       	brcc	.+40     	; 0x3f0 <keypad+0x68>
 3c8:	8e 37       	cpi	r24, 0x7E	; 126
 3ca:	81 f1       	breq	.+96     	; 0x42c <keypad+0xa4>
 3cc:	40 f4       	brcc	.+16     	; 0x3de <keypad+0x56>
 3ce:	8b 37       	cpi	r24, 0x7B	; 123
 3d0:	e9 f1       	breq	.+122    	; 0x44c <keypad+0xc4>
 3d2:	8d 37       	cpi	r24, 0x7D	; 125
 3d4:	99 f1       	breq	.+102    	; 0x43c <keypad+0xb4>
 3d6:	87 37       	cpi	r24, 0x77	; 119
 3d8:	d9 f5       	brne	.+118    	; 0x450 <keypad+0xc8>
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
case 0b01110111     : i= 16; break; //D
 3da:	80 e1       	ldi	r24, 0x10	; 16
 3dc:	22 c0       	rjmp	.+68     	; 0x422 <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 3de:	8b 3b       	cpi	r24, 0xBB	; 187
 3e0:	99 f1       	breq	.+102    	; 0x448 <keypad+0xc0>
 3e2:	8d 3b       	cpi	r24, 0xBD	; 189
 3e4:	49 f1       	breq	.+82     	; 0x438 <keypad+0xb0>
 3e6:	87 3b       	cpi	r24, 0xB7	; 183
 3e8:	99 f5       	brne	.+102    	; 0x450 <keypad+0xc8>
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
 3ea:	90 93 78 00 	sts	0x0078, r25
 3ee:	32 c0       	rjmp	.+100    	; 0x454 <keypad+0xcc>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 3f0:	8e 3d       	cpi	r24, 0xDE	; 222
 3f2:	b1 f0       	breq	.+44     	; 0x420 <keypad+0x98>
 3f4:	40 f4       	brcc	.+16     	; 0x406 <keypad+0x7e>
 3f6:	8b 3d       	cpi	r24, 0xDB	; 219
 3f8:	29 f1       	breq	.+74     	; 0x444 <keypad+0xbc>
 3fa:	8d 3d       	cpi	r24, 0xDD	; 221
 3fc:	d9 f0       	breq	.+54     	; 0x434 <keypad+0xac>
 3fe:	87 3d       	cpi	r24, 0xD7	; 215
 400:	39 f5       	brne	.+78     	; 0x450 <keypad+0xc8>
case 0b11101011     : i= 9; break; //7
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
 402:	8e e0       	ldi	r24, 0x0E	; 14
 404:	0e c0       	rjmp	.+28     	; 0x422 <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 406:	8b 3e       	cpi	r24, 0xEB	; 235
 408:	d9 f0       	breq	.+54     	; 0x440 <keypad+0xb8>
 40a:	20 f4       	brcc	.+8      	; 0x414 <keypad+0x8c>
 40c:	87 3e       	cpi	r24, 0xE7	; 231
 40e:	01 f5       	brne	.+64     	; 0x450 <keypad+0xc8>
case 0b01111101     : i= 8; break; //B
case 0b11101011     : i= 9; break; //7
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	07 c0       	rjmp	.+14     	; 0x422 <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 414:	8d 3e       	cpi	r24, 0xED	; 237
 416:	61 f0       	breq	.+24     	; 0x430 <keypad+0xa8>
 418:	8e 3e       	cpi	r24, 0xEE	; 238
 41a:	d1 f4       	brne	.+52     	; 0x450 <keypad+0xc8>
( result) {
case 0b11101110     : i= 1; break; //1
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	01 c0       	rjmp	.+2      	; 0x422 <keypad+0x9a>
case 0b11011110     : i= 2 ; break; //2
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	80 93 78 00 	sts	0x0078, r24
 426:	16 c0       	rjmp	.+44     	; 0x454 <keypad+0xcc>
case 0b10111110     : i= 3; break; //3
 428:	83 e0       	ldi	r24, 0x03	; 3
 42a:	fb cf       	rjmp	.-10     	; 0x422 <keypad+0x9a>
case 0b01111110     : i= 4; break; //A
 42c:	84 e0       	ldi	r24, 0x04	; 4
 42e:	f9 cf       	rjmp	.-14     	; 0x422 <keypad+0x9a>
case 0b11101101     : i= 5; break; //4
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	f7 cf       	rjmp	.-18     	; 0x422 <keypad+0x9a>
case 0b11011101     : i= 6; break; //5
 434:	86 e0       	ldi	r24, 0x06	; 6
 436:	f5 cf       	rjmp	.-22     	; 0x422 <keypad+0x9a>
case 0b10111101     : i= 7; break; //6
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	f3 cf       	rjmp	.-26     	; 0x422 <keypad+0x9a>
case 0b01111101     : i= 8; break; //B
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	f1 cf       	rjmp	.-30     	; 0x422 <keypad+0x9a>
case 0b11101011     : i= 9; break; //7
 440:	89 e0       	ldi	r24, 0x09	; 9
 442:	ef cf       	rjmp	.-34     	; 0x422 <keypad+0x9a>
case 0b11011011     : i= 10; break; //8
 444:	8a e0       	ldi	r24, 0x0A	; 10
 446:	ed cf       	rjmp	.-38     	; 0x422 <keypad+0x9a>
case 0b10111011     : i= 11; break; //9
 448:	8b e0       	ldi	r24, 0x0B	; 11
 44a:	eb cf       	rjmp	.-42     	; 0x422 <keypad+0x9a>
case 0b01111011     : i= 12; break; //C
 44c:	8c e0       	ldi	r24, 0x0C	; 12
 44e:	e9 cf       	rjmp	.-46     	; 0x422 <keypad+0x9a>
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
case 0b01110111     : i= 16; break; //D
default:              
     i= 0;
 450:	10 92 78 00 	sts	0x0078, r1
}
return i;
 454:	80 91 78 00 	lds	r24, 0x0078
 458:	08 95       	ret

0000045a <direction>:
#include "encoder.h"

void direction(struct Enc *danyEncoder)
{
 45a:	fc 01       	movw	r30, r24
if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
 45c:	90 b3       	in	r25, 0x10	; 16
 45e:	80 81       	ld	r24, Z
 460:	89 23       	and	r24, r25
 462:	91 81       	ldd	r25, Z+1	; 0x01
 464:	22 81       	ldd	r18, Z+2	; 0x02
 466:	33 81       	ldd	r19, Z+3	; 0x03
 468:	88 23       	and	r24, r24
 46a:	31 f0       	breq	.+12     	; 0x478 <__stack+0x19>
{
	if(EN_PIN & danyEncoder->maskB)
 46c:	80 b3       	in	r24, 0x10	; 16
 46e:	98 23       	and	r25, r24
 470:	31 f0       	breq	.+12     	; 0x47e <__stack+0x1f>
		danyEncoder->count-=1;
 472:	21 50       	subi	r18, 0x01	; 1
 474:	31 09       	sbc	r19, r1
 476:	05 c0       	rjmp	.+10     	; 0x482 <__stack+0x23>
	else
		danyEncoder->count+=1;
}
else									//A zmienilo stan na niski
{
	if(EN_PIN & danyEncoder->maskB)
 478:	80 b3       	in	r24, 0x10	; 16
 47a:	98 23       	and	r25, r24
 47c:	d1 f3       	breq	.-12     	; 0x472 <__stack+0x13>
if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
{
	if(EN_PIN & danyEncoder->maskB)
		danyEncoder->count-=1;
	else
		danyEncoder->count+=1;
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	33 83       	std	Z+3, r19	; 0x03
 484:	22 83       	std	Z+2, r18	; 0x02
 486:	08 95       	ret

00000488 <main>:

int main(void)
{

	//unsigned int temp;
	system_init();
 488:	0e 94 49 00 	call	0x92	; 0x92 <system_init>
	lcdInit();
 48c:	0e 94 16 01 	call	0x22c	; 0x22c <lcdInit>
	prints("PUSHTO");
 490:	80 e6       	ldi	r24, 0x60	; 96
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 6d 01 	call	0x2da	; 0x2da <prints>
	while(1)
	{
	gotoXy(0,0);
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <gotoXy>
	prints("E1=");
 4a0:	87 e6       	ldi	r24, 0x67	; 103
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 6d 01 	call	0x2da	; 0x2da <prints>
	integerToLcd(encoder1.count);
 4a8:	80 91 72 00 	lds	r24, 0x0072
 4ac:	90 91 73 00 	lds	r25, 0x0073
 4b0:	0e 94 81 01 	call	0x302	; 0x302 <integerToLcd>
	prints(" E2=");
 4b4:	8b e6       	ldi	r24, 0x6B	; 107
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 6d 01 	call	0x2da	; 0x2da <prints>
	integerToLcd(encoder2.count);
 4bc:	80 91 76 00 	lds	r24, 0x0076
 4c0:	90 91 77 00 	lds	r25, 0x0077
 4c4:	0e 94 81 01 	call	0x302	; 0x302 <integerToLcd>
	//gotoXy(0,1);
	//integerToLcd(keypad());

	}
 4c8:	e7 cf       	rjmp	.-50     	; 0x498 <main+0x10>

000004ca <__divmodhi4>:
 4ca:	97 fb       	bst	r25, 7
 4cc:	07 2e       	mov	r0, r23
 4ce:	16 f4       	brtc	.+4      	; 0x4d4 <__divmodhi4+0xa>
 4d0:	00 94       	com	r0
 4d2:	07 d0       	rcall	.+14     	; 0x4e2 <__divmodhi4_neg1>
 4d4:	77 fd       	sbrc	r23, 7
 4d6:	09 d0       	rcall	.+18     	; 0x4ea <__divmodhi4_neg2>
 4d8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__udivmodhi4>
 4dc:	07 fc       	sbrc	r0, 7
 4de:	05 d0       	rcall	.+10     	; 0x4ea <__divmodhi4_neg2>
 4e0:	3e f4       	brtc	.+14     	; 0x4f0 <__divmodhi4_exit>

000004e2 <__divmodhi4_neg1>:
 4e2:	90 95       	com	r25
 4e4:	81 95       	neg	r24
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__divmodhi4_neg2>:
 4ea:	70 95       	com	r23
 4ec:	61 95       	neg	r22
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255

000004f0 <__divmodhi4_exit>:
 4f0:	08 95       	ret

000004f2 <__udivmodhi4>:
 4f2:	aa 1b       	sub	r26, r26
 4f4:	bb 1b       	sub	r27, r27
 4f6:	51 e1       	ldi	r21, 0x11	; 17
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <__udivmodhi4_ep>

000004fa <__udivmodhi4_loop>:
 4fa:	aa 1f       	adc	r26, r26
 4fc:	bb 1f       	adc	r27, r27
 4fe:	a6 17       	cp	r26, r22
 500:	b7 07       	cpc	r27, r23
 502:	10 f0       	brcs	.+4      	; 0x508 <__udivmodhi4_ep>
 504:	a6 1b       	sub	r26, r22
 506:	b7 0b       	sbc	r27, r23

00000508 <__udivmodhi4_ep>:
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	5a 95       	dec	r21
 50e:	a9 f7       	brne	.-22     	; 0x4fa <__udivmodhi4_loop>
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	bc 01       	movw	r22, r24
 516:	cd 01       	movw	r24, r26
 518:	08 95       	ret

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
