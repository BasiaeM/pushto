
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00001eea  00001f7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800116  00800116  00002034  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001745  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00003871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a2  00000000  00000000  00003f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  000043f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034a  00000000  00000000  00004868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db7  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
       8:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_2>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_6>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <nowy_cel+0x238>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 00       	.word	0x003f	; ????

000000dc <__trampolines_end>:
      dc:	63 64       	ori	r22, 0x43	; 67
      de:	69 6e       	ori	r22, 0xE9	; 233
      e0:	6f 70       	andi	r22, 0x0F	; 15
      e2:	73 75       	andi	r23, 0x53	; 83
      e4:	78 58       	subi	r23, 0x88	; 136
      e6:	5b 00       	.word	0x005b	; ????

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e6       	ldi	r26, 0x60	; 96
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	ea ee       	ldi	r30, 0xEA	; 234
      fc:	fe e1       	ldi	r31, 0x1E	; 30
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a6 31       	cpi	r26, 0x16	; 22
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	a6 e1       	ldi	r26, 0x16	; 22
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a5 35       	cpi	r26, 0x55	; 85
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <main>
     11e:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <system_init>:
    

void system_init (void)
{	
	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
     126:	85 b7       	in	r24, 0x35	; 53
     128:	85 60       	ori	r24, 0x05	; 5
     12a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
     12c:	8b b7       	in	r24, 0x3b	; 59
     12e:	80 6c       	ori	r24, 0xC0	; 192
     130:	8b bf       	out	0x3b, r24	; 59
	
	/*inicjalizacja LCD*/
	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
     132:	8f ef       	ldi	r24, 0xFF	; 255
     134:	8a bb       	out	0x1a, r24	; 26

	/*inicjalizacja encoderow*/
	EN_DIR = 0b00000000; //Ustawienie pinow dla encoderow
     136:	11 ba       	out	0x11, r1	; 17
	EN_PORT = 0b00001111; //pullupy dla encoderow
     138:	9f e0       	ldi	r25, 0x0F	; 15
     13a:	92 bb       	out	0x12, r25	; 18

	encoder1.maskA=0b00000100;
     13c:	ab e2       	ldi	r26, 0x2B	; 43
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	94 e0       	ldi	r25, 0x04	; 4
     142:	9c 93       	st	X, r25
	encoder1.maskB=0b00000001;
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 93       	st	X, r25
     14a:	11 97       	sbiw	r26, 0x01	; 1
	encoder1.count=0; //----------------------------enkodery start 0 
     14c:	13 96       	adiw	r26, 0x03	; 3
     14e:	1c 92       	st	X, r1
     150:	1e 92       	st	-X, r1
     152:	12 97       	sbiw	r26, 0x02	; 2
	encoder2.maskA=0b000001000;
     154:	ed e4       	ldi	r30, 0x4D	; 77
     156:	f1 e0       	ldi	r31, 0x01	; 1
     158:	98 e0       	ldi	r25, 0x08	; 8
     15a:	90 83       	st	Z, r25
	encoder2.maskB=0b000000010;
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	91 83       	std	Z+1, r25	; 0x01
	encoder2.count=0;
     160:	13 82       	std	Z+3, r1	; 0x03
     162:	12 82       	std	Z+2, r1	; 0x02
	encoder1.range=EN1_RANGE;
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	61 ee       	ldi	r22, 0xE1	; 225
     16a:	73 e4       	ldi	r23, 0x43	; 67
     16c:	14 96       	adiw	r26, 0x04	; 4
     16e:	4d 93       	st	X+, r20
     170:	5d 93       	st	X+, r21
     172:	6d 93       	st	X+, r22
     174:	7c 93       	st	X, r23
     176:	17 97       	sbiw	r26, 0x07	; 7
	encoder2.range=EN2_RANGE;
     178:	44 83       	std	Z+4, r20	; 0x04
     17a:	55 83       	std	Z+5, r21	; 0x05
     17c:	66 83       	std	Z+6, r22	; 0x06
     17e:	77 83       	std	Z+7, r23	; 0x07

	//inicjalizacja klawiatury
	keypad_A.i=0; //zerowanie wskaznika buforu
     180:	e6 e1       	ldi	r30, 0x16	; 22
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	13 8a       	std	Z+19, r1	; 0x13
     186:	12 8a       	std	Z+18, r1	; 0x12
	keypad_A.flags='\0';
     188:	14 8a       	std	Z+20, r1	; 0x14
	keypad_A.last_result = 0xFF;
     18a:	81 83       	std	Z+1, r24	; 0x01

	telescope_A.update=0; //flaga aktualizacja nastaw
     18c:	10 92 38 01 	sts	0x0138, r1
     190:	10 92 37 01 	sts	0x0137, r1

	//konfiguracja timera TIMER1
	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
     194:	8f b5       	in	r24, 0x2f	; 47
     196:	8f bd       	out	0x2f, r24	; 47
 	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Tryb = CTC, Dzielnik = 64
     198:	8e b5       	in	r24, 0x2e	; 46
     19a:	8b 60       	ori	r24, 0x0B	; 11
     19c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31165;   // licznik porownawczy 1Hz - 31250, dla sekundy gwiazdowej -31165
     19e:	8d eb       	ldi	r24, 0xBD	; 189
     1a0:	99 e7       	ldi	r25, 0x79	; 121
     1a2:	9b bd       	out	0x2b, r25	; 43
     1a4:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=(1<<OCIE1A); //w≈ÇƒÖczenie przerwa≈Ñ na porownanie z rejestrem A
     1a6:	89 b7       	in	r24, 0x39	; 57
     1a8:	80 61       	ori	r24, 0x10	; 16
     1aa:	89 bf       	out	0x39, r24	; 57
	
    	sei(); //globalne w≈ÇƒÖczenie przerwa≈Ñ
     1ac:	78 94       	sei
     1ae:	08 95       	ret

000001b0 <__vector_6>:

}

ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
{
     1b0:	1f 92       	push	r1
     1b2:	0f 92       	push	r0
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	0f 92       	push	r0
     1b8:	11 24       	eor	r1, r1
     1ba:	2f 93       	push	r18
     1bc:	3f 93       	push	r19
     1be:	4f 93       	push	r20
     1c0:	5f 93       	push	r21
     1c2:	6f 93       	push	r22
     1c4:	7f 93       	push	r23
     1c6:	8f 93       	push	r24
     1c8:	9f 93       	push	r25
     1ca:	af 93       	push	r26
     1cc:	bf 93       	push	r27
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
	telescope_A.time+=0.000004835; //czas gwiazdowy w radianach
     1d6:	c3 e3       	ldi	r28, 0x33	; 51
     1d8:	d1 e0       	ldi	r29, 0x01	; 1
     1da:	25 e5       	ldi	r18, 0x55	; 85
     1dc:	3c e3       	ldi	r19, 0x3C	; 60
     1de:	42 ea       	ldi	r20, 0xA2	; 162
     1e0:	56 e3       	ldi	r21, 0x36	; 54
     1e2:	68 81       	ld	r22, Y
     1e4:	79 81       	ldd	r23, Y+1	; 0x01
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	9b 81       	ldd	r25, Y+3	; 0x03
     1ea:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     1ee:	68 83       	st	Y, r22
     1f0:	79 83       	std	Y+1, r23	; 0x01
     1f2:	8a 83       	std	Y+2, r24	; 0x02
     1f4:	9b 83       	std	Y+3, r25	; 0x03
	telescope_A.update++;
     1f6:	8c 81       	ldd	r24, Y+4	; 0x04
     1f8:	9d 81       	ldd	r25, Y+5	; 0x05
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	9d 83       	std	Y+5, r25	; 0x05
     1fe:	8c 83       	std	Y+4, r24	; 0x04
}
     200:	ff 91       	pop	r31
     202:	ef 91       	pop	r30
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	bf 91       	pop	r27
     20a:	af 91       	pop	r26
     20c:	9f 91       	pop	r25
     20e:	8f 91       	pop	r24
     210:	7f 91       	pop	r23
     212:	6f 91       	pop	r22
     214:	5f 91       	pop	r21
     216:	4f 91       	pop	r20
     218:	3f 91       	pop	r19
     21a:	2f 91       	pop	r18
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <__vector_1>:

ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
{
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	2f 93       	push	r18
     232:	3f 93       	push	r19
     234:	4f 93       	push	r20
     236:	5f 93       	push	r21
     238:	6f 93       	push	r22
     23a:	7f 93       	push	r23
     23c:	8f 93       	push	r24
     23e:	9f 93       	push	r25
     240:	af 93       	push	r26
     242:	bf 93       	push	r27
     244:	ef 93       	push	r30
     246:	ff 93       	push	r31
	direction(&encoder1);
     248:	8b e2       	ldi	r24, 0x2B	; 43
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <direction>
}
     250:	ff 91       	pop	r31
     252:	ef 91       	pop	r30
     254:	bf 91       	pop	r27
     256:	af 91       	pop	r26
     258:	9f 91       	pop	r25
     25a:	8f 91       	pop	r24
     25c:	7f 91       	pop	r23
     25e:	6f 91       	pop	r22
     260:	5f 91       	pop	r21
     262:	4f 91       	pop	r20
     264:	3f 91       	pop	r19
     266:	2f 91       	pop	r18
     268:	0f 90       	pop	r0
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	0f 90       	pop	r0
     26e:	1f 90       	pop	r1
     270:	18 95       	reti

00000272 <__vector_2>:

ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
{
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	2f 93       	push	r18
     27e:	3f 93       	push	r19
     280:	4f 93       	push	r20
     282:	5f 93       	push	r21
     284:	6f 93       	push	r22
     286:	7f 93       	push	r23
     288:	8f 93       	push	r24
     28a:	9f 93       	push	r25
     28c:	af 93       	push	r26
     28e:	bf 93       	push	r27
     290:	ef 93       	push	r30
     292:	ff 93       	push	r31
	direction(&encoder2);
     294:	8d e4       	ldi	r24, 0x4D	; 77
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 b7 07 	call	0xf6e	; 0xf6e <direction>
}
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	0f 90       	pop	r0
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	0f 90       	pop	r0
     2ba:	1f 90       	pop	r1
     2bc:	18 95       	reti

000002be <lcdcmd>:
#include <util/delay.h>

void lcdcmd(unsigned char Dane)
{

LCD_PORT &= ~RS; //wysy≈Çanie polecenia
     2be:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     2c0:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     2c2:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT &= 0x0f;
     2c4:	9b b3       	in	r25, 0x1b	; 27
     2c6:	9f 70       	andi	r25, 0x0F	; 15
     2c8:	9b bb       	out	0x1b, r25	; 27

LCD_PORT |= ((Dane ) & 0xf0);
     2ca:	9b b3       	in	r25, 0x1b	; 27
     2cc:	28 2f       	mov	r18, r24
     2ce:	20 7f       	andi	r18, 0xF0	; 240
     2d0:	92 2b       	or	r25, r18
     2d2:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     2d4:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     2d6:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	e3 ef       	ldi	r30, 0xF3	; 243
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <lcdcmd+0x1e>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcdcmd+0x24>
     2e2:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     2e4:	da 98       	cbi	0x1b, 2	; 27

LCD_PORT &= 0x0f;
     2e6:	9b b3       	in	r25, 0x1b	; 27
     2e8:	9f 70       	andi	r25, 0x0F	; 15
     2ea:	9b bb       	out	0x1b, r25	; 27

LCD_PORT  |= ((Dane<<4) &  0xf0);
     2ec:	2b b3       	in	r18, 0x1b	; 27
     2ee:	f0 e1       	ldi	r31, 0x10	; 16
     2f0:	8f 9f       	mul	r24, r31
     2f2:	c0 01       	movw	r24, r0
     2f4:	11 24       	eor	r1, r1
     2f6:	82 2b       	or	r24, r18
     2f8:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     2fa:	da 9a       	sbi	0x1b, 2	; 27
     2fc:	83 ef       	ldi	r24, 0xF3	; 243
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <lcdcmd+0x42>
     304:	00 c0       	rjmp	.+0      	; 0x306 <lcdcmd+0x48>
     306:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     308:	da 98       	cbi	0x1b, 2	; 27
     30a:	08 95       	ret

0000030c <lcdData>:


}
void lcdData(unsigned char l)
{
LCD_PORT |=RS;  //wysylanie danych
     30c:	d8 9a       	sbi	0x1b, 0	; 27
LCD_PORT &=~RW;
     30e:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  &=~EN;
     310:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     312:	9b b3       	in	r25, 0x1b	; 27
     314:	9f 70       	andi	r25, 0x0F	; 15
     316:	9b bb       	out	0x1b, r25	; 27
LCD_PORT |=((l ) & 0xf0);
     318:	9b b3       	in	r25, 0x1b	; 27
     31a:	28 2f       	mov	r18, r24
     31c:	20 7f       	andi	r18, 0xF0	; 240
     31e:	92 2b       	or	r25, r18
     320:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     322:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     324:	da 9a       	sbi	0x1b, 2	; 27
     326:	e3 ef       	ldi	r30, 0xF3	; 243
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <lcdData+0x1e>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <lcdData+0x24>
     330:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     332:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     334:	9b b3       	in	r25, 0x1b	; 27
     336:	9f 70       	andi	r25, 0x0F	; 15
     338:	9b bb       	out	0x1b, r25	; 27
LCD_PORT  |= ((l<<4) &  0xf0);
     33a:	2b b3       	in	r18, 0x1b	; 27
     33c:	f0 e1       	ldi	r31, 0x10	; 16
     33e:	8f 9f       	mul	r24, r31
     340:	c0 01       	movw	r24, r0
     342:	11 24       	eor	r1, r1
     344:	82 2b       	or	r24, r18
     346:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     348:	da 9a       	sbi	0x1b, 2	; 27
     34a:	83 ef       	ldi	r24, 0xF3	; 243
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <lcdData+0x42>
     352:	00 c0       	rjmp	.+0      	; 0x354 <lcdData+0x48>
     354:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     356:	da 98       	cbi	0x1b, 2	; 27
     358:	08 95       	ret

0000035a <lcdInit>:

}

void lcdInit(void)
{
LCD_PORT &=~RS;
     35a:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     35c:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     35e:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT |= 0x30;
     360:	8b b3       	in	r24, 0x1b	; 27
     362:	80 63       	ori	r24, 0x30	; 48
     364:	8b bb       	out	0x1b, r24	; 27
     366:	8f e0       	ldi	r24, 0x0F	; 15
     368:	97 e2       	ldi	r25, 0x27	; 39
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <lcdInit+0x10>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <lcdInit+0x16>
     370:	00 00       	nop
_delay_ms(40);
LCD_PORT  |=EN;
     372:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     374:	da 98       	cbi	0x1b, 2	; 27
     376:	81 ee       	ldi	r24, 0xE1	; 225
     378:	94 e0       	ldi	r25, 0x04	; 4
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <lcdInit+0x20>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <lcdInit+0x26>
     380:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     382:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     384:	da 98       	cbi	0x1b, 2	; 27
     386:	81 ee       	ldi	r24, 0xE1	; 225
     388:	94 e0       	ldi	r25, 0x04	; 4
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <lcdInit+0x30>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <lcdInit+0x36>
     390:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     392:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     394:	da 98       	cbi	0x1b, 2	; 27
     396:	83 ef       	ldi	r24, 0xF3	; 243
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <lcdInit+0x40>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <lcdInit+0x46>
     3a0:	00 00       	nop
_delay_ms(2);

LCD_PORT &= 0x20;
     3a2:	8b b3       	in	r24, 0x1b	; 27
     3a4:	80 72       	andi	r24, 0x20	; 32
     3a6:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     3a8:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     3aa:	da 98       	cbi	0x1b, 2	; 27
lcdcmd(0x28);   //set data length 4 bit 2 line
     3ac:	88 e2       	ldi	r24, 0x28	; 40
     3ae:	0e 94 5f 01 	call	0x2be	; 0x2be <lcdcmd>
     3b2:	83 ed       	ldi	r24, 0xD3	; 211
     3b4:	90 e3       	ldi	r25, 0x30	; 48
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <lcdInit+0x5c>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <lcdInit+0x62>
     3bc:	00 00       	nop
_delay_ms(50);
lcdcmd(0x0E);   // set display on cursor on blink on
     3be:	8e e0       	ldi	r24, 0x0E	; 14
     3c0:	0e 94 5f 01 	call	0x2be	; 0x2be <lcdcmd>
     3c4:	83 ed       	ldi	r24, 0xD3	; 211
     3c6:	90 e3       	ldi	r25, 0x30	; 48
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <lcdInit+0x6e>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <lcdInit+0x74>
     3ce:	00 00       	nop
_delay_ms(50);
lcdcmd(0x01); // clear lcd
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 5f 01 	call	0x2be	; 0x2be <lcdcmd>
     3d6:	83 ed       	ldi	r24, 0xD3	; 211
     3d8:	90 e3       	ldi	r25, 0x30	; 48
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <lcdInit+0x80>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <lcdInit+0x86>
     3e0:	00 00       	nop
_delay_ms(50);
lcdcmd(0x06);  // cursor shift direction
     3e2:	86 e0       	ldi	r24, 0x06	; 6
     3e4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcdcmd>
     3e8:	83 ed       	ldi	r24, 0xD3	; 211
     3ea:	90 e3       	ldi	r25, 0x30	; 48
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <lcdInit+0x92>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <lcdInit+0x98>
     3f2:	00 00       	nop
_delay_ms(50);
lcdcmd(0x80);  //set ram address
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	0e 94 5f 01 	call	0x2be	; 0x2be <lcdcmd>
     3fa:	83 ed       	ldi	r24, 0xD3	; 211
     3fc:	90 e3       	ldi	r25, 0x30	; 48
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <lcdInit+0xa4>
     402:	00 c0       	rjmp	.+0      	; 0x404 <lcdInit+0xaa>
     404:	00 00       	nop
     406:	08 95       	ret

00000408 <prints>:
}



void prints(const char *s)
  {
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	ec 01       	movw	r28, r24

    while (*s)
     40e:	89 91       	ld	r24, Y+
     410:	88 23       	and	r24, r24
     412:	19 f0       	breq	.+6      	; 0x41a <prints+0x12>
      {
	 lcdData(*s);
     414:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
     418:	fa cf       	rjmp	.-12     	; 0x40e <prints+0x6>
	 s++;
      }
  }
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
 if(x<40)
     420:	88 32       	cpi	r24, 0x28	; 40
     422:	28 f4       	brcc	.+10     	; 0x42e <gotoXy+0xe>
 {
  if(y) x |= 0x40;
     424:	61 11       	cpse	r22, r1
     426:	80 64       	ori	r24, 0x40	; 64
  x |=0x80;
  lcdcmd(x);
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <lcdcmd>
     42e:	08 95       	ret

00000430 <integerToLcd>:
  }

}
void integerToLcd(int integer )
{
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	7c 01       	movw	r14, r24

unsigned char thousands,hundreds,tens,ones;
if(integer >=0) //wyswietlanie dodatnich liczb 
     444:	97 fd       	sbrc	r25, 7
     446:	32 c0       	rjmp	.+100    	; 0x4ac <__stack+0x4d>
{
  //wyswietlenie znaku
  lcdData(0x2B); //+
     448:	8b e2       	ldi	r24, 0x2B	; 43
     44a:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
  //wyswietlenie liczby
  thousands = integer / 1000;
     44e:	c7 01       	movw	r24, r14
     450:	68 ee       	ldi	r22, 0xE8	; 232
     452:	73 e0       	ldi	r23, 0x03	; 3
     454:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>
     458:	8b 01       	movw	r16, r22

    lcdData(thousands + 0x30);
     45a:	80 e3       	ldi	r24, 0x30	; 48
     45c:	86 0f       	add	r24, r22
     45e:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>

   hundreds = ((integer - thousands*1000)-1) / 100;
     462:	28 e1       	ldi	r18, 0x18	; 24
     464:	3c ef       	ldi	r19, 0xFC	; 252
     466:	02 9f       	mul	r16, r18
     468:	c0 01       	movw	r24, r0
     46a:	03 9f       	mul	r16, r19
     46c:	90 0d       	add	r25, r0
     46e:	12 9f       	mul	r17, r18
     470:	90 0d       	add	r25, r0
     472:	11 24       	eor	r1, r1
     474:	8e 0d       	add	r24, r14
     476:	9f 1d       	adc	r25, r15
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	04 e6       	ldi	r16, 0x64	; 100
     47c:	10 e0       	ldi	r17, 0x00	; 0
     47e:	b8 01       	movw	r22, r16
     480:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

  lcdData( hundreds + 0x30);
     484:	80 e3       	ldi	r24, 0x30	; 48
     486:	86 0f       	add	r24, r22
     488:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
tens=(integer%100)/10;
     48c:	c7 01       	movw	r24, r14
     48e:	b8 01       	movw	r22, r16
     490:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>
     494:	0a e0       	ldi	r16, 0x0A	; 10
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	b8 01       	movw	r22, r16
     49a:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

  lcdData( tens + 0x30);
     49e:	80 e3       	ldi	r24, 0x30	; 48
     4a0:	86 0f       	add	r24, r22
     4a2:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
  ones=integer%10;
     4a6:	c7 01       	movw	r24, r14
     4a8:	b8 01       	movw	r22, r16
     4aa:	37 c0       	rjmp	.+110    	; 0x51a <__stack+0xbb>
}

else //wyswietlanie ujemnych liczb
{
  //wyswietlenie znaku
  lcdData(0x2D); //-
     4ac:	8d e2       	ldi	r24, 0x2D	; 45
     4ae:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
  //wyswietlenie liczby
  integer = integer*(-1);
     4b2:	00 27       	eor	r16, r16
     4b4:	11 27       	eor	r17, r17
     4b6:	0e 19       	sub	r16, r14
     4b8:	1f 09       	sbc	r17, r15
  thousands = integer / 1000;
     4ba:	c8 01       	movw	r24, r16
     4bc:	68 ee       	ldi	r22, 0xE8	; 232
     4be:	73 e0       	ldi	r23, 0x03	; 3
     4c0:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

      lcdData(thousands + 0x30);
     4c4:	80 e3       	ldi	r24, 0x30	; 48
     4c6:	86 0f       	add	r24, r22
     4c8:	69 83       	std	Y+1, r22	; 0x01
     4ca:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>

     hundreds = ((integer - thousands*1000)-1) / 100;
     4ce:	88 e1       	ldi	r24, 0x18	; 24
     4d0:	9c ef       	ldi	r25, 0xFC	; 252
     4d2:	69 81       	ldd	r22, Y+1	; 0x01
     4d4:	68 9f       	mul	r22, r24
     4d6:	90 01       	movw	r18, r0
     4d8:	69 9f       	mul	r22, r25
     4da:	30 0d       	add	r19, r0
     4dc:	11 24       	eor	r1, r1
     4de:	2e 19       	sub	r18, r14
     4e0:	3f 09       	sbc	r19, r15
     4e2:	c9 01       	movw	r24, r18
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	24 e6       	ldi	r18, 0x64	; 100
     4e8:	e2 2e       	mov	r14, r18
     4ea:	f1 2c       	mov	r15, r1
     4ec:	b7 01       	movw	r22, r14
     4ee:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

    lcdData( hundreds + 0x30);
     4f2:	80 e3       	ldi	r24, 0x30	; 48
     4f4:	86 0f       	add	r24, r22
     4f6:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
  tens=(integer%100)/10;
     4fa:	c8 01       	movw	r24, r16
     4fc:	b7 01       	movw	r22, r14
     4fe:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>
     502:	3a e0       	ldi	r19, 0x0A	; 10
     504:	e3 2e       	mov	r14, r19
     506:	f1 2c       	mov	r15, r1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

    lcdData( tens + 0x30);
     50e:	80 e3       	ldi	r24, 0x30	; 48
     510:	86 0f       	add	r24, r22
     512:	0e 94 86 01 	call	0x30c	; 0x30c <lcdData>
    ones=integer%10;
     516:	c8 01       	movw	r24, r16
     518:	b7 01       	movw	r22, r14
     51a:	0e 94 df 0b 	call	0x17be	; 0x17be <__divmodhi4>

    lcdData( ones + 0x30);
     51e:	80 5d       	subi	r24, 0xD0	; 208
}

}
     520:	0f 90       	pop	r0
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
  tens=(integer%100)/10;

    lcdData( tens + 0x30);
    ones=integer%10;

    lcdData( ones + 0x30);
     52e:	0c 94 86 01 	jmp	0x30c	; 0x30c <lcdData>

00000532 <lcd_clr>:

}

void lcd_clr(void)
{
  lcdcmd(0x01); //czyszczenie wyswietlacza
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0c 94 5f 01 	jmp	0x2be	; 0x2be <lcdcmd>

00000538 <keypad>:
#include "keypad.h"


char keypad(struct Key *klaw) 
 {
     538:	fc 01       	movw	r30, r24
	klaw->result=0;
     53a:	10 82       	st	Z, r1
	KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
     53c:	80 ef       	ldi	r24, 0xF0	; 240
     53e:	84 bb       	out	0x14, r24	; 20
	KB_PORT=0b00001111;
     540:	9f e0       	ldi	r25, 0x0F	; 15
     542:	95 bb       	out	0x15, r25	; 21
     544:	a7 e8       	ldi	r26, 0x87	; 135
     546:	b3 e1       	ldi	r27, 0x13	; 19
     548:	11 97       	sbiw	r26, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <keypad+0x10>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <keypad+0x16>
     54e:	00 00       	nop
	_delay_ms(20);
	klaw->result = KB_PIN;
     550:	23 b3       	in	r18, 0x13	; 19
     552:	20 83       	st	Z, r18

	//odczyt wierszy
	KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
     554:	94 bb       	out	0x14, r25	; 20
	KB_PORT=0b11110000;
     556:	85 bb       	out	0x15, r24	; 21
     558:	87 e8       	ldi	r24, 0x87	; 135
     55a:	93 e1       	ldi	r25, 0x13	; 19
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <keypad+0x24>
     560:	00 c0       	rjmp	.+0      	; 0x562 <keypad+0x2a>
     562:	00 00       	nop
	_delay_ms(20);
	klaw->result |= KB_PIN; 
     564:	83 b3       	in	r24, 0x13	; 19
     566:	90 81       	ld	r25, Z
     568:	98 2b       	or	r25, r24
     56a:	90 83       	st	Z, r25

	if(klaw->result == klaw->last_result)
     56c:	81 81       	ldd	r24, Z+1	; 0x01
     56e:	98 13       	cpse	r25, r24
     570:	03 c0       	rjmp	.+6      	; 0x578 <keypad+0x40>
	{
		klaw->last_result = klaw->result;
		return klaw->result=0xFF;
     572:	8f ef       	ldi	r24, 0xFF	; 255
     574:	80 83       	st	Z, r24
     576:	08 95       	ret
	}
	else
	{
		klaw->last_result = klaw->result;
     578:	91 83       	std	Z+1, r25	; 0x01
		return klaw->result; //ostatnio wcisniety
     57a:	89 2f       	mov	r24, r25
	}
}
     57c:	08 95       	ret

0000057e <keypad_clr_buf>:
	

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
     57e:	e8 e1       	ldi	r30, 0x18	; 24
     580:	f1 e0       	ldi	r31, 0x01	; 1
	for(int i=0;i<16;i++) //czyszczenie bufora
				keypad_A.buf[i]='\0'; 
     582:	11 92       	st	Z+, r1

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
	for(int i=0;i<16;i++) //czyszczenie bufora
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	e8 32       	cpi	r30, 0x28	; 40
     588:	f8 07       	cpc	r31, r24
     58a:	d9 f7       	brne	.-10     	; 0x582 <keypad_clr_buf+0x4>
				keypad_A.buf[i]='\0'; 
	keypad_A.i=0; //zerowanie wskaznika zapisu bufora
     58c:	10 92 29 01 	sts	0x0129, r1
     590:	10 92 28 01 	sts	0x0128, r1
     594:	08 95       	ret

00000596 <keypad_proc>:
		return klaw->result; //ostatnio wcisniety
	}
}

void keypad_proc(struct Key *klaw)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	fc 01       	movw	r30, r24

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     59c:	80 81       	ld	r24, Z
     59e:	87 3d       	cpi	r24, 0xD7	; 215
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <keypad_proc+0xe>
     5a2:	c4 c0       	rjmp	.+392    	; 0x72c <keypad_proc+0x196>
     5a4:	58 f5       	brcc	.+86     	; 0x5fc <keypad_proc+0x66>
     5a6:	87 3b       	cpi	r24, 0xB7	; 183
     5a8:	09 f4       	brne	.+2      	; 0x5ac <keypad_proc+0x16>
     5aa:	6c c0       	rjmp	.+216    	; 0x684 <keypad_proc+0xee>
     5ac:	98 f4       	brcc	.+38     	; 0x5d4 <keypad_proc+0x3e>
     5ae:	8b 37       	cpi	r24, 0x7B	; 123
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <keypad_proc+0x1e>
     5b2:	51 c0       	rjmp	.+162    	; 0x656 <keypad_proc+0xc0>
     5b4:	8d 37       	cpi	r24, 0x7D	; 125
     5b6:	09 f4       	brne	.+2      	; 0x5ba <keypad_proc+0x24>
     5b8:	4b c0       	rjmp	.+150    	; 0x650 <keypad_proc+0xba>
     5ba:	87 37       	cpi	r24, 0x77	; 119
     5bc:	09 f0       	breq	.+2      	; 0x5c0 <keypad_proc+0x2a>
     5be:	c1 c0       	rjmp	.+386    	; 0x742 <keypad_proc+0x1ac>
     5c0:	ef 01       	movw	r28, r30
			klaw->flags |= KB_M;
	
		}break; 

		case 0b01110111     : { //D - czyszczenie
			 keypad_clr_buf();//czyszczenie bufora
     5c2:	0e 94 bf 02 	call	0x57e	; 0x57e <keypad_clr_buf>
			//czyszczenie flag
			klaw->flags &= ~KB_H;
			klaw->flags &= ~KB_M;
     5c6:	9c 89       	ldd	r25, Y+20	; 0x14
     5c8:	93 7f       	andi	r25, 0xF3	; 243
			klaw->flags |= KB_CLR;
     5ca:	90 61       	ori	r25, 0x10	; 16
     5cc:	9c 8b       	std	Y+20, r25	; 0x14
			//czyszczenie wskaznika buforu
			klaw->i = 0;
     5ce:	1b 8a       	std	Y+19, r1	; 0x13
     5d0:	1a 8a       	std	Y+18, r1	; 0x12
		}; break; 
     5d2:	b7 c0       	rjmp	.+366    	; 0x742 <keypad_proc+0x1ac>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     5d4:	8d 3b       	cpi	r24, 0xBD	; 189
     5d6:	09 f4       	brne	.+2      	; 0x5da <keypad_proc+0x44>
     5d8:	9e c0       	rjmp	.+316    	; 0x716 <keypad_proc+0x180>
     5da:	8e 3b       	cpi	r24, 0xBE	; 190
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <keypad_proc+0x4a>
     5de:	7a c0       	rjmp	.+244    	; 0x6d4 <keypad_proc+0x13e>
     5e0:	8b 3b       	cpi	r24, 0xBB	; 187
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <keypad_proc+0x50>
     5e4:	ae c0       	rjmp	.+348    	; 0x742 <keypad_proc+0x1ac>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
     5e6:	82 89       	ldd	r24, Z+18	; 0x12
     5e8:	93 89       	ldd	r25, Z+19	; 0x13
     5ea:	9c 01       	movw	r18, r24
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	33 8b       	std	Z+19, r19	; 0x13
     5f2:	22 8b       	std	Z+18, r18	; 0x12
     5f4:	e8 0f       	add	r30, r24
     5f6:	f9 1f       	adc	r31, r25
     5f8:	89 e3       	ldi	r24, 0x39	; 57
     5fa:	a2 c0       	rjmp	.+324    	; 0x740 <keypad_proc+0x1aa>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     5fc:	87 3e       	cpi	r24, 0xE7	; 231
     5fe:	79 f1       	breq	.+94     	; 0x65e <keypad_proc+0xc8>
     600:	a0 f4       	brcc	.+40     	; 0x62a <keypad_proc+0x94>
     602:	8d 3d       	cpi	r24, 0xDD	; 221
     604:	09 f4       	brne	.+2      	; 0x608 <keypad_proc+0x72>
     606:	7c c0       	rjmp	.+248    	; 0x700 <keypad_proc+0x16a>
     608:	8e 3d       	cpi	r24, 0xDE	; 222
     60a:	09 f4       	brne	.+2      	; 0x60e <keypad_proc+0x78>
     60c:	58 c0       	rjmp	.+176    	; 0x6be <keypad_proc+0x128>
     60e:	8b 3d       	cpi	r24, 0xDB	; 219
     610:	09 f0       	breq	.+2      	; 0x614 <keypad_proc+0x7e>
     612:	97 c0       	rjmp	.+302    	; 0x742 <keypad_proc+0x1ac>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
     614:	82 89       	ldd	r24, Z+18	; 0x12
     616:	93 89       	ldd	r25, Z+19	; 0x13
     618:	9c 01       	movw	r18, r24
     61a:	2f 5f       	subi	r18, 0xFF	; 255
     61c:	3f 4f       	sbci	r19, 0xFF	; 255
     61e:	33 8b       	std	Z+19, r19	; 0x13
     620:	22 8b       	std	Z+18, r18	; 0x12
     622:	e8 0f       	add	r30, r24
     624:	f9 1f       	adc	r31, r25
     626:	88 e3       	ldi	r24, 0x38	; 56
     628:	8b c0       	rjmp	.+278    	; 0x740 <keypad_proc+0x1aa>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     62a:	8d 3e       	cpi	r24, 0xED	; 237
     62c:	09 f4       	brne	.+2      	; 0x630 <keypad_proc+0x9a>
     62e:	5d c0       	rjmp	.+186    	; 0x6ea <keypad_proc+0x154>
     630:	8e 3e       	cpi	r24, 0xEE	; 238
     632:	d1 f1       	breq	.+116    	; 0x6a8 <keypad_proc+0x112>
     634:	8b 3e       	cpi	r24, 0xEB	; 235
     636:	09 f0       	breq	.+2      	; 0x63a <keypad_proc+0xa4>
     638:	84 c0       	rjmp	.+264    	; 0x742 <keypad_proc+0x1ac>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
     63a:	82 89       	ldd	r24, Z+18	; 0x12
     63c:	93 89       	ldd	r25, Z+19	; 0x13
     63e:	9c 01       	movw	r18, r24
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	33 8b       	std	Z+19, r19	; 0x13
     646:	22 8b       	std	Z+18, r18	; 0x12
     648:	e8 0f       	add	r30, r24
     64a:	f9 1f       	adc	r31, r25
     64c:	87 e3       	ldi	r24, 0x37	; 55
     64e:	78 c0       	rjmp	.+240    	; 0x740 <keypad_proc+0x1aa>
	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
	{
		//klawisze funkcyjne
		
		//case 0b01111110     : ; break; //A - potwierdzenie (accept)
		case 0b01111101     : klaw->flags |= KB_NEW; break; //B - wprowadzanie nowego obiektu
     650:	84 89       	ldd	r24, Z+20	; 0x14
     652:	80 64       	ori	r24, 0x40	; 64
     654:	02 c0       	rjmp	.+4      	; 0x65a <keypad_proc+0xc4>
		case 0b01111011     : klaw->flags |= KB_CAL ; break; //C - kalibracja (calibration)
     656:	84 89       	ldd	r24, Z+20	; 0x14
     658:	80 62       	ori	r24, 0x20	; 32
     65a:	84 8b       	std	Z+20, r24	; 0x14
     65c:	72 c0       	rjmp	.+228    	; 0x742 <keypad_proc+0x1ac>

		case 0b11100111     : { //* H
			if(!(klaw->flags & KB_H) && !(klaw->flags & KB_M)) //jesli brak flagi H i M
     65e:	84 89       	ldd	r24, Z+20	; 0x14
     660:	98 2f       	mov	r25, r24
     662:	9c 70       	andi	r25, 0x0C	; 12
     664:	69 f4       	brne	.+26     	; 0x680 <keypad_proc+0xea>
				klaw->buf[klaw->i++]='H';
     666:	22 89       	ldd	r18, Z+18	; 0x12
     668:	33 89       	ldd	r19, Z+19	; 0x13
     66a:	a9 01       	movw	r20, r18
     66c:	4f 5f       	subi	r20, 0xFF	; 255
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	53 8b       	std	Z+19, r21	; 0x13
     672:	42 8b       	std	Z+18, r20	; 0x12
     674:	df 01       	movw	r26, r30
     676:	a2 0f       	add	r26, r18
     678:	b3 1f       	adc	r27, r19
     67a:	98 e4       	ldi	r25, 0x48	; 72
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	9c 93       	st	X, r25
			klaw->flags |= KB_H;
     680:	88 60       	ori	r24, 0x08	; 8
     682:	eb cf       	rjmp	.-42     	; 0x65a <keypad_proc+0xc4>

		} break; 
		case 0b10110111     :{ //# M
			if(!(klaw->flags & KB_M))
     684:	84 89       	ldd	r24, Z+20	; 0x14
     686:	82 fd       	sbrc	r24, 2
     688:	0d c0       	rjmp	.+26     	; 0x6a4 <keypad_proc+0x10e>
				klaw->buf[klaw->i++]='M';
     68a:	22 89       	ldd	r18, Z+18	; 0x12
     68c:	33 89       	ldd	r19, Z+19	; 0x13
     68e:	a9 01       	movw	r20, r18
     690:	4f 5f       	subi	r20, 0xFF	; 255
     692:	5f 4f       	sbci	r21, 0xFF	; 255
     694:	53 8b       	std	Z+19, r21	; 0x13
     696:	42 8b       	std	Z+18, r20	; 0x12
     698:	df 01       	movw	r26, r30
     69a:	a2 0f       	add	r26, r18
     69c:	b3 1f       	adc	r27, r19
     69e:	9d e4       	ldi	r25, 0x4D	; 77
     6a0:	12 96       	adiw	r26, 0x02	; 2
     6a2:	9c 93       	st	X, r25
			klaw->flags |= KB_M;
     6a4:	84 60       	ori	r24, 0x04	; 4
     6a6:	d9 cf       	rjmp	.-78     	; 0x65a <keypad_proc+0xc4>
		}; break; 
		

		
		//klawisz numeryczny     
		case 0b11101110     : klaw->buf[klaw->i++]='1'; break; //1
     6a8:	82 89       	ldd	r24, Z+18	; 0x12
     6aa:	93 89       	ldd	r25, Z+19	; 0x13
     6ac:	9c 01       	movw	r18, r24
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	33 8b       	std	Z+19, r19	; 0x13
     6b4:	22 8b       	std	Z+18, r18	; 0x12
     6b6:	e8 0f       	add	r30, r24
     6b8:	f9 1f       	adc	r31, r25
     6ba:	81 e3       	ldi	r24, 0x31	; 49
     6bc:	41 c0       	rjmp	.+130    	; 0x740 <keypad_proc+0x1aa>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
     6be:	82 89       	ldd	r24, Z+18	; 0x12
     6c0:	93 89       	ldd	r25, Z+19	; 0x13
     6c2:	9c 01       	movw	r18, r24
     6c4:	2f 5f       	subi	r18, 0xFF	; 255
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	33 8b       	std	Z+19, r19	; 0x13
     6ca:	22 8b       	std	Z+18, r18	; 0x12
     6cc:	e8 0f       	add	r30, r24
     6ce:	f9 1f       	adc	r31, r25
     6d0:	82 e3       	ldi	r24, 0x32	; 50
     6d2:	36 c0       	rjmp	.+108    	; 0x740 <keypad_proc+0x1aa>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
     6d4:	82 89       	ldd	r24, Z+18	; 0x12
     6d6:	93 89       	ldd	r25, Z+19	; 0x13
     6d8:	9c 01       	movw	r18, r24
     6da:	2f 5f       	subi	r18, 0xFF	; 255
     6dc:	3f 4f       	sbci	r19, 0xFF	; 255
     6de:	33 8b       	std	Z+19, r19	; 0x13
     6e0:	22 8b       	std	Z+18, r18	; 0x12
     6e2:	e8 0f       	add	r30, r24
     6e4:	f9 1f       	adc	r31, r25
     6e6:	83 e3       	ldi	r24, 0x33	; 51
     6e8:	2b c0       	rjmp	.+86     	; 0x740 <keypad_proc+0x1aa>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
     6ea:	82 89       	ldd	r24, Z+18	; 0x12
     6ec:	93 89       	ldd	r25, Z+19	; 0x13
     6ee:	9c 01       	movw	r18, r24
     6f0:	2f 5f       	subi	r18, 0xFF	; 255
     6f2:	3f 4f       	sbci	r19, 0xFF	; 255
     6f4:	33 8b       	std	Z+19, r19	; 0x13
     6f6:	22 8b       	std	Z+18, r18	; 0x12
     6f8:	e8 0f       	add	r30, r24
     6fa:	f9 1f       	adc	r31, r25
     6fc:	84 e3       	ldi	r24, 0x34	; 52
     6fe:	20 c0       	rjmp	.+64     	; 0x740 <keypad_proc+0x1aa>
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
     700:	82 89       	ldd	r24, Z+18	; 0x12
     702:	93 89       	ldd	r25, Z+19	; 0x13
     704:	9c 01       	movw	r18, r24
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	33 8b       	std	Z+19, r19	; 0x13
     70c:	22 8b       	std	Z+18, r18	; 0x12
     70e:	e8 0f       	add	r30, r24
     710:	f9 1f       	adc	r31, r25
     712:	85 e3       	ldi	r24, 0x35	; 53
     714:	15 c0       	rjmp	.+42     	; 0x740 <keypad_proc+0x1aa>
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
     716:	82 89       	ldd	r24, Z+18	; 0x12
     718:	93 89       	ldd	r25, Z+19	; 0x13
     71a:	9c 01       	movw	r18, r24
     71c:	2f 5f       	subi	r18, 0xFF	; 255
     71e:	3f 4f       	sbci	r19, 0xFF	; 255
     720:	33 8b       	std	Z+19, r19	; 0x13
     722:	22 8b       	std	Z+18, r18	; 0x12
     724:	e8 0f       	add	r30, r24
     726:	f9 1f       	adc	r31, r25
     728:	86 e3       	ldi	r24, 0x36	; 54
     72a:	0a c0       	rjmp	.+20     	; 0x740 <keypad_proc+0x1aa>
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
		case 0b11010111     : klaw->buf[klaw->i++]='0'; break; //0
     72c:	82 89       	ldd	r24, Z+18	; 0x12
     72e:	93 89       	ldd	r25, Z+19	; 0x13
     730:	9c 01       	movw	r18, r24
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	33 8b       	std	Z+19, r19	; 0x13
     738:	22 8b       	std	Z+18, r18	; 0x12
     73a:	e8 0f       	add	r30, r24
     73c:	f9 1f       	adc	r31, r25
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	82 83       	std	Z+2, r24	; 0x02
		//default:
	}
	

}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <kalibracja>:
#include "pushto_lib.h"


void kalibracja(struct Enc *enk1, struct Enc *enk2, struct Telescope *tel) //enkoder1 - wysokosc, enkoder2 - obrot
{
     748:	4f 92       	push	r4
     74a:	5f 92       	push	r5
     74c:	6f 92       	push	r6
     74e:	7f 92       	push	r7
     750:	8f 92       	push	r8
     752:	9f 92       	push	r9
     754:	af 92       	push	r10
     756:	bf 92       	push	r11
     758:	cf 92       	push	r12
     75a:	df 92       	push	r13
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	7c 01       	movw	r14, r24
     76a:	8b 01       	movw	r16, r22
     76c:	ea 01       	movw	r28, r20
    /*funkcja do kalibracji pushtu, okreslenie polozenia ukladu rownikowego wzgledem ukladu horyzontalnego*/

	float halk;	//wysoko≈õƒá alkaida
	float talk; //kƒÖt godzinny

	gotoXy(0,0);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("Goto zenit-> C");
     776:	80 e6       	ldi	r24, 0x60	; 96
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     77e:	86 e1       	ldi	r24, 0x16	; 22
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     786:	8b 37       	cpi	r24, 0x7B	; 123
     788:	d1 f7       	brne	.-12     	; 0x77e <kalibracja+0x36>
	enk1->count=EN1_RANGE/4; //ustawienie wysokosci zenitu
     78a:	80 e7       	ldi	r24, 0x70	; 112
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	f7 01       	movw	r30, r14
     790:	93 83       	std	Z+3, r25	; 0x03
     792:	82 83       	std	Z+2, r24	; 0x02
	
	gotoXy(0,0);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("Goto polaris-> C");
     79c:	8f e6       	ldi	r24, 0x6F	; 111
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     7a4:	86 e1       	ldi	r24, 0x16	; 22
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     7ac:	8b 37       	cpi	r24, 0x7B	; 123
     7ae:	d1 f7       	brne	.-12     	; 0x7a4 <kalibracja+0x5c>
	enk2->count=0; //ustawienie 0 enkodera na azymucie=0
     7b0:	f8 01       	movw	r30, r16
     7b2:	13 82       	std	Z+3, r1	; 0x03
     7b4:	12 82       	std	Z+2, r1	; 0x02
	tel->h_pol=(enk1->count*2.0*PI)/EN1_RANGE; //szeroko≈õƒá geograficzna h_pol, rad
     7b6:	f7 01       	movw	r30, r14
     7b8:	62 81       	ldd	r22, Z+2	; 0x02
     7ba:	73 81       	ldd	r23, Z+3	; 0x03
     7bc:	07 2e       	mov	r0, r23
     7be:	00 0c       	add	r0, r0
     7c0:	88 0b       	sbc	r24, r24
     7c2:	99 0b       	sbc	r25, r25
     7c4:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     7c8:	9b 01       	movw	r18, r22
     7ca:	ac 01       	movw	r20, r24
     7cc:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     7d0:	2b ed       	ldi	r18, 0xDB	; 219
     7d2:	3f e0       	ldi	r19, 0x0F	; 15
     7d4:	49 e4       	ldi	r20, 0x49	; 73
     7d6:	50 e4       	ldi	r21, 0x40	; 64
     7d8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	41 ee       	ldi	r20, 0xE1	; 225
     7e2:	53 e4       	ldi	r21, 0x43	; 67
     7e4:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     7e8:	6e 8b       	std	Y+22, r22	; 0x16
     7ea:	7f 8b       	std	Y+23, r23	; 0x17
     7ec:	88 8f       	std	Y+24, r24	; 0x18
     7ee:	99 8f       	std	Y+25, r25	; 0x19

	gotoXy(0,0);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("Goto alkaid -> C");
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     800:	86 e1       	ldi	r24, 0x16	; 22
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     808:	8b 37       	cpi	r24, 0x7B	; 123
     80a:	d1 f7       	brne	.-12     	; 0x800 <kalibracja+0xb8>
	
	halk=(enk1->count/EN1_RANGE)*2.0*PI; //przeliczenie zmierzonej wysoko≈õci na radiany
     80c:	f7 01       	movw	r30, r14
     80e:	62 81       	ldd	r22, Z+2	; 0x02
     810:	73 81       	ldd	r23, Z+3	; 0x03
     812:	07 2e       	mov	r0, r23
     814:	00 0c       	add	r0, r0
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	41 ee       	ldi	r20, 0xE1	; 225
     824:	53 e4       	ldi	r21, 0x43	; 67
     826:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     832:	2b ed       	ldi	r18, 0xDB	; 219
     834:	3f e0       	ldi	r19, 0x0F	; 15
     836:	49 e4       	ldi	r20, 0x49	; 73
     838:	50 e4       	ldi	r21, 0x40	; 64
     83a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
     83e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <sin>
     842:	4b 01       	movw	r8, r22
     844:	5c 01       	movw	r10, r24
     846:	ce 88       	ldd	r12, Y+22	; 0x16
     848:	df 88       	ldd	r13, Y+23	; 0x17
     84a:	e8 8c       	ldd	r14, Y+24	; 0x18
     84c:	f9 8c       	ldd	r15, Y+25	; 0x19
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <sin>
     856:	2b 01       	movw	r4, r22
     858:	3c 01       	movw	r6, r24
     85a:	c7 01       	movw	r24, r14
     85c:	b6 01       	movw	r22, r12
     85e:	0e 94 08 09 	call	0x1210	; 0x1210 <cos>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	27 e1       	ldi	r18, 0x17	; 23
     868:	35 e1       	ldi	r19, 0x15	; 21
     86a:	42 e4       	ldi	r20, 0x42	; 66
     86c:	5f e3       	ldi	r21, 0x3F	; 63
     86e:	c3 01       	movw	r24, r6
     870:	b2 01       	movw	r22, r4
     872:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	c5 01       	movw	r24, r10
     87c:	b4 01       	movw	r22, r8
     87e:	0e 94 4c 08 	call	0x1098	; 0x1098 <__subsf3>
     882:	4b 01       	movw	r8, r22
     884:	5c 01       	movw	r10, r24
     886:	2c ee       	ldi	r18, 0xEC	; 236
     888:	3f ee       	ldi	r19, 0xEF	; 239
     88a:	46 e2       	ldi	r20, 0x26	; 38
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c5 01       	movw	r24, r10
     89c:	b4 01       	movw	r22, r8
     89e:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     8a2:	0e 94 3b 08 	call	0x1076	; 0x1076 <acos>
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin
     8aa:	f8 01       	movw	r30, r16
     8ac:	62 81       	ldd	r22, Z+2	; 0x02
     8ae:	73 81       	ldd	r23, Z+3	; 0x03
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
     8c0:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     8c4:	2b ed       	ldi	r18, 0xDB	; 219
     8c6:	3f e0       	ldi	r19, 0x0F	; 15
     8c8:	49 e4       	ldi	r20, 0x49	; 73
     8ca:	50 e4       	ldi	r21, 0x40	; 64
     8cc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	41 ee       	ldi	r20, 0xE1	; 225
     8d6:	53 e4       	ldi	r21, 0x43	; 67
     8d8:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     8dc:	2b ed       	ldi	r18, 0xDB	; 219
     8de:	3f e0       	ldi	r19, 0x0F	; 15
     8e0:	49 e4       	ldi	r20, 0x49	; 73
     8e2:	50 e4       	ldi	r21, 0x40	; 64
     8e4:	0e 94 03 09 	call	0x1206	; 0x1206 <__cmpsf2>
     8e8:	18 16       	cp	r1, r24
     8ea:	54 f0       	brlt	.+20     	; 0x900 <kalibracja+0x1b8>
     8ec:	2b ed       	ldi	r18, 0xDB	; 219
     8ee:	3f e0       	ldi	r19, 0x0F	; 15
     8f0:	49 e4       	ldi	r20, 0x49	; 73
     8f2:	50 e4       	ldi	r21, 0x40	; 64
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     8fc:	6b 01       	movw	r12, r22
     8fe:	7c 01       	movw	r14, r24

	tel->time=talk+ralk; //ustawianie zegara
     900:	22 ec       	ldi	r18, 0xC2	; 194
     902:	3e e5       	ldi	r19, 0x5E	; 94
     904:	47 e6       	ldi	r20, 0x67	; 103
     906:	50 e4       	ldi	r21, 0x40	; 64
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     910:	68 83       	st	Y, r22
     912:	79 83       	std	Y+1, r23	; 0x01
     914:	8a 83       	std	Y+2, r24	; 0x02
     916:	9b 83       	std	Y+3, r25	; 0x03
	lcd_clr();

}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
	halk=(enk1->count/EN1_RANGE)*2.0*PI; //przeliczenie zmierzonej wysoko≈õci na radiany
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin

	tel->time=talk+ralk; //ustawianie zegara
	lcd_clr();
     938:	0c 94 99 02 	jmp	0x532	; 0x532 <lcd_clr>

0000093c <nowy_cel>:

}

void nowy_cel(struct Key *klaw, struct Telescope *tel)
{
     93c:	2f 92       	push	r2
     93e:	3f 92       	push	r3
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	00 d0       	rcall	.+0      	; 0x962 <nowy_cel+0x26>
     962:	00 d0       	rcall	.+0      	; 0x964 <nowy_cel+0x28>
     964:	00 d0       	rcall	.+0      	; 0x966 <nowy_cel+0x2a>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	8c 01       	movw	r16, r24
     96c:	1b 01       	movw	r2, r22
    /*funkcja obslugujaca wprowadzanie nowego celu, 
    zawiera wskazowki dotyczace formatu wprowadzania,
    po wprowadzeniu konwertuje znaki z bufora klawiatury na liczby
    reprezentujace deklinacje i rektastencje zadana*/

	int h=0;
     96e:	1e 82       	std	Y+6, r1	; 0x06
     970:	1d 82       	std	Y+5, r1	; 0x05
	int m=0;
     972:	1c 82       	std	Y+4, r1	; 0x04
     974:	1b 82       	std	Y+3, r1	; 0x03
	int s=0;
     976:	1a 82       	std	Y+2, r1	; 0x02
     978:	19 82       	std	Y+1, r1	; 0x01

	keypad_clr_buf(); //czyszczenie bufora
     97a:	0e 94 bf 02 	call	0x57e	; 0x57e <keypad_clr_buf>
	gotoXy(0,0);
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("podaj dekl i RA ");
     986:	81 e9       	ldi	r24, 0x91	; 145
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	gotoXy(0,1);
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("format xHyMz ->B");
     996:	82 ea       	ldi	r24, 0xA2	; 162
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     9a4:	8d 37       	cpi	r24, 0x7D	; 125
     9a6:	d9 f7       	brne	.-10     	; 0x99e <nowy_cel+0x62>
	gotoXy(0,0);
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("oznaczenia:     ");
     9b0:	83 eb       	ldi	r24, 0xB3	; 179
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	gotoXy(0,1);
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("H(*) M(#)    ->B");
     9c0:	84 ec       	ldi	r24, 0xC4	; 196
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     9c8:	c8 01       	movw	r24, r16
     9ca:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     9ce:	8d 37       	cpi	r24, 0x7D	; 125
     9d0:	d9 f7       	brne	.-10     	; 0x9c8 <nowy_cel+0x8c>
	lcd_clr();
     9d2:	0e 94 99 02 	call	0x532	; 0x532 <lcd_clr>

	gotoXy(0,0);
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
    prints("podaj RA     ->B");
     9de:	85 ed       	ldi	r24, 0xD5	; 213
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 04 02 	call	0x408	; 0x408 <prints>
     9e6:	c8 01       	movw	r24, r16
     9e8:	02 96       	adiw	r24, 0x02	; 2
     9ea:	7c 01       	movw	r14, r24
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     9f2:	8d 37       	cpi	r24, 0x7D	; 125
     9f4:	59 f0       	breq	.+22     	; 0xa0c <nowy_cel+0xd0>
    {
    	gotoXy(0,1);
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
    	keypad_proc(klaw);
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 cb 02 	call	0x596	; 0x596 <keypad_proc>
    	prints(klaw->buf);
     a04:	c7 01       	movw	r24, r14
     a06:	0e 94 04 02 	call	0x408	; 0x408 <prints>
     a0a:	f0 cf       	rjmp	.-32     	; 0x9ec <nowy_cel+0xb0>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     a0c:	fe 01       	movw	r30, r28
     a0e:	31 96       	adiw	r30, 0x01	; 1
     a10:	4f 01       	movw	r8, r30
     a12:	ff 93       	push	r31
     a14:	ef 93       	push	r30
     a16:	5e 01       	movw	r10, r28
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	af 0e       	add	r10, r31
     a1c:	b1 1c       	adc	r11, r1
     a1e:	bf 92       	push	r11
     a20:	af 92       	push	r10
     a22:	6e 01       	movw	r12, r28
     a24:	85 e0       	ldi	r24, 0x05	; 5
     a26:	c8 0e       	add	r12, r24
     a28:	d1 1c       	adc	r13, r1
     a2a:	df 92       	push	r13
     a2c:	cf 92       	push	r12
     a2e:	86 ee       	ldi	r24, 0xE6	; 230
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	ff 92       	push	r15
     a38:	ef 92       	push	r14
     a3a:	0e 94 07 0c 	call	0x180e	; 0x180e <sscanf>

    tel->re_zad = (15*h+15/60.0*m+15/3600.0*s)*(PI/180.0); //z przeliczeniem na radiany
     a3e:	8d 81       	ldd	r24, Y+5	; 0x05
     a40:	9e 81       	ldd	r25, Y+6	; 0x06
     a42:	2f e0       	ldi	r18, 0x0F	; 15
     a44:	28 9f       	mul	r18, r24
     a46:	b0 01       	movw	r22, r0
     a48:	29 9f       	mul	r18, r25
     a4a:	70 0d       	add	r23, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	07 2e       	mov	r0, r23
     a50:	00 0c       	add	r0, r0
     a52:	88 0b       	sbc	r24, r24
     a54:	99 0b       	sbc	r25, r25
     a56:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     a5a:	2b 01       	movw	r4, r22
     a5c:	3c 01       	movw	r6, r24
     a5e:	6b 81       	ldd	r22, Y+3	; 0x03
     a60:	7c 81       	ldd	r23, Y+4	; 0x04
     a62:	07 2e       	mov	r0, r23
     a64:	00 0c       	add	r0, r0
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	40 e8       	ldi	r20, 0x80	; 128
     a74:	5e e3       	ldi	r21, 0x3E	; 62
     a76:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c3 01       	movw	r24, r6
     a80:	b2 01       	movw	r22, r4
     a82:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
     a8a:	69 81       	ldd	r22, Y+1	; 0x01
     a8c:	7a 81       	ldd	r23, Y+2	; 0x02
     a8e:	07 2e       	mov	r0, r23
     a90:	00 0c       	add	r0, r0
     a92:	88 0b       	sbc	r24, r24
     a94:	99 0b       	sbc	r25, r25
     a96:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     a9a:	29 e8       	ldi	r18, 0x89	; 137
     a9c:	38 e8       	ldi	r19, 0x88	; 136
     a9e:	48 e8       	ldi	r20, 0x88	; 136
     aa0:	5b e3       	ldi	r21, 0x3B	; 59
     aa2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	c3 01       	movw	r24, r6
     aac:	b2 01       	movw	r22, r4
     aae:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     ab2:	25 e3       	ldi	r18, 0x35	; 53
     ab4:	3a ef       	ldi	r19, 0xFA	; 250
     ab6:	4e e8       	ldi	r20, 0x8E	; 142
     ab8:	5c e3       	ldi	r21, 0x3C	; 60
     aba:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     abe:	f1 01       	movw	r30, r2
     ac0:	62 87       	std	Z+10, r22	; 0x0a
     ac2:	73 87       	std	Z+11, r23	; 0x0b
     ac4:	84 87       	std	Z+12, r24	; 0x0c
     ac6:	95 87       	std	Z+13, r25	; 0x0d

    keypad_clr_buf(); // czyszczenie bufora
     ac8:	0e 94 bf 02 	call	0x57e	; 0x57e <keypad_clr_buf>
    lcd_clr();
     acc:	0e 94 99 02 	call	0x532	; 0x532 <lcd_clr>
    h=0;m=0;s=0;
     ad0:	1e 82       	std	Y+6, r1	; 0x06
     ad2:	1d 82       	std	Y+5, r1	; 0x05
     ad4:	1c 82       	std	Y+4, r1	; 0x04
     ad6:	1b 82       	std	Y+3, r1	; 0x03
     ad8:	1a 82       	std	Y+2, r1	; 0x02
     ada:	19 82       	std	Y+1, r1	; 0x01
    klaw->flags &= ~KB_H;
	klaw->flags &= ~KB_M;
     adc:	f8 01       	movw	r30, r16
     ade:	84 89       	ldd	r24, Z+20	; 0x14
     ae0:	83 7f       	andi	r24, 0xF3	; 243
     ae2:	84 8b       	std	Z+20, r24	; 0x14
	gotoXy(0,0);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
    prints("dekl H to st ->B");
     aec:	8f ee       	ldi	r24, 0xEF	; 239
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 04 02 	call	0x408	; 0x408 <prints>
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	c8 01       	movw	r24, r16
     b00:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
     b04:	8d 37       	cpi	r24, 0x7D	; 125
     b06:	59 f0       	breq	.+22     	; 0xb1e <nowy_cel+0x1e2>
    {
    	gotoXy(0,1);
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
    	keypad_proc(klaw);
     b10:	c8 01       	movw	r24, r16
     b12:	0e 94 cb 02 	call	0x596	; 0x596 <keypad_proc>
    	prints(klaw->buf);
     b16:	c7 01       	movw	r24, r14
     b18:	0e 94 04 02 	call	0x408	; 0x408 <prints>
     b1c:	f0 cf       	rjmp	.-32     	; 0xafe <nowy_cel+0x1c2>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     b1e:	9f 92       	push	r9
     b20:	8f 92       	push	r8
     b22:	bf 92       	push	r11
     b24:	af 92       	push	r10
     b26:	df 92       	push	r13
     b28:	cf 92       	push	r12
     b2a:	86 ee       	ldi	r24, 0xE6	; 230
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	9f 93       	push	r25
     b30:	8f 93       	push	r24
     b32:	ff 92       	push	r15
     b34:	ef 92       	push	r14
     b36:	0e 94 07 0c 	call	0x180e	; 0x180e <sscanf>
    tel->de_zad = (h+m/60.0+s/3600.0)*(PI/180.0); //w radianach
     b3a:	6d 81       	ldd	r22, Y+5	; 0x05
     b3c:	7e 81       	ldd	r23, Y+6	; 0x06
     b3e:	07 2e       	mov	r0, r23
     b40:	00 0c       	add	r0, r0
     b42:	88 0b       	sbc	r24, r24
     b44:	99 0b       	sbc	r25, r25
     b46:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	bc 01       	movw	r22, r24
     b54:	99 0f       	add	r25, r25
     b56:	88 0b       	sbc	r24, r24
     b58:	99 0b       	sbc	r25, r25
     b5a:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e7       	ldi	r20, 0x70	; 112
     b64:	52 e4       	ldi	r21, 0x42	; 66
     b66:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	c7 01       	movw	r24, r14
     b70:	b6 01       	movw	r22, r12
     b72:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     b76:	6b 01       	movw	r12, r22
     b78:	7c 01       	movw	r14, r24
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	bc 01       	movw	r22, r24
     b80:	99 0f       	add	r25, r25
     b82:	88 0b       	sbc	r24, r24
     b84:	99 0b       	sbc	r25, r25
     b86:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	41 e6       	ldi	r20, 0x61	; 97
     b90:	55 e4       	ldi	r21, 0x45	; 69
     b92:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	c7 01       	movw	r24, r14
     b9c:	b6 01       	movw	r22, r12
     b9e:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     ba2:	25 e3       	ldi	r18, 0x35	; 53
     ba4:	3a ef       	ldi	r19, 0xFA	; 250
     ba6:	4e e8       	ldi	r20, 0x8E	; 142
     ba8:	5c e3       	ldi	r21, 0x3C	; 60
     baa:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     bae:	f1 01       	movw	r30, r2
     bb0:	66 83       	std	Z+6, r22	; 0x06
     bb2:	77 83       	std	Z+7, r23	; 0x07
     bb4:	80 87       	std	Z+8, r24	; 0x08
     bb6:	91 87       	std	Z+9, r25	; 0x09
 	
 	keypad_clr_buf();
     bb8:	0e 94 bf 02 	call	0x57e	; 0x57e <keypad_clr_buf>
 	lcd_clr();
     bbc:	0e 94 99 02 	call	0x532	; 0x532 <lcd_clr>
	klaw->flags='\0'; //czszczenie flag
     bc0:	f8 01       	movw	r30, r16
     bc2:	14 8a       	std	Z+20, r1	; 0x14
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
}
     bce:	26 96       	adiw	r28, 0x06	; 6
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	bf 90       	pop	r11
     bec:	af 90       	pop	r10
     bee:	9f 90       	pop	r9
     bf0:	8f 90       	pop	r8
     bf2:	7f 90       	pop	r7
     bf4:	6f 90       	pop	r6
     bf6:	5f 90       	pop	r5
     bf8:	4f 90       	pop	r4
     bfa:	3f 90       	pop	r3
     bfc:	2f 90       	pop	r2
     bfe:	08 95       	ret

00000c00 <obliczenie_nastaw>:

void obliczenie_nastaw(struct Telescope *tel)
{
     c00:	4f 92       	push	r4
     c02:	5f 92       	push	r5
     c04:	6f 92       	push	r6
     c06:	7f 92       	push	r7
     c08:	8f 92       	push	r8
     c0a:	9f 92       	push	r9
     c0c:	af 92       	push	r10
     c0e:	bf 92       	push	r11
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	64 97       	sbiw	r28, 0x14	; 20
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	8c 01       	movw	r16, r24
    /*funkcja obliczajaca nastawy dla enkoderow na podstawie wprowadzonych(zadanych)
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
     c32:	fc 01       	movw	r30, r24
     c34:	22 85       	ldd	r18, Z+10	; 0x0a
     c36:	33 85       	ldd	r19, Z+11	; 0x0b
     c38:	44 85       	ldd	r20, Z+12	; 0x0c
     c3a:	55 85       	ldd	r21, Z+13	; 0x0d
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	0e 94 4c 08 	call	0x1098	; 0x1098 <__subsf3>
     c48:	69 83       	std	Y+1, r22	; 0x01
     c4a:	7a 83       	std	Y+2, r23	; 0x02
     c4c:	8b 83       	std	Y+3, r24	; 0x03
     c4e:	9c 83       	std	Y+4, r25	; 0x04
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
     c50:	f8 01       	movw	r30, r16
     c52:	86 80       	ldd	r8, Z+6	; 0x06
     c54:	97 80       	ldd	r9, Z+7	; 0x07
     c56:	a0 84       	ldd	r10, Z+8	; 0x08
     c58:	b1 84       	ldd	r11, Z+9	; 0x09
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <sin>
     c62:	2b 01       	movw	r4, r22
     c64:	3c 01       	movw	r6, r24
     c66:	f8 01       	movw	r30, r16
     c68:	c6 88       	ldd	r12, Z+22	; 0x16
     c6a:	d7 88       	ldd	r13, Z+23	; 0x17
     c6c:	e0 8c       	ldd	r14, Z+24	; 0x18
     c6e:	f1 8c       	ldd	r15, Z+25	; 0x19
     c70:	c7 01       	movw	r24, r14
     c72:	b6 01       	movw	r22, r12
     c74:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <sin>
     c78:	6d 83       	std	Y+5, r22	; 0x05
     c7a:	7e 83       	std	Y+6, r23	; 0x06
     c7c:	8f 83       	std	Y+7, r24	; 0x07
     c7e:	98 87       	std	Y+8, r25	; 0x08
     c80:	c5 01       	movw	r24, r10
     c82:	b4 01       	movw	r22, r8
     c84:	0e 94 08 09 	call	0x1210	; 0x1210 <cos>
     c88:	4b 01       	movw	r8, r22
     c8a:	5c 01       	movw	r10, r24
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	0e 94 08 09 	call	0x1210	; 0x1210 <cos>
     c94:	69 87       	std	Y+9, r22	; 0x09
     c96:	7a 87       	std	Y+10, r23	; 0x0a
     c98:	8b 87       	std	Y+11, r24	; 0x0b
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	69 81       	ldd	r22, Y+1	; 0x01
     c9e:	7a 81       	ldd	r23, Y+2	; 0x02
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	0e 94 08 09 	call	0x1210	; 0x1210 <cos>
     ca8:	6d 87       	std	Y+13, r22	; 0x0d
     caa:	7e 87       	std	Y+14, r23	; 0x0e
     cac:	8f 87       	std	Y+15, r24	; 0x0f
     cae:	98 8b       	std	Y+16, r25	; 0x10
     cb0:	2d 81       	ldd	r18, Y+5	; 0x05
     cb2:	3e 81       	ldd	r19, Y+6	; 0x06
     cb4:	4f 81       	ldd	r20, Y+7	; 0x07
     cb6:	58 85       	ldd	r21, Y+8	; 0x08
     cb8:	c3 01       	movw	r24, r6
     cba:	b2 01       	movw	r22, r4
     cbc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     cc0:	6b 01       	movw	r12, r22
     cc2:	7c 01       	movw	r14, r24
     cc4:	29 85       	ldd	r18, Y+9	; 0x09
     cc6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cc8:	4b 85       	ldd	r20, Y+11	; 0x0b
     cca:	5c 85       	ldd	r21, Y+12	; 0x0c
     ccc:	c5 01       	movw	r24, r10
     cce:	b4 01       	movw	r22, r8
     cd0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     cd4:	2d 85       	ldd	r18, Y+13	; 0x0d
     cd6:	3e 85       	ldd	r19, Y+14	; 0x0e
     cd8:	4f 85       	ldd	r20, Y+15	; 0x0f
     cda:	58 89       	ldd	r21, Y+16	; 0x10
     cdc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     ce0:	9b 01       	movw	r18, r22
     ce2:	ac 01       	movw	r20, r24
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     cec:	0e 94 b9 08 	call	0x1172	; 0x1172 <asin>
     cf0:	6b 01       	movw	r12, r22
     cf2:	7c 01       	movw	r14, r24
     cf4:	f8 01       	movw	r30, r16
     cf6:	66 87       	std	Z+14, r22	; 0x0e
     cf8:	77 87       	std	Z+15, r23	; 0x0f
     cfa:	80 8b       	std	Z+16, r24	; 0x10
     cfc:	91 8b       	std	Z+17, r25	; 0x11
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     cfe:	69 81       	ldd	r22, Y+1	; 0x01
     d00:	7a 81       	ldd	r23, Y+2	; 0x02
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <sin>
     d0a:	9b 01       	movw	r18, r22
     d0c:	ac 01       	movw	r20, r24
     d0e:	c5 01       	movw	r24, r10
     d10:	b4 01       	movw	r22, r8
     d12:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     d16:	69 8b       	std	Y+17, r22	; 0x11
     d18:	7a 8b       	std	Y+18, r23	; 0x12
     d1a:	8b 8b       	std	Y+19, r24	; 0x13
     d1c:	9c 8b       	std	Y+20, r25	; 0x14
     d1e:	c3 01       	movw	r24, r6
     d20:	b2 01       	movw	r22, r4
     d22:	90 58       	subi	r25, 0x80	; 128
     d24:	29 85       	ldd	r18, Y+9	; 0x09
     d26:	3a 85       	ldd	r19, Y+10	; 0x0a
     d28:	4b 85       	ldd	r20, Y+11	; 0x0b
     d2a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d2c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     d30:	2b 01       	movw	r4, r22
     d32:	3c 01       	movw	r6, r24
     d34:	2d 81       	ldd	r18, Y+5	; 0x05
     d36:	3e 81       	ldd	r19, Y+6	; 0x06
     d38:	4f 81       	ldd	r20, Y+7	; 0x07
     d3a:	58 85       	ldd	r21, Y+8	; 0x08
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     d44:	2d 85       	ldd	r18, Y+13	; 0x0d
     d46:	3e 85       	ldd	r19, Y+14	; 0x0e
     d48:	4f 85       	ldd	r20, Y+15	; 0x0f
     d4a:	58 89       	ldd	r21, Y+16	; 0x10
     d4c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c3 01       	movw	r24, r6
     d56:	b2 01       	movw	r22, r4
     d58:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	69 89       	ldd	r22, Y+17	; 0x11
     d62:	7a 89       	ldd	r23, Y+18	; 0x12
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     d6c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <atan>
     d70:	4b 01       	movw	r8, r22
     d72:	5c 01       	movw	r10, r24
		if(o_time<(PI/2.0) || o_time>(3.0*PI/2.0)) tel->obr_obl+=PI; // z zale≈ºno≈õci azymutu i kƒÖta godzinnego 
     d74:	2b ed       	ldi	r18, 0xDB	; 219
     d76:	3f e0       	ldi	r19, 0x0F	; 15
     d78:	49 ec       	ldi	r20, 0xC9	; 201
     d7a:	5f e3       	ldi	r21, 0x3F	; 63
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	7a 81       	ldd	r23, Y+2	; 0x02
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	0e 94 03 09 	call	0x1206	; 0x1206 <__cmpsf2>
     d88:	87 fd       	sbrc	r24, 7
     d8a:	12 c0       	rjmp	.+36     	; 0xdb0 <obliczenie_nastaw+0x1b0>
     d8c:	24 ee       	ldi	r18, 0xE4	; 228
     d8e:	3b ec       	ldi	r19, 0xCB	; 203
     d90:	46 e9       	ldi	r20, 0x96	; 150
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	7a 81       	ldd	r23, Y+2	; 0x02
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__gesf2>
     da0:	18 16       	cp	r1, r24
     da2:	34 f0       	brlt	.+12     	; 0xdb0 <obliczenie_nastaw+0x1b0>
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     da4:	f8 01       	movw	r30, r16
     da6:	82 8a       	std	Z+18, r8	; 0x12
     da8:	93 8a       	std	Z+19, r9	; 0x13
     daa:	a4 8a       	std	Z+20, r10	; 0x14
     dac:	b5 8a       	std	Z+21, r11	; 0x15
     dae:	0d c0       	rjmp	.+26     	; 0xdca <obliczenie_nastaw+0x1ca>
		if(o_time<(PI/2.0) || o_time>(3.0*PI/2.0)) tel->obr_obl+=PI; // z zale≈ºno≈õci azymutu i kƒÖta godzinnego 
     db0:	2b ed       	ldi	r18, 0xDB	; 219
     db2:	3f e0       	ldi	r19, 0x0F	; 15
     db4:	49 e4       	ldi	r20, 0x49	; 73
     db6:	50 e4       	ldi	r21, 0x40	; 64
     db8:	c5 01       	movw	r24, r10
     dba:	b4 01       	movw	r22, r8
     dbc:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     dc0:	f8 01       	movw	r30, r16
     dc2:	62 8b       	std	Z+18, r22	; 0x12
     dc4:	73 8b       	std	Z+19, r23	; 0x13
     dc6:	84 8b       	std	Z+20, r24	; 0x14
     dc8:	95 8b       	std	Z+21, r25	; 0x15
		if(tel->obr_obl<=0) tel->obr_obl+=2*PI; //z w≈Çasno≈õci atan
     dca:	f8 01       	movw	r30, r16
     dcc:	82 88       	ldd	r8, Z+18	; 0x12
     dce:	93 88       	ldd	r9, Z+19	; 0x13
     dd0:	a4 88       	ldd	r10, Z+20	; 0x14
     dd2:	b5 88       	ldd	r11, Z+21	; 0x15
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	a9 01       	movw	r20, r18
     dda:	c5 01       	movw	r24, r10
     ddc:	b4 01       	movw	r22, r8
     dde:	0e 94 03 09 	call	0x1206	; 0x1206 <__cmpsf2>
     de2:	18 16       	cp	r1, r24
     de4:	6c f0       	brlt	.+26     	; 0xe00 <obliczenie_nastaw+0x200>
     de6:	2b ed       	ldi	r18, 0xDB	; 219
     de8:	3f e0       	ldi	r19, 0x0F	; 15
     dea:	49 ec       	ldi	r20, 0xC9	; 201
     dec:	50 e4       	ldi	r21, 0x40	; 64
     dee:	c5 01       	movw	r24, r10
     df0:	b4 01       	movw	r22, r8
     df2:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3>
     df6:	f8 01       	movw	r30, r16
     df8:	62 8b       	std	Z+18, r22	; 0x12
     dfa:	73 8b       	std	Z+19, r23	; 0x13
     dfc:	84 8b       	std	Z+20, r24	; 0x14
     dfe:	95 8b       	std	Z+21, r25	; 0x15


	tel->wys_obl=(tel->wys_obl*EN1_RANGE)/(2.0*PI); //przeliczenie na obroty
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	41 ee       	ldi	r20, 0xE1	; 225
     e06:	53 e4       	ldi	r21, 0x43	; 67
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     e10:	2b ed       	ldi	r18, 0xDB	; 219
     e12:	3f e0       	ldi	r19, 0x0F	; 15
     e14:	49 ec       	ldi	r20, 0xC9	; 201
     e16:	50 e4       	ldi	r21, 0x40	; 64
     e18:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     e1c:	f8 01       	movw	r30, r16
     e1e:	66 87       	std	Z+14, r22	; 0x0e
     e20:	77 87       	std	Z+15, r23	; 0x0f
     e22:	80 8b       	std	Z+16, r24	; 0x10
     e24:	91 8b       	std	Z+17, r25	; 0x11
	tel->obr_obl=(tel->obr_obl*EN2_RANGE)/(2.0*PI);
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	41 ee       	ldi	r20, 0xE1	; 225
     e2c:	53 e4       	ldi	r21, 0x43	; 67
     e2e:	62 89       	ldd	r22, Z+18	; 0x12
     e30:	73 89       	ldd	r23, Z+19	; 0x13
     e32:	84 89       	ldd	r24, Z+20	; 0x14
     e34:	95 89       	ldd	r25, Z+21	; 0x15
     e36:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     e3a:	2b ed       	ldi	r18, 0xDB	; 219
     e3c:	3f e0       	ldi	r19, 0x0F	; 15
     e3e:	49 ec       	ldi	r20, 0xC9	; 201
     e40:	50 e4       	ldi	r21, 0x40	; 64
     e42:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     e46:	f8 01       	movw	r30, r16
     e48:	62 8b       	std	Z+18, r22	; 0x12
     e4a:	73 8b       	std	Z+19, r23	; 0x13
     e4c:	84 8b       	std	Z+20, r24	; 0x14
     e4e:	95 8b       	std	Z+21, r25	; 0x15
}
     e50:	64 96       	adiw	r28, 0x14	; 20
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	bf 90       	pop	r11
     e6e:	af 90       	pop	r10
     e70:	9f 90       	pop	r9
     e72:	8f 90       	pop	r8
     e74:	7f 90       	pop	r7
     e76:	6f 90       	pop	r6
     e78:	5f 90       	pop	r5
     e7a:	4f 90       	pop	r4
     e7c:	08 95       	ret

00000e7e <naprowadzanie>:

void naprowadzanie(struct Enc *enk1, struct Enc *enk2, struct Telescope *tel)
{
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	4c 01       	movw	r8, r24
     e94:	eb 01       	movw	r28, r22
     e96:	5a 01       	movw	r10, r20
	/*Funkcja naprowadzajƒÖca urzytkownika na obiekt na podstawie r√≥≈ºnicy miƒôdzy
	zadanymi i obliczonymi obrotami enkoderow*/
	long int wysokosc = lroundf ((tel->wys_obl *EN1_RANGE/(2.0*PI) - enk1->count));
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	41 ee       	ldi	r20, 0xE1	; 225
     e9e:	53 e4       	ldi	r21, 0x43	; 67
     ea0:	f5 01       	movw	r30, r10
     ea2:	66 85       	ldd	r22, Z+14	; 0x0e
     ea4:	77 85       	ldd	r23, Z+15	; 0x0f
     ea6:	80 89       	ldd	r24, Z+16	; 0x10
     ea8:	91 89       	ldd	r25, Z+17	; 0x11
     eaa:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     eae:	2b ed       	ldi	r18, 0xDB	; 219
     eb0:	3f e0       	ldi	r19, 0x0F	; 15
     eb2:	49 ec       	ldi	r20, 0xC9	; 201
     eb4:	50 e4       	ldi	r21, 0x40	; 64
     eb6:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     eba:	6b 01       	movw	r12, r22
     ebc:	7c 01       	movw	r14, r24
     ebe:	f4 01       	movw	r30, r8
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	bc 01       	movw	r22, r24
     ec6:	99 0f       	add	r25, r25
     ec8:	88 0b       	sbc	r24, r24
     eca:	99 0b       	sbc	r25, r25
     ecc:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	0e 94 4c 08 	call	0x1098	; 0x1098 <__subsf3>
     edc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <lround>
     ee0:	6b 01       	movw	r12, r22
     ee2:	7c 01       	movw	r14, r24
	long int obrot = lroundf ((tel->obr_obl *EN2_RANGE/(2.0*PI) - enk2->count));
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	41 ee       	ldi	r20, 0xE1	; 225
     eea:	53 e4       	ldi	r21, 0x43	; 67
     eec:	f5 01       	movw	r30, r10
     eee:	62 89       	ldd	r22, Z+18	; 0x12
     ef0:	73 89       	ldd	r23, Z+19	; 0x13
     ef2:	84 89       	ldd	r24, Z+20	; 0x14
     ef4:	95 89       	ldd	r25, Z+21	; 0x15
     ef6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
     efa:	2b ed       	ldi	r18, 0xDB	; 219
     efc:	3f e0       	ldi	r19, 0x0F	; 15
     efe:	49 ec       	ldi	r20, 0xC9	; 201
     f00:	50 e4       	ldi	r21, 0x40	; 64
     f02:	0e 94 0d 09 	call	0x121a	; 0x121a <__divsf3>
     f06:	4b 01       	movw	r8, r22
     f08:	5c 01       	movw	r10, r24
     f0a:	4a 81       	ldd	r20, Y+2	; 0x02
     f0c:	5b 81       	ldd	r21, Y+3	; 0x03
     f0e:	ba 01       	movw	r22, r20
     f10:	55 0f       	add	r21, r21
     f12:	88 0b       	sbc	r24, r24
     f14:	99 0b       	sbc	r25, r25
     f16:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	c5 01       	movw	r24, r10
     f20:	b4 01       	movw	r22, r8
     f22:	0e 94 4c 08 	call	0x1098	; 0x1098 <__subsf3>
     f26:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <lround>
     f2a:	4b 01       	movw	r8, r22
     f2c:	5c 01       	movw	r10, r24

	gotoXy(0,0);
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("Wysokosc: ");
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	integerToLcd((int)wysokosc);
     f3e:	c6 01       	movw	r24, r12
     f40:	0e 94 18 02 	call	0x430	; 0x430 <integerToLcd>
	gotoXy(0,1);
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	0e 94 10 02 	call	0x420	; 0x420 <gotoXy>
	prints("Obrot:    ");
     f4c:	8b e0       	ldi	r24, 0x0B	; 11
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 04 02 	call	0x408	; 0x408 <prints>
	integerToLcd((int)obrot);
     f54:	c4 01       	movw	r24, r8
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
	gotoXy(0,0);
	prints("Wysokosc: ");
	integerToLcd((int)wysokosc);
	gotoXy(0,1);
	prints("Obrot:    ");
	integerToLcd((int)obrot);
     f6a:	0c 94 18 02 	jmp	0x430	; 0x430 <integerToLcd>

00000f6e <direction>:
#include "encoder.h"

void direction(struct Enc *danyEncoder)
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
	/*funkcja wykonywana po przyj≈õciu przerwania (zmiany stanu n√≥≈ºki enkodera)
	zmieniajƒÖca determinujƒÖca kierunek obrotu i odpowiednio
	inkrementujƒÖca licznik enkodera*/

	if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
     f74:	30 b3       	in	r19, 0x10	; 16
     f76:	88 81       	ld	r24, Y
     f78:	38 23       	and	r19, r24
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	33 23       	and	r19, r19
     f82:	29 f0       	breq	.+10     	; 0xf8e <direction+0x20>
	{
		if(EN_PIN & danyEncoder->maskB)
     f84:	30 b3       	in	r19, 0x10	; 16
     f86:	23 23       	and	r18, r19
     f88:	29 f0       	breq	.+10     	; 0xf94 <direction+0x26>
			danyEncoder->count-=1;
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <direction+0x28>
			danyEncoder->count+=1;
	}

	else									//A zmienilo stan na niski
	{
		if(EN_PIN & danyEncoder->maskB)
     f8e:	30 b3       	in	r19, 0x10	; 16
     f90:	23 23       	and	r18, r19
     f92:	d9 f3       	breq	.-10     	; 0xf8a <direction+0x1c>
	if (EN_PIN & danyEncoder->maskA)		//A zmianilo stan na wysoki
	{
		if(EN_PIN & danyEncoder->maskB)
			danyEncoder->count-=1;
		else
			danyEncoder->count+=1;
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
			danyEncoder->count+=1;
		else
			danyEncoder->count-=1;
	}

	if (danyEncoder->count >=danyEncoder->range) //zerowanie po pe≈Çnym obrocie
     f9a:	6a 81       	ldd	r22, Y+2	; 0x02
     f9c:	7b 81       	ldd	r23, Y+3	; 0x03
     f9e:	07 2e       	mov	r0, r23
     fa0:	00 0c       	add	r0, r0
     fa2:	88 0b       	sbc	r24, r24
     fa4:	99 0b       	sbc	r25, r25
     fa6:	0e 94 81 09 	call	0x1302	; 0x1302 <__floatsisf>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	4e 81       	ldd	r20, Y+6	; 0x06
     fb0:	5f 81       	ldd	r21, Y+7	; 0x07
     fb2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__gesf2>
     fb6:	87 fd       	sbrc	r24, 7
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <direction+0x50>
	{
		danyEncoder->count=0; 
     fba:	1b 82       	std	Y+3, r1	; 0x03
     fbc:	1a 82       	std	Y+2, r1	; 0x02
}
}
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <main>:


int main(void)
{
	system_init();
     fc4:	0e 94 93 00 	call	0x126	; 0x126 <system_init>
	lcdInit();
     fc8:	0e 94 ad 01 	call	0x35a	; 0x35a <lcdInit>
	while(1)
	{

		keypad(&keypad_A); //odczyt klawiatury
     fcc:	86 e1       	ldi	r24, 0x16	; 22
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 9c 02 	call	0x538	; 0x538 <keypad>
		keypad_proc(&keypad_A); //przetwarzanie znakow
     fd4:	86 e1       	ldi	r24, 0x16	; 22
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 cb 02 	call	0x596	; 0x596 <keypad_proc>

		if(keypad_A.flags & KB_NEW)
     fdc:	80 91 2a 01 	lds	r24, 0x012A
     fe0:	86 ff       	sbrs	r24, 6
     fe2:	0b c0       	rjmp	.+22     	; 0xffa <main+0x36>
		{
			nowy_cel(&keypad_A,&telescope_A);
     fe4:	63 e3       	ldi	r22, 0x33	; 51
     fe6:	71 e0       	ldi	r23, 0x01	; 1
     fe8:	86 e1       	ldi	r24, 0x16	; 22
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	0e 94 9e 04 	call	0x93c	; 0x93c <nowy_cel>
			keypad_A.flags &= ~KB_NEW;
     ff0:	80 91 2a 01 	lds	r24, 0x012A
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	80 93 2a 01 	sts	0x012A, r24
		}

		if(keypad_A.flags & KB_CAL)
     ffa:	80 91 2a 01 	lds	r24, 0x012A
     ffe:	85 ff       	sbrs	r24, 5
    1000:	0d c0       	rjmp	.+26     	; 0x101c <main+0x58>
		{
			kalibracja(&encoder1,&encoder2,&telescope_A); // funkcja z pushto_lib
    1002:	43 e3       	ldi	r20, 0x33	; 51
    1004:	51 e0       	ldi	r21, 0x01	; 1
    1006:	6d e4       	ldi	r22, 0x4D	; 77
    1008:	71 e0       	ldi	r23, 0x01	; 1
    100a:	8b e2       	ldi	r24, 0x2B	; 43
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 a4 03 	call	0x748	; 0x748 <kalibracja>
			keypad_A.flags &= ~KB_CAL;
    1012:	80 91 2a 01 	lds	r24, 0x012A
    1016:	8f 7d       	andi	r24, 0xDF	; 223
    1018:	80 93 2a 01 	sts	0x012A, r24
		}

		if(keypad_A.flags & KB_CLR)
    101c:	80 91 2a 01 	lds	r24, 0x012A
    1020:	84 ff       	sbrs	r24, 4
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <main+0x6e>
		{
			lcd_clr();
    1024:	0e 94 99 02 	call	0x532	; 0x532 <lcd_clr>
			keypad_A.flags &= ~KB_CLR;
    1028:	80 91 2a 01 	lds	r24, 0x012A
    102c:	8f 7e       	andi	r24, 0xEF	; 239
    102e:	80 93 2a 01 	sts	0x012A, r24
		}

		if(telescope_A.update==10)
    1032:	80 91 37 01 	lds	r24, 0x0137
    1036:	90 91 38 01 	lds	r25, 0x0138
    103a:	0a 97       	sbiw	r24, 0x0a	; 10
    103c:	41 f4       	brne	.+16     	; 0x104e <main+0x8a>
		{
			obliczenie_nastaw(&telescope_A); //funkcja na obliczenie nastaw, co 10sek (patrz ISR(TIMER1_COMPA_vect))
    103e:	83 e3       	ldi	r24, 0x33	; 51
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 00 06 	call	0xc00	; 0xc00 <obliczenie_nastaw>
			telescope_A.update=0;
    1046:	10 92 38 01 	sts	0x0138, r1
    104a:	10 92 37 01 	sts	0x0137, r1
		}

		naprowadzanie(&encoder1, &encoder2, &telescope_A);
    104e:	43 e3       	ldi	r20, 0x33	; 51
    1050:	51 e0       	ldi	r21, 0x01	; 1
    1052:	6d e4       	ldi	r22, 0x4D	; 77
    1054:	71 e0       	ldi	r23, 0x01	; 1
    1056:	8b e2       	ldi	r24, 0x2B	; 43
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <naprowadzanie>
		
		if(keypad_A.i > 14)
    105e:	80 91 28 01 	lds	r24, 0x0128
    1062:	90 91 29 01 	lds	r25, 0x0129
    1066:	0f 97       	sbiw	r24, 0x0f	; 15
    1068:	0c f4       	brge	.+2      	; 0x106c <main+0xa8>
    106a:	b0 cf       	rjmp	.-160    	; 0xfcc <main+0x8>
			keypad_A.i=0;
    106c:	10 92 29 01 	sts	0x0129, r1
    1070:	10 92 28 01 	sts	0x0128, r1
    1074:	ab cf       	rjmp	.-170    	; 0xfcc <main+0x8>

00001076 <acos>:
    1076:	9f 93       	push	r25
    1078:	9f 77       	andi	r25, 0x7F	; 127
    107a:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_arccos>
    107e:	0f 90       	pop	r0
    1080:	00 20       	and	r0, r0
    1082:	42 f4       	brpl	.+16     	; 0x1094 <acos+0x1e>
    1084:	90 58       	subi	r25, 0x80	; 128
    1086:	a2 ea       	ldi	r26, 0xA2	; 162
    1088:	2a ed       	ldi	r18, 0xDA	; 218
    108a:	3f e0       	ldi	r19, 0x0F	; 15
    108c:	49 e4       	ldi	r20, 0x49	; 73
    108e:	50 e4       	ldi	r21, 0x40	; 64
    1090:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    1094:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

00001098 <__subsf3>:
    1098:	50 58       	subi	r21, 0x80	; 128

0000109a <__addsf3>:
    109a:	bb 27       	eor	r27, r27
    109c:	aa 27       	eor	r26, r26
    109e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    10a2:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    10a6:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_pscA>
    10aa:	38 f0       	brcs	.+14     	; 0x10ba <__addsf3+0x20>
    10ac:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_pscB>
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <__addsf3+0x20>
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <__addsf3+0x28>
    10b4:	9f 3f       	cpi	r25, 0xFF	; 255
    10b6:	19 f4       	brne	.+6      	; 0x10be <__addsf3+0x24>
    10b8:	26 f4       	brtc	.+8      	; 0x10c2 <__addsf3+0x28>
    10ba:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_nan>
    10be:	0e f4       	brtc	.+2      	; 0x10c2 <__addsf3+0x28>
    10c0:	e0 95       	com	r30
    10c2:	e7 fb       	bst	r30, 7
    10c4:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_inf>

000010c8 <__addsf3x>:
    10c8:	e9 2f       	mov	r30, r25
    10ca:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_split3>
    10ce:	58 f3       	brcs	.-42     	; 0x10a6 <__addsf3+0xc>
    10d0:	ba 17       	cp	r27, r26
    10d2:	62 07       	cpc	r22, r18
    10d4:	73 07       	cpc	r23, r19
    10d6:	84 07       	cpc	r24, r20
    10d8:	95 07       	cpc	r25, r21
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__addsf3x+0x1c>
    10dc:	79 f4       	brne	.+30     	; 0x10fc <__addsf3x+0x34>
    10de:	a6 f5       	brtc	.+104    	; 0x1148 <__addsf3x+0x80>
    10e0:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__fp_zero>
    10e4:	0e f4       	brtc	.+2      	; 0x10e8 <__addsf3x+0x20>
    10e6:	e0 95       	com	r30
    10e8:	0b 2e       	mov	r0, r27
    10ea:	ba 2f       	mov	r27, r26
    10ec:	a0 2d       	mov	r26, r0
    10ee:	0b 01       	movw	r0, r22
    10f0:	b9 01       	movw	r22, r18
    10f2:	90 01       	movw	r18, r0
    10f4:	0c 01       	movw	r0, r24
    10f6:	ca 01       	movw	r24, r20
    10f8:	a0 01       	movw	r20, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	ff 27       	eor	r31, r31
    10fe:	59 1b       	sub	r21, r25
    1100:	99 f0       	breq	.+38     	; 0x1128 <__addsf3x+0x60>
    1102:	59 3f       	cpi	r21, 0xF9	; 249
    1104:	50 f4       	brcc	.+20     	; 0x111a <__addsf3x+0x52>
    1106:	50 3e       	cpi	r21, 0xE0	; 224
    1108:	68 f1       	brcs	.+90     	; 0x1164 <__addsf3x+0x9c>
    110a:	1a 16       	cp	r1, r26
    110c:	f0 40       	sbci	r31, 0x00	; 0
    110e:	a2 2f       	mov	r26, r18
    1110:	23 2f       	mov	r18, r19
    1112:	34 2f       	mov	r19, r20
    1114:	44 27       	eor	r20, r20
    1116:	58 5f       	subi	r21, 0xF8	; 248
    1118:	f3 cf       	rjmp	.-26     	; 0x1100 <__addsf3x+0x38>
    111a:	46 95       	lsr	r20
    111c:	37 95       	ror	r19
    111e:	27 95       	ror	r18
    1120:	a7 95       	ror	r26
    1122:	f0 40       	sbci	r31, 0x00	; 0
    1124:	53 95       	inc	r21
    1126:	c9 f7       	brne	.-14     	; 0x111a <__addsf3x+0x52>
    1128:	7e f4       	brtc	.+30     	; 0x1148 <__addsf3x+0x80>
    112a:	1f 16       	cp	r1, r31
    112c:	ba 0b       	sbc	r27, r26
    112e:	62 0b       	sbc	r22, r18
    1130:	73 0b       	sbc	r23, r19
    1132:	84 0b       	sbc	r24, r20
    1134:	ba f0       	brmi	.+46     	; 0x1164 <__addsf3x+0x9c>
    1136:	91 50       	subi	r25, 0x01	; 1
    1138:	a1 f0       	breq	.+40     	; 0x1162 <__addsf3x+0x9a>
    113a:	ff 0f       	add	r31, r31
    113c:	bb 1f       	adc	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	c2 f7       	brpl	.-16     	; 0x1136 <__addsf3x+0x6e>
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <__addsf3x+0x9c>
    1148:	ba 0f       	add	r27, r26
    114a:	62 1f       	adc	r22, r18
    114c:	73 1f       	adc	r23, r19
    114e:	84 1f       	adc	r24, r20
    1150:	48 f4       	brcc	.+18     	; 0x1164 <__addsf3x+0x9c>
    1152:	87 95       	ror	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	b7 95       	ror	r27
    115a:	f7 95       	ror	r31
    115c:	9e 3f       	cpi	r25, 0xFE	; 254
    115e:	08 f0       	brcs	.+2      	; 0x1162 <__addsf3x+0x9a>
    1160:	b0 cf       	rjmp	.-160    	; 0x10c2 <__addsf3+0x28>
    1162:	93 95       	inc	r25
    1164:	88 0f       	add	r24, r24
    1166:	08 f0       	brcs	.+2      	; 0x116a <__addsf3x+0xa2>
    1168:	99 27       	eor	r25, r25
    116a:	ee 0f       	add	r30, r30
    116c:	97 95       	ror	r25
    116e:	87 95       	ror	r24
    1170:	08 95       	ret

00001172 <asin>:
    1172:	9f 93       	push	r25
    1174:	9f 77       	andi	r25, 0x7F	; 127
    1176:	ee e3       	ldi	r30, 0x3E	; 62
    1178:	89 37       	cpi	r24, 0x79	; 121
    117a:	9e 07       	cpc	r25, r30
    117c:	28 f4       	brcc	.+10     	; 0x1188 <asin+0x16>
    117e:	e4 e5       	ldi	r30, 0x54	; 84
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_powsodd>
    1186:	0c c0       	rjmp	.+24     	; 0x11a0 <asin+0x2e>
    1188:	0e 94 bc 09 	call	0x1378	; 0x1378 <__fp_arccos>
    118c:	90 58       	subi	r25, 0x80	; 128
    118e:	a2 ea       	ldi	r26, 0xA2	; 162
    1190:	2a ed       	ldi	r18, 0xDA	; 218
    1192:	3f e0       	ldi	r19, 0x0F	; 15
    1194:	49 ec       	ldi	r20, 0xC9	; 201
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    119c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_round>
    11a0:	0f 90       	pop	r0
    11a2:	07 fc       	sbrc	r0, 7
    11a4:	90 58       	subi	r25, 0x80	; 128
    11a6:	08 95       	ret

000011a8 <atan>:
    11a8:	df 93       	push	r29
    11aa:	dd 27       	eor	r29, r29
    11ac:	b9 2f       	mov	r27, r25
    11ae:	bf 77       	andi	r27, 0x7F	; 127
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	16 16       	cp	r1, r22
    11b6:	17 06       	cpc	r1, r23
    11b8:	48 07       	cpc	r20, r24
    11ba:	5b 07       	cpc	r21, r27
    11bc:	18 f4       	brcc	.+6      	; 0x11c4 <atan+0x1c>
    11be:	d9 2f       	mov	r29, r25
    11c0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <inverse>
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	7f 93       	push	r23
    11ca:	6f 93       	push	r22
    11cc:	0e 94 c6 0b 	call	0x178c	; 0x178c <square>
    11d0:	e8 e6       	ldi	r30, 0x68	; 104
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_powser>
    11d8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_round>
    11dc:	2f 91       	pop	r18
    11de:	3f 91       	pop	r19
    11e0:	4f 91       	pop	r20
    11e2:	5f 91       	pop	r21
    11e4:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3x>
    11e8:	dd 23       	and	r29, r29
    11ea:	51 f0       	breq	.+20     	; 0x1200 <atan+0x58>
    11ec:	90 58       	subi	r25, 0x80	; 128
    11ee:	a2 ea       	ldi	r26, 0xA2	; 162
    11f0:	2a ed       	ldi	r18, 0xDA	; 218
    11f2:	3f e0       	ldi	r19, 0x0F	; 15
    11f4:	49 ec       	ldi	r20, 0xC9	; 201
    11f6:	5f e3       	ldi	r21, 0x3F	; 63
    11f8:	d0 78       	andi	r29, 0x80	; 128
    11fa:	5d 27       	eor	r21, r29
    11fc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    1200:	df 91       	pop	r29
    1202:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

00001206 <__cmpsf2>:
    1206:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fp_cmp>
    120a:	08 f4       	brcc	.+2      	; 0x120e <__cmpsf2+0x8>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	08 95       	ret

00001210 <cos>:
    1210:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fp_rempio2>
    1214:	e3 95       	inc	r30
    1216:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__fp_sinus>

0000121a <__divsf3>:
    121a:	0e 94 21 09 	call	0x1242	; 0x1242 <__divsf3x>
    121e:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    1222:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_pscB>
    1226:	58 f0       	brcs	.+22     	; 0x123e <__divsf3+0x24>
    1228:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_pscA>
    122c:	40 f0       	brcs	.+16     	; 0x123e <__divsf3+0x24>
    122e:	29 f4       	brne	.+10     	; 0x123a <__divsf3+0x20>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	29 f0       	breq	.+10     	; 0x123e <__divsf3+0x24>
    1234:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_inf>
    1238:	51 11       	cpse	r21, r1
    123a:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_szero>
    123e:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_nan>

00001242 <__divsf3x>:
    1242:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_split3>
    1246:	68 f3       	brcs	.-38     	; 0x1222 <__divsf3+0x8>

00001248 <__divsf3_pse>:
    1248:	99 23       	and	r25, r25
    124a:	b1 f3       	breq	.-20     	; 0x1238 <__divsf3+0x1e>
    124c:	55 23       	and	r21, r21
    124e:	91 f3       	breq	.-28     	; 0x1234 <__divsf3+0x1a>
    1250:	95 1b       	sub	r25, r21
    1252:	55 0b       	sbc	r21, r21
    1254:	bb 27       	eor	r27, r27
    1256:	aa 27       	eor	r26, r26
    1258:	62 17       	cp	r22, r18
    125a:	73 07       	cpc	r23, r19
    125c:	84 07       	cpc	r24, r20
    125e:	38 f0       	brcs	.+14     	; 0x126e <__divsf3_pse+0x26>
    1260:	9f 5f       	subi	r25, 0xFF	; 255
    1262:	5f 4f       	sbci	r21, 0xFF	; 255
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	44 1f       	adc	r20, r20
    126a:	aa 1f       	adc	r26, r26
    126c:	a9 f3       	breq	.-22     	; 0x1258 <__divsf3_pse+0x10>
    126e:	35 d0       	rcall	.+106    	; 0x12da <__divsf3_pse+0x92>
    1270:	0e 2e       	mov	r0, r30
    1272:	3a f0       	brmi	.+14     	; 0x1282 <__divsf3_pse+0x3a>
    1274:	e0 e8       	ldi	r30, 0x80	; 128
    1276:	32 d0       	rcall	.+100    	; 0x12dc <__divsf3_pse+0x94>
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	e6 95       	lsr	r30
    127e:	00 1c       	adc	r0, r0
    1280:	ca f7       	brpl	.-14     	; 0x1274 <__divsf3_pse+0x2c>
    1282:	2b d0       	rcall	.+86     	; 0x12da <__divsf3_pse+0x92>
    1284:	fe 2f       	mov	r31, r30
    1286:	29 d0       	rcall	.+82     	; 0x12da <__divsf3_pse+0x92>
    1288:	66 0f       	add	r22, r22
    128a:	77 1f       	adc	r23, r23
    128c:	88 1f       	adc	r24, r24
    128e:	bb 1f       	adc	r27, r27
    1290:	26 17       	cp	r18, r22
    1292:	37 07       	cpc	r19, r23
    1294:	48 07       	cpc	r20, r24
    1296:	ab 07       	cpc	r26, r27
    1298:	b0 e8       	ldi	r27, 0x80	; 128
    129a:	09 f0       	breq	.+2      	; 0x129e <__divsf3_pse+0x56>
    129c:	bb 0b       	sbc	r27, r27
    129e:	80 2d       	mov	r24, r0
    12a0:	bf 01       	movw	r22, r30
    12a2:	ff 27       	eor	r31, r31
    12a4:	93 58       	subi	r25, 0x83	; 131
    12a6:	5f 4f       	sbci	r21, 0xFF	; 255
    12a8:	3a f0       	brmi	.+14     	; 0x12b8 <__divsf3_pse+0x70>
    12aa:	9e 3f       	cpi	r25, 0xFE	; 254
    12ac:	51 05       	cpc	r21, r1
    12ae:	78 f0       	brcs	.+30     	; 0x12ce <__divsf3_pse+0x86>
    12b0:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_inf>
    12b4:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_szero>
    12b8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ba:	e4 f3       	brlt	.-8      	; 0x12b4 <__divsf3_pse+0x6c>
    12bc:	98 3e       	cpi	r25, 0xE8	; 232
    12be:	d4 f3       	brlt	.-12     	; 0x12b4 <__divsf3_pse+0x6c>
    12c0:	86 95       	lsr	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	b7 95       	ror	r27
    12c8:	f7 95       	ror	r31
    12ca:	9f 5f       	subi	r25, 0xFF	; 255
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__divsf3_pse+0x78>
    12ce:	88 0f       	add	r24, r24
    12d0:	91 1d       	adc	r25, r1
    12d2:	96 95       	lsr	r25
    12d4:	87 95       	ror	r24
    12d6:	97 f9       	bld	r25, 7
    12d8:	08 95       	ret
    12da:	e1 e0       	ldi	r30, 0x01	; 1
    12dc:	66 0f       	add	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	bb 1f       	adc	r27, r27
    12e4:	62 17       	cp	r22, r18
    12e6:	73 07       	cpc	r23, r19
    12e8:	84 07       	cpc	r24, r20
    12ea:	ba 07       	cpc	r27, r26
    12ec:	20 f0       	brcs	.+8      	; 0x12f6 <__divsf3_pse+0xae>
    12ee:	62 1b       	sub	r22, r18
    12f0:	73 0b       	sbc	r23, r19
    12f2:	84 0b       	sbc	r24, r20
    12f4:	ba 0b       	sbc	r27, r26
    12f6:	ee 1f       	adc	r30, r30
    12f8:	88 f7       	brcc	.-30     	; 0x12dc <__divsf3_pse+0x94>
    12fa:	e0 95       	com	r30
    12fc:	08 95       	ret

000012fe <__floatunsisf>:
    12fe:	e8 94       	clt
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <__floatsisf+0x12>

00001302 <__floatsisf>:
    1302:	97 fb       	bst	r25, 7
    1304:	3e f4       	brtc	.+14     	; 0x1314 <__floatsisf+0x12>
    1306:	90 95       	com	r25
    1308:	80 95       	com	r24
    130a:	70 95       	com	r23
    130c:	61 95       	neg	r22
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8f 4f       	sbci	r24, 0xFF	; 255
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	99 23       	and	r25, r25
    1316:	a9 f0       	breq	.+42     	; 0x1342 <__floatsisf+0x40>
    1318:	f9 2f       	mov	r31, r25
    131a:	96 e9       	ldi	r25, 0x96	; 150
    131c:	bb 27       	eor	r27, r27
    131e:	93 95       	inc	r25
    1320:	f6 95       	lsr	r31
    1322:	87 95       	ror	r24
    1324:	77 95       	ror	r23
    1326:	67 95       	ror	r22
    1328:	b7 95       	ror	r27
    132a:	f1 11       	cpse	r31, r1
    132c:	f8 cf       	rjmp	.-16     	; 0x131e <__floatsisf+0x1c>
    132e:	fa f4       	brpl	.+62     	; 0x136e <__floatsisf+0x6c>
    1330:	bb 0f       	add	r27, r27
    1332:	11 f4       	brne	.+4      	; 0x1338 <__floatsisf+0x36>
    1334:	60 ff       	sbrs	r22, 0
    1336:	1b c0       	rjmp	.+54     	; 0x136e <__floatsisf+0x6c>
    1338:	6f 5f       	subi	r22, 0xFF	; 255
    133a:	7f 4f       	sbci	r23, 0xFF	; 255
    133c:	8f 4f       	sbci	r24, 0xFF	; 255
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	16 c0       	rjmp	.+44     	; 0x136e <__floatsisf+0x6c>
    1342:	88 23       	and	r24, r24
    1344:	11 f0       	breq	.+4      	; 0x134a <__floatsisf+0x48>
    1346:	96 e9       	ldi	r25, 0x96	; 150
    1348:	11 c0       	rjmp	.+34     	; 0x136c <__floatsisf+0x6a>
    134a:	77 23       	and	r23, r23
    134c:	21 f0       	breq	.+8      	; 0x1356 <__floatsisf+0x54>
    134e:	9e e8       	ldi	r25, 0x8E	; 142
    1350:	87 2f       	mov	r24, r23
    1352:	76 2f       	mov	r23, r22
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <__floatsisf+0x5e>
    1356:	66 23       	and	r22, r22
    1358:	71 f0       	breq	.+28     	; 0x1376 <__floatsisf+0x74>
    135a:	96 e8       	ldi	r25, 0x86	; 134
    135c:	86 2f       	mov	r24, r22
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	2a f0       	brmi	.+10     	; 0x136e <__floatsisf+0x6c>
    1364:	9a 95       	dec	r25
    1366:	66 0f       	add	r22, r22
    1368:	77 1f       	adc	r23, r23
    136a:	88 1f       	adc	r24, r24
    136c:	da f7       	brpl	.-10     	; 0x1364 <__floatsisf+0x62>
    136e:	88 0f       	add	r24, r24
    1370:	96 95       	lsr	r25
    1372:	87 95       	ror	r24
    1374:	97 f9       	bld	r25, 7
    1376:	08 95       	ret

00001378 <__fp_arccos>:
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	1f 93       	push	r17
    137e:	0f 93       	push	r16
    1380:	8b 01       	movw	r16, r22
    1382:	ec 01       	movw	r28, r24
    1384:	e5 e9       	ldi	r30, 0x95	; 149
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_powser>
    138c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_round>
    1390:	98 01       	movw	r18, r16
    1392:	ae 01       	movw	r20, r28
    1394:	8b 01       	movw	r16, r22
    1396:	ec 01       	movw	r28, r24
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	80 e8       	ldi	r24, 0x80	; 128
    139e:	9f e3       	ldi	r25, 0x3F	; 63
    13a0:	0e 94 4c 08 	call	0x1098	; 0x1098 <__subsf3>
    13a4:	0e 94 86 0b 	call	0x170c	; 0x170c <sqrt>
    13a8:	98 01       	movw	r18, r16
    13aa:	ae 01       	movw	r20, r28
    13ac:	0f 91       	pop	r16
    13ae:	1f 91       	pop	r17
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__mulsf3x>

000013b8 <__fp_cmp>:
    13b8:	99 0f       	add	r25, r25
    13ba:	00 08       	sbc	r0, r0
    13bc:	55 0f       	add	r21, r21
    13be:	aa 0b       	sbc	r26, r26
    13c0:	e0 e8       	ldi	r30, 0x80	; 128
    13c2:	fe ef       	ldi	r31, 0xFE	; 254
    13c4:	16 16       	cp	r1, r22
    13c6:	17 06       	cpc	r1, r23
    13c8:	e8 07       	cpc	r30, r24
    13ca:	f9 07       	cpc	r31, r25
    13cc:	c0 f0       	brcs	.+48     	; 0x13fe <__fp_cmp+0x46>
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	e4 07       	cpc	r30, r20
    13d4:	f5 07       	cpc	r31, r21
    13d6:	98 f0       	brcs	.+38     	; 0x13fe <__fp_cmp+0x46>
    13d8:	62 1b       	sub	r22, r18
    13da:	73 0b       	sbc	r23, r19
    13dc:	84 0b       	sbc	r24, r20
    13de:	95 0b       	sbc	r25, r21
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <__fp_cmp+0x38>
    13e2:	0a 26       	eor	r0, r26
    13e4:	61 f0       	breq	.+24     	; 0x13fe <__fp_cmp+0x46>
    13e6:	23 2b       	or	r18, r19
    13e8:	24 2b       	or	r18, r20
    13ea:	25 2b       	or	r18, r21
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <__fp_cmp+0x3e>
    13ee:	08 95       	ret
    13f0:	0a 26       	eor	r0, r26
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <__fp_cmp+0x3e>
    13f4:	a1 40       	sbci	r26, 0x01	; 1
    13f6:	a6 95       	lsr	r26
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	81 1d       	adc	r24, r1
    13fc:	81 1d       	adc	r24, r1
    13fe:	08 95       	ret

00001400 <__fp_inf>:
    1400:	97 f9       	bld	r25, 7
    1402:	9f 67       	ori	r25, 0x7F	; 127
    1404:	80 e8       	ldi	r24, 0x80	; 128
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	08 95       	ret

0000140c <__fp_nan>:
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	80 ec       	ldi	r24, 0xC0	; 192
    1410:	08 95       	ret

00001412 <__fp_powser>:
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	1f 93       	push	r17
    1418:	0f 93       	push	r16
    141a:	ff 92       	push	r15
    141c:	ef 92       	push	r14
    141e:	df 92       	push	r13
    1420:	7b 01       	movw	r14, r22
    1422:	8c 01       	movw	r16, r24
    1424:	68 94       	set
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <__fp_powser+0x22>
    1428:	da 2e       	mov	r13, r26
    142a:	ef 01       	movw	r28, r30
    142c:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3x>
    1430:	fe 01       	movw	r30, r28
    1432:	e8 94       	clt
    1434:	a5 91       	lpm	r26, Z+
    1436:	25 91       	lpm	r18, Z+
    1438:	35 91       	lpm	r19, Z+
    143a:	45 91       	lpm	r20, Z+
    143c:	55 91       	lpm	r21, Z+
    143e:	a6 f3       	brts	.-24     	; 0x1428 <__fp_powser+0x16>
    1440:	ef 01       	movw	r28, r30
    1442:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    1446:	fe 01       	movw	r30, r28
    1448:	97 01       	movw	r18, r14
    144a:	a8 01       	movw	r20, r16
    144c:	da 94       	dec	r13
    144e:	69 f7       	brne	.-38     	; 0x142a <__fp_powser+0x18>
    1450:	df 90       	pop	r13
    1452:	ef 90       	pop	r14
    1454:	ff 90       	pop	r15
    1456:	0f 91       	pop	r16
    1458:	1f 91       	pop	r17
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <__fp_powsodd>:
    1460:	9f 93       	push	r25
    1462:	8f 93       	push	r24
    1464:	7f 93       	push	r23
    1466:	6f 93       	push	r22
    1468:	ff 93       	push	r31
    146a:	ef 93       	push	r30
    146c:	9b 01       	movw	r18, r22
    146e:	ac 01       	movw	r20, r24
    1470:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__mulsf3>
    1474:	ef 91       	pop	r30
    1476:	ff 91       	pop	r31
    1478:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fp_powser>
    147c:	2f 91       	pop	r18
    147e:	3f 91       	pop	r19
    1480:	4f 91       	pop	r20
    1482:	5f 91       	pop	r21
    1484:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__mulsf3>

00001488 <__fp_pscA>:
    1488:	00 24       	eor	r0, r0
    148a:	0a 94       	dec	r0
    148c:	16 16       	cp	r1, r22
    148e:	17 06       	cpc	r1, r23
    1490:	18 06       	cpc	r1, r24
    1492:	09 06       	cpc	r0, r25
    1494:	08 95       	ret

00001496 <__fp_pscB>:
    1496:	00 24       	eor	r0, r0
    1498:	0a 94       	dec	r0
    149a:	12 16       	cp	r1, r18
    149c:	13 06       	cpc	r1, r19
    149e:	14 06       	cpc	r1, r20
    14a0:	05 06       	cpc	r0, r21
    14a2:	08 95       	ret
    14a4:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_nan>

000014a8 <__fp_rempio2>:
    14a8:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_splitA>
    14ac:	d8 f3       	brcs	.-10     	; 0x14a4 <__fp_pscB+0xe>
    14ae:	e8 94       	clt
    14b0:	e0 e0       	ldi	r30, 0x00	; 0
    14b2:	bb 27       	eor	r27, r27
    14b4:	9f 57       	subi	r25, 0x7F	; 127
    14b6:	f0 f0       	brcs	.+60     	; 0x14f4 <__fp_rempio2+0x4c>
    14b8:	2a ed       	ldi	r18, 0xDA	; 218
    14ba:	3f e0       	ldi	r19, 0x0F	; 15
    14bc:	49 ec       	ldi	r20, 0xC9	; 201
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <__fp_rempio2+0x24>
    14c0:	ee 0f       	add	r30, r30
    14c2:	bb 0f       	add	r27, r27
    14c4:	66 1f       	adc	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	28 f0       	brcs	.+10     	; 0x14d6 <__fp_rempio2+0x2e>
    14cc:	b2 3a       	cpi	r27, 0xA2	; 162
    14ce:	62 07       	cpc	r22, r18
    14d0:	73 07       	cpc	r23, r19
    14d2:	84 07       	cpc	r24, r20
    14d4:	28 f0       	brcs	.+10     	; 0x14e0 <__fp_rempio2+0x38>
    14d6:	b2 5a       	subi	r27, 0xA2	; 162
    14d8:	62 0b       	sbc	r22, r18
    14da:	73 0b       	sbc	r23, r19
    14dc:	84 0b       	sbc	r24, r20
    14de:	e3 95       	inc	r30
    14e0:	9a 95       	dec	r25
    14e2:	72 f7       	brpl	.-36     	; 0x14c0 <__fp_rempio2+0x18>
    14e4:	80 38       	cpi	r24, 0x80	; 128
    14e6:	30 f4       	brcc	.+12     	; 0x14f4 <__fp_rempio2+0x4c>
    14e8:	9a 95       	dec	r25
    14ea:	bb 0f       	add	r27, r27
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	d2 f7       	brpl	.-12     	; 0x14e8 <__fp_rempio2+0x40>
    14f4:	90 48       	sbci	r25, 0x80	; 128
    14f6:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__fp_mpack_finite>

000014fa <__fp_round>:
    14fa:	09 2e       	mov	r0, r25
    14fc:	03 94       	inc	r0
    14fe:	00 0c       	add	r0, r0
    1500:	11 f4       	brne	.+4      	; 0x1506 <__fp_round+0xc>
    1502:	88 23       	and	r24, r24
    1504:	52 f0       	brmi	.+20     	; 0x151a <__fp_round+0x20>
    1506:	bb 0f       	add	r27, r27
    1508:	40 f4       	brcc	.+16     	; 0x151a <__fp_round+0x20>
    150a:	bf 2b       	or	r27, r31
    150c:	11 f4       	brne	.+4      	; 0x1512 <__fp_round+0x18>
    150e:	60 ff       	sbrs	r22, 0
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__fp_round+0x20>
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	08 95       	ret

0000151c <__fp_sinus>:
    151c:	ef 93       	push	r30
    151e:	e0 ff       	sbrs	r30, 0
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <__fp_sinus+0x14>
    1522:	a2 ea       	ldi	r26, 0xA2	; 162
    1524:	2a ed       	ldi	r18, 0xDA	; 218
    1526:	3f e0       	ldi	r19, 0x0F	; 15
    1528:	49 ec       	ldi	r20, 0xC9	; 201
    152a:	5f eb       	ldi	r21, 0xBF	; 191
    152c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__addsf3x>
    1530:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_round>
    1534:	0f 90       	pop	r0
    1536:	03 94       	inc	r0
    1538:	01 fc       	sbrc	r0, 1
    153a:	90 58       	subi	r25, 0x80	; 128
    153c:	ed eb       	ldi	r30, 0xBD	; 189
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__fp_powsodd>

00001544 <__fp_split3>:
    1544:	57 fd       	sbrc	r21, 7
    1546:	90 58       	subi	r25, 0x80	; 128
    1548:	44 0f       	add	r20, r20
    154a:	55 1f       	adc	r21, r21
    154c:	59 f0       	breq	.+22     	; 0x1564 <__fp_splitA+0x10>
    154e:	5f 3f       	cpi	r21, 0xFF	; 255
    1550:	71 f0       	breq	.+28     	; 0x156e <__fp_splitA+0x1a>
    1552:	47 95       	ror	r20

00001554 <__fp_splitA>:
    1554:	88 0f       	add	r24, r24
    1556:	97 fb       	bst	r25, 7
    1558:	99 1f       	adc	r25, r25
    155a:	61 f0       	breq	.+24     	; 0x1574 <__fp_splitA+0x20>
    155c:	9f 3f       	cpi	r25, 0xFF	; 255
    155e:	79 f0       	breq	.+30     	; 0x157e <__fp_splitA+0x2a>
    1560:	87 95       	ror	r24
    1562:	08 95       	ret
    1564:	12 16       	cp	r1, r18
    1566:	13 06       	cpc	r1, r19
    1568:	14 06       	cpc	r1, r20
    156a:	55 1f       	adc	r21, r21
    156c:	f2 cf       	rjmp	.-28     	; 0x1552 <__fp_split3+0xe>
    156e:	46 95       	lsr	r20
    1570:	f1 df       	rcall	.-30     	; 0x1554 <__fp_splitA>
    1572:	08 c0       	rjmp	.+16     	; 0x1584 <__fp_splitA+0x30>
    1574:	16 16       	cp	r1, r22
    1576:	17 06       	cpc	r1, r23
    1578:	18 06       	cpc	r1, r24
    157a:	99 1f       	adc	r25, r25
    157c:	f1 cf       	rjmp	.-30     	; 0x1560 <__fp_splitA+0xc>
    157e:	86 95       	lsr	r24
    1580:	71 05       	cpc	r23, r1
    1582:	61 05       	cpc	r22, r1
    1584:	08 94       	sec
    1586:	08 95       	ret

00001588 <__fp_zero>:
    1588:	e8 94       	clt

0000158a <__fp_szero>:
    158a:	bb 27       	eor	r27, r27
    158c:	66 27       	eor	r22, r22
    158e:	77 27       	eor	r23, r23
    1590:	cb 01       	movw	r24, r22
    1592:	97 f9       	bld	r25, 7
    1594:	08 95       	ret

00001596 <__gesf2>:
    1596:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fp_cmp>
    159a:	08 f4       	brcc	.+2      	; 0x159e <__gesf2+0x8>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	08 95       	ret

000015a0 <inverse>:
    15a0:	9b 01       	movw	r18, r22
    15a2:	ac 01       	movw	r20, r24
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 e8       	ldi	r24, 0x80	; 128
    15aa:	9f e3       	ldi	r25, 0x3F	; 63
    15ac:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__divsf3>

000015b0 <lround>:
    15b0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_splitA>
    15b4:	58 f1       	brcs	.+86     	; 0x160c <lround+0x5c>
    15b6:	9e 57       	subi	r25, 0x7E	; 126
    15b8:	60 f1       	brcs	.+88     	; 0x1612 <lround+0x62>
    15ba:	98 51       	subi	r25, 0x18	; 24
    15bc:	a0 f0       	brcs	.+40     	; 0x15e6 <lround+0x36>
    15be:	e9 f0       	breq	.+58     	; 0x15fa <lround+0x4a>
    15c0:	98 30       	cpi	r25, 0x08	; 8
    15c2:	20 f5       	brcc	.+72     	; 0x160c <lround+0x5c>
    15c4:	09 2e       	mov	r0, r25
    15c6:	99 27       	eor	r25, r25
    15c8:	66 0f       	add	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	d1 f7       	brne	.-12     	; 0x15c8 <lround+0x18>
    15d4:	12 c0       	rjmp	.+36     	; 0x15fa <lround+0x4a>
    15d6:	06 2e       	mov	r0, r22
    15d8:	67 2f       	mov	r22, r23
    15da:	78 2f       	mov	r23, r24
    15dc:	88 27       	eor	r24, r24
    15de:	98 5f       	subi	r25, 0xF8	; 248
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <lround+0x36>
    15e2:	00 0c       	add	r0, r0
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <lround+0x44>
    15e6:	99 3f       	cpi	r25, 0xF9	; 249
    15e8:	b4 f3       	brlt	.-20     	; 0x15d6 <lround+0x26>
    15ea:	86 95       	lsr	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	93 95       	inc	r25
    15f2:	d9 f7       	brne	.-10     	; 0x15ea <lround+0x3a>
    15f4:	61 1d       	adc	r22, r1
    15f6:	71 1d       	adc	r23, r1
    15f8:	81 1d       	adc	r24, r1
    15fa:	3e f4       	brtc	.+14     	; 0x160a <lround+0x5a>
    15fc:	90 95       	com	r25
    15fe:	80 95       	com	r24
    1600:	70 95       	com	r23
    1602:	61 95       	neg	r22
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	08 95       	ret
    160c:	68 94       	set
    160e:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_szero>
    1612:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__fp_zero>

00001616 <__mulsf3>:
    1616:	0e 94 1e 0b 	call	0x163c	; 0x163c <__mulsf3x>
    161a:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>
    161e:	0e 94 44 0a 	call	0x1488	; 0x1488 <__fp_pscA>
    1622:	38 f0       	brcs	.+14     	; 0x1632 <__mulsf3+0x1c>
    1624:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__fp_pscB>
    1628:	20 f0       	brcs	.+8      	; 0x1632 <__mulsf3+0x1c>
    162a:	95 23       	and	r25, r21
    162c:	11 f0       	breq	.+4      	; 0x1632 <__mulsf3+0x1c>
    162e:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_inf>
    1632:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_nan>
    1636:	11 24       	eor	r1, r1
    1638:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_szero>

0000163c <__mulsf3x>:
    163c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__fp_split3>
    1640:	70 f3       	brcs	.-36     	; 0x161e <__mulsf3+0x8>

00001642 <__mulsf3_pse>:
    1642:	95 9f       	mul	r25, r21
    1644:	c1 f3       	breq	.-16     	; 0x1636 <__mulsf3+0x20>
    1646:	95 0f       	add	r25, r21
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	55 1f       	adc	r21, r21
    164c:	62 9f       	mul	r22, r18
    164e:	f0 01       	movw	r30, r0
    1650:	72 9f       	mul	r23, r18
    1652:	bb 27       	eor	r27, r27
    1654:	f0 0d       	add	r31, r0
    1656:	b1 1d       	adc	r27, r1
    1658:	63 9f       	mul	r22, r19
    165a:	aa 27       	eor	r26, r26
    165c:	f0 0d       	add	r31, r0
    165e:	b1 1d       	adc	r27, r1
    1660:	aa 1f       	adc	r26, r26
    1662:	64 9f       	mul	r22, r20
    1664:	66 27       	eor	r22, r22
    1666:	b0 0d       	add	r27, r0
    1668:	a1 1d       	adc	r26, r1
    166a:	66 1f       	adc	r22, r22
    166c:	82 9f       	mul	r24, r18
    166e:	22 27       	eor	r18, r18
    1670:	b0 0d       	add	r27, r0
    1672:	a1 1d       	adc	r26, r1
    1674:	62 1f       	adc	r22, r18
    1676:	73 9f       	mul	r23, r19
    1678:	b0 0d       	add	r27, r0
    167a:	a1 1d       	adc	r26, r1
    167c:	62 1f       	adc	r22, r18
    167e:	83 9f       	mul	r24, r19
    1680:	a0 0d       	add	r26, r0
    1682:	61 1d       	adc	r22, r1
    1684:	22 1f       	adc	r18, r18
    1686:	74 9f       	mul	r23, r20
    1688:	33 27       	eor	r19, r19
    168a:	a0 0d       	add	r26, r0
    168c:	61 1d       	adc	r22, r1
    168e:	23 1f       	adc	r18, r19
    1690:	84 9f       	mul	r24, r20
    1692:	60 0d       	add	r22, r0
    1694:	21 1d       	adc	r18, r1
    1696:	82 2f       	mov	r24, r18
    1698:	76 2f       	mov	r23, r22
    169a:	6a 2f       	mov	r22, r26
    169c:	11 24       	eor	r1, r1
    169e:	9f 57       	subi	r25, 0x7F	; 127
    16a0:	50 40       	sbci	r21, 0x00	; 0
    16a2:	9a f0       	brmi	.+38     	; 0x16ca <__mulsf3_pse+0x88>
    16a4:	f1 f0       	breq	.+60     	; 0x16e2 <__mulsf3_pse+0xa0>
    16a6:	88 23       	and	r24, r24
    16a8:	4a f0       	brmi	.+18     	; 0x16bc <__mulsf3_pse+0x7a>
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	bb 1f       	adc	r27, r27
    16b0:	66 1f       	adc	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	91 50       	subi	r25, 0x01	; 1
    16b8:	50 40       	sbci	r21, 0x00	; 0
    16ba:	a9 f7       	brne	.-22     	; 0x16a6 <__mulsf3_pse+0x64>
    16bc:	9e 3f       	cpi	r25, 0xFE	; 254
    16be:	51 05       	cpc	r21, r1
    16c0:	80 f0       	brcs	.+32     	; 0x16e2 <__mulsf3_pse+0xa0>
    16c2:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <__fp_inf>
    16c6:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__fp_szero>
    16ca:	5f 3f       	cpi	r21, 0xFF	; 255
    16cc:	e4 f3       	brlt	.-8      	; 0x16c6 <__mulsf3_pse+0x84>
    16ce:	98 3e       	cpi	r25, 0xE8	; 232
    16d0:	d4 f3       	brlt	.-12     	; 0x16c6 <__mulsf3_pse+0x84>
    16d2:	86 95       	lsr	r24
    16d4:	77 95       	ror	r23
    16d6:	67 95       	ror	r22
    16d8:	b7 95       	ror	r27
    16da:	f7 95       	ror	r31
    16dc:	e7 95       	ror	r30
    16de:	9f 5f       	subi	r25, 0xFF	; 255
    16e0:	c1 f7       	brne	.-16     	; 0x16d2 <__mulsf3_pse+0x90>
    16e2:	fe 2b       	or	r31, r30
    16e4:	88 0f       	add	r24, r24
    16e6:	91 1d       	adc	r25, r1
    16e8:	96 95       	lsr	r25
    16ea:	87 95       	ror	r24
    16ec:	97 f9       	bld	r25, 7
    16ee:	08 95       	ret

000016f0 <sin>:
    16f0:	9f 93       	push	r25
    16f2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__fp_rempio2>
    16f6:	0f 90       	pop	r0
    16f8:	07 fc       	sbrc	r0, 7
    16fa:	ee 5f       	subi	r30, 0xFE	; 254
    16fc:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__fp_sinus>
    1700:	19 f4       	brne	.+6      	; 0x1708 <sin+0x18>
    1702:	16 f4       	brtc	.+4      	; 0x1708 <sin+0x18>
    1704:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__fp_nan>
    1708:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__fp_mpack>

0000170c <sqrt>:
    170c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fp_splitA>
    1710:	b8 f3       	brcs	.-18     	; 0x1700 <sin+0x10>
    1712:	99 23       	and	r25, r25
    1714:	c9 f3       	breq	.-14     	; 0x1708 <sin+0x18>
    1716:	b6 f3       	brts	.-20     	; 0x1704 <sin+0x14>
    1718:	9f 57       	subi	r25, 0x7F	; 127
    171a:	55 0b       	sbc	r21, r21
    171c:	87 ff       	sbrs	r24, 7
    171e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_norm2>
    1722:	00 24       	eor	r0, r0
    1724:	a0 e6       	ldi	r26, 0x60	; 96
    1726:	40 ea       	ldi	r20, 0xA0	; 160
    1728:	90 01       	movw	r18, r0
    172a:	80 58       	subi	r24, 0x80	; 128
    172c:	56 95       	lsr	r21
    172e:	97 95       	ror	r25
    1730:	28 f4       	brcc	.+10     	; 0x173c <sqrt+0x30>
    1732:	80 5c       	subi	r24, 0xC0	; 192
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	20 f0       	brcs	.+8      	; 0x1744 <sqrt+0x38>
    173c:	26 17       	cp	r18, r22
    173e:	37 07       	cpc	r19, r23
    1740:	48 07       	cpc	r20, r24
    1742:	30 f4       	brcc	.+12     	; 0x1750 <sqrt+0x44>
    1744:	62 1b       	sub	r22, r18
    1746:	73 0b       	sbc	r23, r19
    1748:	84 0b       	sbc	r24, r20
    174a:	20 29       	or	r18, r0
    174c:	31 29       	or	r19, r1
    174e:	4a 2b       	or	r20, r26
    1750:	a6 95       	lsr	r26
    1752:	17 94       	ror	r1
    1754:	07 94       	ror	r0
    1756:	20 25       	eor	r18, r0
    1758:	31 25       	eor	r19, r1
    175a:	4a 27       	eor	r20, r26
    175c:	58 f7       	brcc	.-42     	; 0x1734 <sqrt+0x28>
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	20 f0       	brcs	.+8      	; 0x176e <sqrt+0x62>
    1766:	26 17       	cp	r18, r22
    1768:	37 07       	cpc	r19, r23
    176a:	48 07       	cpc	r20, r24
    176c:	30 f4       	brcc	.+12     	; 0x177a <sqrt+0x6e>
    176e:	62 0b       	sbc	r22, r18
    1770:	73 0b       	sbc	r23, r19
    1772:	84 0b       	sbc	r24, r20
    1774:	20 0d       	add	r18, r0
    1776:	31 1d       	adc	r19, r1
    1778:	41 1d       	adc	r20, r1
    177a:	a0 95       	com	r26
    177c:	81 f7       	brne	.-32     	; 0x175e <sqrt+0x52>
    177e:	b9 01       	movw	r22, r18
    1780:	84 2f       	mov	r24, r20
    1782:	91 58       	subi	r25, 0x81	; 129
    1784:	88 0f       	add	r24, r24
    1786:	96 95       	lsr	r25
    1788:	87 95       	ror	r24
    178a:	08 95       	ret

0000178c <square>:
    178c:	9b 01       	movw	r18, r22
    178e:	ac 01       	movw	r20, r24
    1790:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__mulsf3>

00001794 <__fp_mpack>:
    1794:	9f 3f       	cpi	r25, 0xFF	; 255
    1796:	31 f0       	breq	.+12     	; 0x17a4 <__fp_mpack_finite+0xc>

00001798 <__fp_mpack_finite>:
    1798:	91 50       	subi	r25, 0x01	; 1
    179a:	20 f4       	brcc	.+8      	; 0x17a4 <__fp_mpack_finite+0xc>
    179c:	87 95       	ror	r24
    179e:	77 95       	ror	r23
    17a0:	67 95       	ror	r22
    17a2:	b7 95       	ror	r27
    17a4:	88 0f       	add	r24, r24
    17a6:	91 1d       	adc	r25, r1
    17a8:	96 95       	lsr	r25
    17aa:	87 95       	ror	r24
    17ac:	97 f9       	bld	r25, 7
    17ae:	08 95       	ret

000017b0 <__fp_norm2>:
    17b0:	91 50       	subi	r25, 0x01	; 1
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	66 0f       	add	r22, r22
    17b6:	77 1f       	adc	r23, r23
    17b8:	88 1f       	adc	r24, r24
    17ba:	d2 f7       	brpl	.-12     	; 0x17b0 <__fp_norm2>
    17bc:	08 95       	ret

000017be <__divmodhi4>:
    17be:	97 fb       	bst	r25, 7
    17c0:	07 2e       	mov	r0, r23
    17c2:	16 f4       	brtc	.+4      	; 0x17c8 <__divmodhi4+0xa>
    17c4:	00 94       	com	r0
    17c6:	07 d0       	rcall	.+14     	; 0x17d6 <__divmodhi4_neg1>
    17c8:	77 fd       	sbrc	r23, 7
    17ca:	09 d0       	rcall	.+18     	; 0x17de <__divmodhi4_neg2>
    17cc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__udivmodhi4>
    17d0:	07 fc       	sbrc	r0, 7
    17d2:	05 d0       	rcall	.+10     	; 0x17de <__divmodhi4_neg2>
    17d4:	3e f4       	brtc	.+14     	; 0x17e4 <__divmodhi4_exit>

000017d6 <__divmodhi4_neg1>:
    17d6:	90 95       	com	r25
    17d8:	81 95       	neg	r24
    17da:	9f 4f       	sbci	r25, 0xFF	; 255
    17dc:	08 95       	ret

000017de <__divmodhi4_neg2>:
    17de:	70 95       	com	r23
    17e0:	61 95       	neg	r22
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255

000017e4 <__divmodhi4_exit>:
    17e4:	08 95       	ret

000017e6 <__udivmodhi4>:
    17e6:	aa 1b       	sub	r26, r26
    17e8:	bb 1b       	sub	r27, r27
    17ea:	51 e1       	ldi	r21, 0x11	; 17
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <__udivmodhi4_ep>

000017ee <__udivmodhi4_loop>:
    17ee:	aa 1f       	adc	r26, r26
    17f0:	bb 1f       	adc	r27, r27
    17f2:	a6 17       	cp	r26, r22
    17f4:	b7 07       	cpc	r27, r23
    17f6:	10 f0       	brcs	.+4      	; 0x17fc <__udivmodhi4_ep>
    17f8:	a6 1b       	sub	r26, r22
    17fa:	b7 0b       	sbc	r27, r23

000017fc <__udivmodhi4_ep>:
    17fc:	88 1f       	adc	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	5a 95       	dec	r21
    1802:	a9 f7       	brne	.-22     	; 0x17ee <__udivmodhi4_loop>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	08 95       	ret

0000180e <sscanf>:
    180e:	ae e0       	ldi	r26, 0x0E	; 14
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ed e0       	ldi	r30, 0x0D	; 13
    1814:	fc e0       	ldi	r31, 0x0C	; 12
    1816:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x20>
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	8c 83       	std	Y+4, r24	; 0x04
    181e:	8b 89       	ldd	r24, Y+19	; 0x13
    1820:	9c 89       	ldd	r25, Y+20	; 0x14
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	ae 01       	movw	r20, r28
    1828:	49 5e       	subi	r20, 0xE9	; 233
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	ce 01       	movw	r24, r28
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <vfscanf>
    1838:	2e 96       	adiw	r28, 0x0e	; 14
    183a:	e2 e0       	ldi	r30, 0x02	; 2
    183c:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x20>

00001840 <putval>:
    1840:	20 fd       	sbrc	r18, 0
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <putval+0x16>
    1844:	fc 01       	movw	r30, r24
    1846:	23 fd       	sbrc	r18, 3
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <putval+0x14>
    184a:	22 ff       	sbrs	r18, 2
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <putval+0x12>
    184e:	73 83       	std	Z+3, r23	; 0x03
    1850:	62 83       	std	Z+2, r22	; 0x02
    1852:	51 83       	std	Z+1, r21	; 0x01
    1854:	40 83       	st	Z, r20
    1856:	08 95       	ret

00001858 <mulacc>:
    1858:	44 fd       	sbrc	r20, 4
    185a:	10 c0       	rjmp	.+32     	; 0x187c <mulacc+0x24>
    185c:	46 fd       	sbrc	r20, 6
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <mulacc+0x28>
    1860:	db 01       	movw	r26, r22
    1862:	fc 01       	movw	r30, r24
    1864:	aa 0f       	add	r26, r26
    1866:	bb 1f       	adc	r27, r27
    1868:	ee 1f       	adc	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	10 94       	com	r1
    186e:	d1 f7       	brne	.-12     	; 0x1864 <mulacc+0xc>
    1870:	6a 0f       	add	r22, r26
    1872:	7b 1f       	adc	r23, r27
    1874:	8e 1f       	adc	r24, r30
    1876:	9f 1f       	adc	r25, r31
    1878:	31 e0       	ldi	r19, 0x01	; 1
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <mulacc+0x2a>
    187c:	33 e0       	ldi	r19, 0x03	; 3
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <mulacc+0x2a>
    1880:	34 e0       	ldi	r19, 0x04	; 4
    1882:	66 0f       	add	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	31 50       	subi	r19, 0x01	; 1
    188c:	d1 f7       	brne	.-12     	; 0x1882 <mulacc+0x2a>
    188e:	62 0f       	add	r22, r18
    1890:	71 1d       	adc	r23, r1
    1892:	81 1d       	adc	r24, r1
    1894:	91 1d       	adc	r25, r1
    1896:	08 95       	ret

00001898 <skip_spaces>:
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	8c 01       	movw	r16, r24
    18a2:	c8 01       	movw	r24, r16
    18a4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    18a8:	ec 01       	movw	r28, r24
    18aa:	97 fd       	sbrc	r25, 7
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <skip_spaces+0x26>
    18ae:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <isspace>
    18b2:	89 2b       	or	r24, r25
    18b4:	b1 f7       	brne	.-20     	; 0x18a2 <skip_spaces+0xa>
    18b6:	b8 01       	movw	r22, r16
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <ungetc>
    18be:	ce 01       	movw	r24, r28
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	08 95       	ret

000018ca <conv_int>:
    18ca:	a1 e0       	ldi	r26, 0x01	; 1
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e6       	ldi	r30, 0x6B	; 107
    18d0:	fc e0       	ldi	r31, 0x0C	; 12
    18d2:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <__prologue_saves__+0xc>
    18d6:	8c 01       	movw	r16, r24
    18d8:	c6 2e       	mov	r12, r22
    18da:	7a 01       	movw	r14, r20
    18dc:	29 83       	std	Y+1, r18	; 0x01
    18de:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    18e2:	ac 01       	movw	r20, r24
    18e4:	55 27       	eor	r21, r21
    18e6:	29 81       	ldd	r18, Y+1	; 0x01
    18e8:	4b 32       	cpi	r20, 0x2B	; 43
    18ea:	51 05       	cpc	r21, r1
    18ec:	21 f0       	breq	.+8      	; 0x18f6 <conv_int+0x2c>
    18ee:	4d 32       	cpi	r20, 0x2D	; 45
    18f0:	51 05       	cpc	r21, r1
    18f2:	69 f4       	brne	.+26     	; 0x190e <conv_int+0x44>
    18f4:	20 68       	ori	r18, 0x80	; 128
    18f6:	ca 94       	dec	r12
    18f8:	c1 10       	cpse	r12, r1
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <conv_int+0x36>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	76 c0       	rjmp	.+236    	; 0x19ec <conv_int+0x122>
    1900:	c8 01       	movw	r24, r16
    1902:	29 83       	std	Y+1, r18	; 0x01
    1904:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	97 fd       	sbrc	r25, 7
    190c:	f7 cf       	rjmp	.-18     	; 0x18fc <conv_int+0x32>
    190e:	32 2f       	mov	r19, r18
    1910:	3d 7f       	andi	r19, 0xFD	; 253
    1912:	d3 2e       	mov	r13, r19
    1914:	32 2f       	mov	r19, r18
    1916:	30 73       	andi	r19, 0x30	; 48
    1918:	49 f5       	brne	.+82     	; 0x196c <conv_int+0xa2>
    191a:	80 33       	cpi	r24, 0x30	; 48
    191c:	39 f5       	brne	.+78     	; 0x196c <conv_int+0xa2>
    191e:	bb 24       	eor	r11, r11
    1920:	ba 94       	dec	r11
    1922:	bc 0c       	add	r11, r12
    1924:	09 f4       	brne	.+2      	; 0x1928 <conv_int+0x5e>
    1926:	4e c0       	rjmp	.+156    	; 0x19c4 <conv_int+0xfa>
    1928:	c8 01       	movw	r24, r16
    192a:	29 83       	std	Y+1, r18	; 0x01
    192c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1930:	29 81       	ldd	r18, Y+1	; 0x01
    1932:	97 fd       	sbrc	r25, 7
    1934:	47 c0       	rjmp	.+142    	; 0x19c4 <conv_int+0xfa>
    1936:	38 2f       	mov	r19, r24
    1938:	3f 7d       	andi	r19, 0xDF	; 223
    193a:	38 35       	cpi	r19, 0x58	; 88
    193c:	69 f4       	brne	.+26     	; 0x1958 <conv_int+0x8e>
    193e:	8d 2d       	mov	r24, r13
    1940:	82 64       	ori	r24, 0x42	; 66
    1942:	d8 2e       	mov	r13, r24
    1944:	ca 94       	dec	r12
    1946:	ca 94       	dec	r12
    1948:	cc 20       	and	r12, r12
    194a:	e1 f1       	breq	.+120    	; 0x19c4 <conv_int+0xfa>
    194c:	c8 01       	movw	r24, r16
    194e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1952:	97 ff       	sbrs	r25, 7
    1954:	0b c0       	rjmp	.+22     	; 0x196c <conv_int+0xa2>
    1956:	36 c0       	rjmp	.+108    	; 0x19c4 <conv_int+0xfa>
    1958:	26 ff       	sbrs	r18, 6
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <conv_int+0x9a>
    195c:	2d 2d       	mov	r18, r13
    195e:	22 60       	ori	r18, 0x02	; 2
    1960:	d2 2e       	mov	r13, r18
    1962:	03 c0       	rjmp	.+6      	; 0x196a <conv_int+0xa0>
    1964:	3d 2d       	mov	r19, r13
    1966:	32 61       	ori	r19, 0x12	; 18
    1968:	d3 2e       	mov	r13, r19
    196a:	cb 2c       	mov	r12, r11
    196c:	81 2c       	mov	r8, r1
    196e:	91 2c       	mov	r9, r1
    1970:	54 01       	movw	r10, r8
    1972:	20 ed       	ldi	r18, 0xD0	; 208
    1974:	28 0f       	add	r18, r24
    1976:	28 30       	cpi	r18, 0x08	; 8
    1978:	80 f0       	brcs	.+32     	; 0x199a <conv_int+0xd0>
    197a:	d4 fe       	sbrs	r13, 4
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <conv_int+0xbc>
    197e:	b8 01       	movw	r22, r16
    1980:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <ungetc>
    1984:	1c c0       	rjmp	.+56     	; 0x19be <conv_int+0xf4>
    1986:	2a 30       	cpi	r18, 0x0A	; 10
    1988:	40 f0       	brcs	.+16     	; 0x199a <conv_int+0xd0>
    198a:	d6 fe       	sbrs	r13, 6
    198c:	f8 cf       	rjmp	.-16     	; 0x197e <conv_int+0xb4>
    198e:	2f 7d       	andi	r18, 0xDF	; 223
    1990:	3f ee       	ldi	r19, 0xEF	; 239
    1992:	32 0f       	add	r19, r18
    1994:	36 30       	cpi	r19, 0x06	; 6
    1996:	98 f7       	brcc	.-26     	; 0x197e <conv_int+0xb4>
    1998:	27 50       	subi	r18, 0x07	; 7
    199a:	4d 2d       	mov	r20, r13
    199c:	c5 01       	movw	r24, r10
    199e:	b4 01       	movw	r22, r8
    19a0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <mulacc>
    19a4:	4b 01       	movw	r8, r22
    19a6:	5c 01       	movw	r10, r24
    19a8:	8d 2d       	mov	r24, r13
    19aa:	82 60       	ori	r24, 0x02	; 2
    19ac:	d8 2e       	mov	r13, r24
    19ae:	ca 94       	dec	r12
    19b0:	cc 20       	and	r12, r12
    19b2:	59 f0       	breq	.+22     	; 0x19ca <conv_int+0x100>
    19b4:	c8 01       	movw	r24, r16
    19b6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    19ba:	97 ff       	sbrs	r25, 7
    19bc:	da cf       	rjmp	.-76     	; 0x1972 <conv_int+0xa8>
    19be:	d1 fc       	sbrc	r13, 1
    19c0:	04 c0       	rjmp	.+8      	; 0x19ca <conv_int+0x100>
    19c2:	9c cf       	rjmp	.-200    	; 0x18fc <conv_int+0x32>
    19c4:	81 2c       	mov	r8, r1
    19c6:	91 2c       	mov	r9, r1
    19c8:	54 01       	movw	r10, r8
    19ca:	d7 fe       	sbrs	r13, 7
    19cc:	08 c0       	rjmp	.+16     	; 0x19de <conv_int+0x114>
    19ce:	b0 94       	com	r11
    19d0:	a0 94       	com	r10
    19d2:	90 94       	com	r9
    19d4:	80 94       	com	r8
    19d6:	81 1c       	adc	r8, r1
    19d8:	91 1c       	adc	r9, r1
    19da:	a1 1c       	adc	r10, r1
    19dc:	b1 1c       	adc	r11, r1
    19de:	2d 2d       	mov	r18, r13
    19e0:	b5 01       	movw	r22, r10
    19e2:	a4 01       	movw	r20, r8
    19e4:	c7 01       	movw	r24, r14
    19e6:	0e 94 20 0c 	call	0x1840	; 0x1840 <putval>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	21 96       	adiw	r28, 0x01	; 1
    19ee:	ec e0       	ldi	r30, 0x0C	; 12
    19f0:	0c 94 5e 0f 	jmp	0x1ebc	; 0x1ebc <__epilogue_restores__+0xc>

000019f4 <conv_brk>:
    19f4:	a1 e2       	ldi	r26, 0x21	; 33
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e0 e0       	ldi	r30, 0x00	; 0
    19fa:	fd e0       	ldi	r31, 0x0D	; 13
    19fc:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <__prologue_saves__+0x8>
    1a00:	5c 01       	movw	r10, r24
    1a02:	7a 01       	movw	r14, r20
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	6c 01       	movw	r12, r24
    1a0a:	80 e2       	ldi	r24, 0x20	; 32
    1a0c:	f6 01       	movw	r30, r12
    1a0e:	11 92       	st	Z+, r1
    1a10:	8a 95       	dec	r24
    1a12:	e9 f7       	brne	.-6      	; 0x1a0e <conv_brk+0x1a>
    1a14:	f5 01       	movw	r30, r10
    1a16:	83 80       	ldd	r8, Z+3	; 0x03
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	71 2c       	mov	r7, r1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	a1 e0       	ldi	r26, 0x01	; 1
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	83 fc       	sbrc	r8, 3
    1a2a:	85 91       	lpm	r24, Z+
    1a2c:	83 fe       	sbrs	r8, 3
    1a2e:	81 91       	ld	r24, Z+
    1a30:	8f 01       	movw	r16, r30
    1a32:	98 2f       	mov	r25, r24
    1a34:	9f 01       	movw	r18, r30
    1a36:	81 11       	cpse	r24, r1
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <conv_brk+0x4c>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	7c c0       	rjmp	.+248    	; 0x1b38 <conv_brk+0x144>
    1a40:	8e 35       	cpi	r24, 0x5E	; 94
    1a42:	19 f4       	brne	.+6      	; 0x1a4a <conv_brk+0x56>
    1a44:	41 15       	cp	r20, r1
    1a46:	51 05       	cpc	r21, r1
    1a48:	49 f1       	breq	.+82     	; 0x1a9c <conv_brk+0xa8>
    1a4a:	e7 2f       	mov	r30, r23
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	e4 17       	cp	r30, r20
    1a50:	f5 07       	cpc	r31, r21
    1a52:	3c f4       	brge	.+14     	; 0x1a62 <conv_brk+0x6e>
    1a54:	8d 35       	cpi	r24, 0x5D	; 93
    1a56:	59 f1       	breq	.+86     	; 0x1aae <conv_brk+0xba>
    1a58:	8d 32       	cpi	r24, 0x2D	; 45
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <conv_brk+0x6e>
    1a5c:	77 20       	and	r7, r7
    1a5e:	01 f1       	breq	.+64     	; 0x1aa0 <conv_brk+0xac>
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <conv_brk+0x74>
    1a62:	71 10       	cpse	r7, r1
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <conv_brk+0x74>
    1a66:	98 2e       	mov	r9, r24
    1a68:	89 2f       	mov	r24, r25
    1a6a:	86 95       	lsr	r24
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	86 01       	movw	r16, r12
    1a72:	08 0f       	add	r16, r24
    1a74:	11 1d       	adc	r17, r1
    1a76:	89 2f       	mov	r24, r25
    1a78:	87 70       	andi	r24, 0x07	; 7
    1a7a:	3d 01       	movw	r6, r26
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <conv_brk+0x8c>
    1a7e:	66 0c       	add	r6, r6
    1a80:	8a 95       	dec	r24
    1a82:	ea f7       	brpl	.-6      	; 0x1a7e <conv_brk+0x8a>
    1a84:	f8 01       	movw	r30, r16
    1a86:	80 81       	ld	r24, Z
    1a88:	86 29       	or	r24, r6
    1a8a:	80 83       	st	Z, r24
    1a8c:	99 15       	cp	r25, r9
    1a8e:	59 f0       	breq	.+22     	; 0x1aa6 <conv_brk+0xb2>
    1a90:	99 15       	cp	r25, r9
    1a92:	10 f4       	brcc	.+4      	; 0x1a98 <conv_brk+0xa4>
    1a94:	9f 5f       	subi	r25, 0xFF	; 255
    1a96:	e8 cf       	rjmp	.-48     	; 0x1a68 <conv_brk+0x74>
    1a98:	91 50       	subi	r25, 0x01	; 1
    1a9a:	e6 cf       	rjmp	.-52     	; 0x1a68 <conv_brk+0x74>
    1a9c:	71 e0       	ldi	r23, 0x01	; 1
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <conv_brk+0xb4>
    1aa0:	77 24       	eor	r7, r7
    1aa2:	73 94       	inc	r7
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <conv_brk+0xb4>
    1aa6:	71 2c       	mov	r7, r1
    1aa8:	4f 5f       	subi	r20, 0xFF	; 255
    1aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1aac:	bc cf       	rjmp	.-136    	; 0x1a26 <conv_brk+0x32>
    1aae:	77 20       	and	r7, r7
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <conv_brk+0xc4>
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	80 62       	ori	r24, 0x20	; 32
    1ab6:	8e 83       	std	Y+6, r24	; 0x06
    1ab8:	71 11       	cpse	r23, r1
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <conv_brk+0xce>
    1abc:	99 24       	eor	r9, r9
    1abe:	93 94       	inc	r9
    1ac0:	16 c0       	rjmp	.+44     	; 0x1aee <conv_brk+0xfa>
    1ac2:	f6 01       	movw	r30, r12
    1ac4:	9e 01       	movw	r18, r28
    1ac6:	2f 5d       	subi	r18, 0xDF	; 223
    1ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	80 95       	com	r24
    1ace:	81 93       	st	Z+, r24
    1ad0:	e2 17       	cp	r30, r18
    1ad2:	f3 07       	cpc	r31, r19
    1ad4:	d1 f7       	brne	.-12     	; 0x1aca <conv_brk+0xd6>
    1ad6:	f2 cf       	rjmp	.-28     	; 0x1abc <conv_brk+0xc8>
    1ad8:	e1 14       	cp	r14, r1
    1ada:	f1 04       	cpc	r15, r1
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <conv_brk+0xf4>
    1ade:	f7 01       	movw	r30, r14
    1ae0:	80 83       	st	Z, r24
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	61 50       	subi	r22, 0x01	; 1
    1aea:	91 2c       	mov	r9, r1
    1aec:	f9 f0       	breq	.+62     	; 0x1b2c <conv_brk+0x138>
    1aee:	c5 01       	movw	r24, r10
    1af0:	69 a3       	std	Y+33, r22	; 0x21
    1af2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1af6:	69 a1       	ldd	r22, Y+33	; 0x21
    1af8:	97 fd       	sbrc	r25, 7
    1afa:	16 c0       	rjmp	.+44     	; 0x1b28 <conv_brk+0x134>
    1afc:	28 2f       	mov	r18, r24
    1afe:	26 95       	lsr	r18
    1b00:	26 95       	lsr	r18
    1b02:	26 95       	lsr	r18
    1b04:	f6 01       	movw	r30, r12
    1b06:	e2 0f       	add	r30, r18
    1b08:	f1 1d       	adc	r31, r1
    1b0a:	20 81       	ld	r18, Z
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	ac 01       	movw	r20, r24
    1b10:	47 70       	andi	r20, 0x07	; 7
    1b12:	55 27       	eor	r21, r21
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <conv_brk+0x126>
    1b16:	35 95       	asr	r19
    1b18:	27 95       	ror	r18
    1b1a:	4a 95       	dec	r20
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <conv_brk+0x122>
    1b1e:	20 fd       	sbrc	r18, 0
    1b20:	db cf       	rjmp	.-74     	; 0x1ad8 <conv_brk+0xe4>
    1b22:	b5 01       	movw	r22, r10
    1b24:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <ungetc>
    1b28:	91 10       	cpse	r9, r1
    1b2a:	87 cf       	rjmp	.-242    	; 0x1a3a <conv_brk+0x46>
    1b2c:	e1 14       	cp	r14, r1
    1b2e:	f1 04       	cpc	r15, r1
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <conv_brk+0x142>
    1b32:	f7 01       	movw	r30, r14
    1b34:	10 82       	st	Z, r1
    1b36:	c8 01       	movw	r24, r16
    1b38:	a1 96       	adiw	r28, 0x21	; 33
    1b3a:	ee e0       	ldi	r30, 0x0E	; 14
    1b3c:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__epilogue_restores__+0x8>

00001b40 <vfscanf>:
    1b40:	4f 92       	push	r4
    1b42:	5f 92       	push	r5
    1b44:	7f 92       	push	r7
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	1f 92       	push	r1
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	6c 01       	movw	r12, r24
    1b66:	2b 01       	movw	r4, r22
    1b68:	5a 01       	movw	r10, r20
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	17 82       	std	Z+7, r1	; 0x07
    1b6e:	16 82       	std	Z+6, r1	; 0x06
    1b70:	71 2c       	mov	r7, r1
    1b72:	f6 01       	movw	r30, r12
    1b74:	f3 80       	ldd	r15, Z+3	; 0x03
    1b76:	f2 01       	movw	r30, r4
    1b78:	f3 fc       	sbrc	r15, 3
    1b7a:	85 91       	lpm	r24, Z+
    1b7c:	f3 fe       	sbrs	r15, 3
    1b7e:	81 91       	ld	r24, Z+
    1b80:	38 2f       	mov	r19, r24
    1b82:	2f 01       	movw	r4, r30
    1b84:	88 23       	and	r24, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <vfscanf+0x4a>
    1b88:	f3 c0       	rjmp	.+486    	; 0x1d70 <vfscanf+0x230>
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	39 83       	std	Y+1, r19	; 0x01
    1b8e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <isspace>
    1b92:	39 81       	ldd	r19, Y+1	; 0x01
    1b94:	89 2b       	or	r24, r25
    1b96:	21 f0       	breq	.+8      	; 0x1ba0 <vfscanf+0x60>
    1b98:	c6 01       	movw	r24, r12
    1b9a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <skip_spaces>
    1b9e:	e9 cf       	rjmp	.-46     	; 0x1b72 <vfscanf+0x32>
    1ba0:	35 32       	cpi	r19, 0x25	; 37
    1ba2:	41 f4       	brne	.+16     	; 0x1bb4 <vfscanf+0x74>
    1ba4:	f2 01       	movw	r30, r4
    1ba6:	f3 fc       	sbrc	r15, 3
    1ba8:	35 91       	lpm	r19, Z+
    1baa:	f3 fe       	sbrs	r15, 3
    1bac:	31 91       	ld	r19, Z+
    1bae:	2f 01       	movw	r4, r30
    1bb0:	35 32       	cpi	r19, 0x25	; 37
    1bb2:	69 f4       	brne	.+26     	; 0x1bce <vfscanf+0x8e>
    1bb4:	c6 01       	movw	r24, r12
    1bb6:	39 83       	std	Y+1, r19	; 0x01
    1bb8:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1bbc:	39 81       	ldd	r19, Y+1	; 0x01
    1bbe:	97 fd       	sbrc	r25, 7
    1bc0:	d5 c0       	rjmp	.+426    	; 0x1d6c <vfscanf+0x22c>
    1bc2:	38 17       	cp	r19, r24
    1bc4:	b1 f2       	breq	.-84     	; 0x1b72 <vfscanf+0x32>
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <ungetc>
    1bcc:	d1 c0       	rjmp	.+418    	; 0x1d70 <vfscanf+0x230>
    1bce:	3a 32       	cpi	r19, 0x2A	; 42
    1bd0:	39 f4       	brne	.+14     	; 0x1be0 <vfscanf+0xa0>
    1bd2:	f3 fc       	sbrc	r15, 3
    1bd4:	35 91       	lpm	r19, Z+
    1bd6:	f3 fe       	sbrs	r15, 3
    1bd8:	31 91       	ld	r19, Z+
    1bda:	2f 01       	movw	r4, r30
    1bdc:	51 e0       	ldi	r21, 0x01	; 1
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <vfscanf+0xa2>
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	42 01       	movw	r8, r4
    1be4:	10 e0       	ldi	r17, 0x00	; 0
    1be6:	20 ed       	ldi	r18, 0xD0	; 208
    1be8:	23 0f       	add	r18, r19
    1bea:	2a 30       	cpi	r18, 0x0A	; 10
    1bec:	90 f4       	brcc	.+36     	; 0x1c12 <vfscanf+0xd2>
    1bee:	52 60       	ori	r21, 0x02	; 2
    1bf0:	61 2f       	mov	r22, r17
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	59 83       	std	Y+1, r21	; 0x01
    1bfc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <mulacc>
    1c00:	16 2f       	mov	r17, r22
    1c02:	f4 01       	movw	r30, r8
    1c04:	f3 fc       	sbrc	r15, 3
    1c06:	35 91       	lpm	r19, Z+
    1c08:	f3 fe       	sbrs	r15, 3
    1c0a:	31 91       	ld	r19, Z+
    1c0c:	4f 01       	movw	r8, r30
    1c0e:	59 81       	ldd	r21, Y+1	; 0x01
    1c10:	ea cf       	rjmp	.-44     	; 0x1be6 <vfscanf+0xa6>
    1c12:	05 2f       	mov	r16, r21
    1c14:	23 2f       	mov	r18, r19
    1c16:	24 01       	movw	r4, r8
    1c18:	51 ff       	sbrs	r21, 1
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <vfscanf+0xe2>
    1c1c:	11 11       	cpse	r17, r1
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <vfscanf+0xe4>
    1c20:	a7 c0       	rjmp	.+334    	; 0x1d70 <vfscanf+0x230>
    1c22:	1f ef       	ldi	r17, 0xFF	; 255
    1c24:	38 36       	cpi	r19, 0x68	; 104
    1c26:	19 f0       	breq	.+6      	; 0x1c2e <vfscanf+0xee>
    1c28:	3c 36       	cpi	r19, 0x6C	; 108
    1c2a:	59 f0       	breq	.+22     	; 0x1c42 <vfscanf+0x102>
    1c2c:	11 c0       	rjmp	.+34     	; 0x1c50 <vfscanf+0x110>
    1c2e:	f4 01       	movw	r30, r8
    1c30:	f3 fc       	sbrc	r15, 3
    1c32:	25 91       	lpm	r18, Z+
    1c34:	f3 fe       	sbrs	r15, 3
    1c36:	21 91       	ld	r18, Z+
    1c38:	2f 01       	movw	r4, r30
    1c3a:	28 36       	cpi	r18, 0x68	; 104
    1c3c:	49 f4       	brne	.+18     	; 0x1c50 <vfscanf+0x110>
    1c3e:	05 2f       	mov	r16, r21
    1c40:	08 60       	ori	r16, 0x08	; 8
    1c42:	04 60       	ori	r16, 0x04	; 4
    1c44:	f2 01       	movw	r30, r4
    1c46:	f3 fc       	sbrc	r15, 3
    1c48:	25 91       	lpm	r18, Z+
    1c4a:	f3 fe       	sbrs	r15, 3
    1c4c:	21 91       	ld	r18, Z+
    1c4e:	2f 01       	movw	r4, r30
    1c50:	22 23       	and	r18, r18
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <vfscanf+0x116>
    1c54:	8d c0       	rjmp	.+282    	; 0x1d70 <vfscanf+0x230>
    1c56:	62 2f       	mov	r22, r18
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	8c ed       	ldi	r24, 0xDC	; 220
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	29 83       	std	Y+1, r18	; 0x01
    1c60:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <strchr_P>
    1c64:	29 81       	ldd	r18, Y+1	; 0x01
    1c66:	89 2b       	or	r24, r25
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfscanf+0x12c>
    1c6a:	82 c0       	rjmp	.+260    	; 0x1d70 <vfscanf+0x230>
    1c6c:	00 fd       	sbrc	r16, 0
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <vfscanf+0x13e>
    1c70:	f5 01       	movw	r30, r10
    1c72:	e0 80       	ld	r14, Z
    1c74:	f1 80       	ldd	r15, Z+1	; 0x01
    1c76:	c5 01       	movw	r24, r10
    1c78:	02 96       	adiw	r24, 0x02	; 2
    1c7a:	5c 01       	movw	r10, r24
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <vfscanf+0x142>
    1c7e:	e1 2c       	mov	r14, r1
    1c80:	f1 2c       	mov	r15, r1
    1c82:	2e 36       	cpi	r18, 0x6E	; 110
    1c84:	51 f4       	brne	.+20     	; 0x1c9a <vfscanf+0x15a>
    1c86:	f6 01       	movw	r30, r12
    1c88:	46 81       	ldd	r20, Z+6	; 0x06
    1c8a:	57 81       	ldd	r21, Z+7	; 0x07
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	20 2f       	mov	r18, r16
    1c92:	c7 01       	movw	r24, r14
    1c94:	0e 94 20 0c 	call	0x1840	; 0x1840 <putval>
    1c98:	6c cf       	rjmp	.-296    	; 0x1b72 <vfscanf+0x32>
    1c9a:	23 36       	cpi	r18, 0x63	; 99
    1c9c:	91 f4       	brne	.+36     	; 0x1cc2 <vfscanf+0x182>
    1c9e:	01 ff       	sbrs	r16, 1
    1ca0:	11 e0       	ldi	r17, 0x01	; 1
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1ca8:	97 fd       	sbrc	r25, 7
    1caa:	60 c0       	rjmp	.+192    	; 0x1d6c <vfscanf+0x22c>
    1cac:	e1 14       	cp	r14, r1
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <vfscanf+0x17c>
    1cb2:	f7 01       	movw	r30, r14
    1cb4:	80 83       	st	Z, r24
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	7c 01       	movw	r14, r24
    1cbc:	11 50       	subi	r17, 0x01	; 1
    1cbe:	89 f7       	brne	.-30     	; 0x1ca2 <vfscanf+0x162>
    1cc0:	51 c0       	rjmp	.+162    	; 0x1d64 <vfscanf+0x224>
    1cc2:	2b 35       	cpi	r18, 0x5B	; 91
    1cc4:	59 f4       	brne	.+22     	; 0x1cdc <vfscanf+0x19c>
    1cc6:	92 01       	movw	r18, r4
    1cc8:	a7 01       	movw	r20, r14
    1cca:	61 2f       	mov	r22, r17
    1ccc:	c6 01       	movw	r24, r12
    1cce:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <conv_brk>
    1cd2:	2c 01       	movw	r4, r24
    1cd4:	89 2b       	or	r24, r25
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <vfscanf+0x19a>
    1cd8:	45 c0       	rjmp	.+138    	; 0x1d64 <vfscanf+0x224>
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <vfscanf+0x21a>
    1cdc:	c6 01       	movw	r24, r12
    1cde:	29 83       	std	Y+1, r18	; 0x01
    1ce0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <skip_spaces>
    1ce4:	29 81       	ldd	r18, Y+1	; 0x01
    1ce6:	97 fd       	sbrc	r25, 7
    1ce8:	41 c0       	rjmp	.+130    	; 0x1d6c <vfscanf+0x22c>
    1cea:	2f 36       	cpi	r18, 0x6F	; 111
    1cec:	59 f1       	breq	.+86     	; 0x1d44 <vfscanf+0x204>
    1cee:	28 f4       	brcc	.+10     	; 0x1cfa <vfscanf+0x1ba>
    1cf0:	24 36       	cpi	r18, 0x64	; 100
    1cf2:	31 f1       	breq	.+76     	; 0x1d40 <vfscanf+0x200>
    1cf4:	29 36       	cpi	r18, 0x69	; 105
    1cf6:	49 f1       	breq	.+82     	; 0x1d4a <vfscanf+0x20a>
    1cf8:	27 c0       	rjmp	.+78     	; 0x1d48 <vfscanf+0x208>
    1cfa:	23 37       	cpi	r18, 0x73	; 115
    1cfc:	69 f0       	breq	.+26     	; 0x1d18 <vfscanf+0x1d8>
    1cfe:	25 37       	cpi	r18, 0x75	; 117
    1d00:	f9 f0       	breq	.+62     	; 0x1d40 <vfscanf+0x200>
    1d02:	22 c0       	rjmp	.+68     	; 0x1d48 <vfscanf+0x208>
    1d04:	e1 14       	cp	r14, r1
    1d06:	f1 04       	cpc	r15, r1
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <vfscanf+0x1d4>
    1d0a:	f7 01       	movw	r30, r14
    1d0c:	80 82       	st	Z, r8
    1d0e:	c7 01       	movw	r24, r14
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	7c 01       	movw	r14, r24
    1d14:	11 50       	subi	r17, 0x01	; 1
    1d16:	71 f0       	breq	.+28     	; 0x1d34 <vfscanf+0x1f4>
    1d18:	c6 01       	movw	r24, r12
    1d1a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <fgetc>
    1d1e:	4c 01       	movw	r8, r24
    1d20:	97 fd       	sbrc	r25, 7
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <vfscanf+0x1f4>
    1d24:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <isspace>
    1d28:	89 2b       	or	r24, r25
    1d2a:	61 f3       	breq	.-40     	; 0x1d04 <vfscanf+0x1c4>
    1d2c:	b6 01       	movw	r22, r12
    1d2e:	c4 01       	movw	r24, r8
    1d30:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <ungetc>
    1d34:	e1 14       	cp	r14, r1
    1d36:	f1 04       	cpc	r15, r1
    1d38:	a9 f0       	breq	.+42     	; 0x1d64 <vfscanf+0x224>
    1d3a:	f7 01       	movw	r30, r14
    1d3c:	10 82       	st	Z, r1
    1d3e:	12 c0       	rjmp	.+36     	; 0x1d64 <vfscanf+0x224>
    1d40:	00 62       	ori	r16, 0x20	; 32
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <vfscanf+0x20a>
    1d44:	00 61       	ori	r16, 0x10	; 16
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <vfscanf+0x20a>
    1d48:	00 64       	ori	r16, 0x40	; 64
    1d4a:	20 2f       	mov	r18, r16
    1d4c:	a7 01       	movw	r20, r14
    1d4e:	61 2f       	mov	r22, r17
    1d50:	c6 01       	movw	r24, r12
    1d52:	0e 94 65 0c 	call	0x18ca	; 0x18ca <conv_int>
    1d56:	81 11       	cpse	r24, r1
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <vfscanf+0x224>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	83 81       	ldd	r24, Z+3	; 0x03
    1d5e:	80 73       	andi	r24, 0x30	; 48
    1d60:	29 f4       	brne	.+10     	; 0x1d6c <vfscanf+0x22c>
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <vfscanf+0x230>
    1d64:	00 fd       	sbrc	r16, 0
    1d66:	05 cf       	rjmp	.-502    	; 0x1b72 <vfscanf+0x32>
    1d68:	73 94       	inc	r7
    1d6a:	03 cf       	rjmp	.-506    	; 0x1b72 <vfscanf+0x32>
    1d6c:	77 20       	and	r7, r7
    1d6e:	19 f0       	breq	.+6      	; 0x1d76 <vfscanf+0x236>
    1d70:	87 2d       	mov	r24, r7
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfscanf+0x23a>
    1d76:	8f ef       	ldi	r24, 0xFF	; 255
    1d78:	9f ef       	ldi	r25, 0xFF	; 255
    1d7a:	0f 90       	pop	r0
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	ff 90       	pop	r15
    1d86:	ef 90       	pop	r14
    1d88:	df 90       	pop	r13
    1d8a:	cf 90       	pop	r12
    1d8c:	bf 90       	pop	r11
    1d8e:	af 90       	pop	r10
    1d90:	9f 90       	pop	r9
    1d92:	8f 90       	pop	r8
    1d94:	7f 90       	pop	r7
    1d96:	5f 90       	pop	r5
    1d98:	4f 90       	pop	r4
    1d9a:	08 95       	ret

00001d9c <isspace>:
    1d9c:	91 11       	cpse	r25, r1
    1d9e:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__ctype_isfalse>
    1da2:	80 32       	cpi	r24, 0x20	; 32
    1da4:	19 f0       	breq	.+6      	; 0x1dac <isspace+0x10>
    1da6:	89 50       	subi	r24, 0x09	; 9
    1da8:	85 50       	subi	r24, 0x05	; 5
    1daa:	c8 f7       	brcc	.-14     	; 0x1d9e <isspace+0x2>
    1dac:	08 95       	ret

00001dae <strchr_P>:
    1dae:	fc 01       	movw	r30, r24
    1db0:	05 90       	lpm	r0, Z+
    1db2:	06 16       	cp	r0, r22
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <strchr_P+0x10>
    1db6:	00 20       	and	r0, r0
    1db8:	d9 f7       	brne	.-10     	; 0x1db0 <strchr_P+0x2>
    1dba:	c0 01       	movw	r24, r0
    1dbc:	08 95       	ret
    1dbe:	31 97       	sbiw	r30, 0x01	; 1
    1dc0:	cf 01       	movw	r24, r30
    1dc2:	08 95       	ret

00001dc4 <fgetc>:
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	2b 81       	ldd	r18, Y+3	; 0x03
    1dcc:	20 ff       	sbrs	r18, 0
    1dce:	33 c0       	rjmp	.+102    	; 0x1e36 <fgetc+0x72>
    1dd0:	26 ff       	sbrs	r18, 6
    1dd2:	0a c0       	rjmp	.+20     	; 0x1de8 <fgetc+0x24>
    1dd4:	2f 7b       	andi	r18, 0xBF	; 191
    1dd6:	2b 83       	std	Y+3, r18	; 0x03
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9f 83       	std	Y+7, r25	; 0x07
    1de0:	8e 83       	std	Y+6, r24	; 0x06
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	29 c0       	rjmp	.+82     	; 0x1e3a <fgetc+0x76>
    1de8:	22 ff       	sbrs	r18, 2
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <fgetc+0x46>
    1dec:	e8 81       	ld	r30, Y
    1dee:	f9 81       	ldd	r31, Y+1	; 0x01
    1df0:	80 81       	ld	r24, Z
    1df2:	08 2e       	mov	r0, r24
    1df4:	00 0c       	add	r0, r0
    1df6:	99 0b       	sbc	r25, r25
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	19 f4       	brne	.+6      	; 0x1e02 <fgetc+0x3e>
    1dfc:	20 62       	ori	r18, 0x20	; 32
    1dfe:	2b 83       	std	Y+3, r18	; 0x03
    1e00:	1a c0       	rjmp	.+52     	; 0x1e36 <fgetc+0x72>
    1e02:	31 96       	adiw	r30, 0x01	; 1
    1e04:	f9 83       	std	Y+1, r31	; 0x01
    1e06:	e8 83       	st	Y, r30
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <fgetc+0x62>
    1e0a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e0c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1e0e:	09 95       	icall
    1e10:	97 ff       	sbrs	r25, 7
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <fgetc+0x62>
    1e14:	2b 81       	ldd	r18, Y+3	; 0x03
    1e16:	01 96       	adiw	r24, 0x01	; 1
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <fgetc+0x5a>
    1e1a:	80 e2       	ldi	r24, 0x20	; 32
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <fgetc+0x5c>
    1e1e:	80 e1       	ldi	r24, 0x10	; 16
    1e20:	82 2b       	or	r24, r18
    1e22:	8b 83       	std	Y+3, r24	; 0x03
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <fgetc+0x72>
    1e26:	2e 81       	ldd	r18, Y+6	; 0x06
    1e28:	3f 81       	ldd	r19, Y+7	; 0x07
    1e2a:	2f 5f       	subi	r18, 0xFF	; 255
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2e:	3f 83       	std	Y+7, r19	; 0x07
    1e30:	2e 83       	std	Y+6, r18	; 0x06
    1e32:	99 27       	eor	r25, r25
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <fgetc+0x76>
    1e36:	8f ef       	ldi	r24, 0xFF	; 255
    1e38:	9f ef       	ldi	r25, 0xFF	; 255
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <ungetc>:
    1e40:	fb 01       	movw	r30, r22
    1e42:	23 81       	ldd	r18, Z+3	; 0x03
    1e44:	20 ff       	sbrs	r18, 0
    1e46:	12 c0       	rjmp	.+36     	; 0x1e6c <ungetc+0x2c>
    1e48:	26 fd       	sbrc	r18, 6
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <ungetc+0x2c>
    1e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	93 07       	cpc	r25, r19
    1e52:	61 f0       	breq	.+24     	; 0x1e6c <ungetc+0x2c>
    1e54:	82 83       	std	Z+2, r24	; 0x02
    1e56:	2f 7d       	andi	r18, 0xDF	; 223
    1e58:	20 64       	ori	r18, 0x40	; 64
    1e5a:	23 83       	std	Z+3, r18	; 0x03
    1e5c:	26 81       	ldd	r18, Z+6	; 0x06
    1e5e:	37 81       	ldd	r19, Z+7	; 0x07
    1e60:	21 50       	subi	r18, 0x01	; 1
    1e62:	31 09       	sbc	r19, r1
    1e64:	37 83       	std	Z+7, r19	; 0x07
    1e66:	26 83       	std	Z+6, r18	; 0x06
    1e68:	99 27       	eor	r25, r25
    1e6a:	08 95       	ret
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	9f ef       	ldi	r25, 0xFF	; 255
    1e70:	08 95       	ret

00001e72 <__ctype_isfalse>:
    1e72:	99 27       	eor	r25, r25
    1e74:	88 27       	eor	r24, r24

00001e76 <__ctype_istrue>:
    1e76:	08 95       	ret

00001e78 <__prologue_saves__>:
    1e78:	2f 92       	push	r2
    1e7a:	3f 92       	push	r3
    1e7c:	4f 92       	push	r4
    1e7e:	5f 92       	push	r5
    1e80:	6f 92       	push	r6
    1e82:	7f 92       	push	r7
    1e84:	8f 92       	push	r8
    1e86:	9f 92       	push	r9
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	ca 1b       	sub	r28, r26
    1ea2:	db 0b       	sbc	r29, r27
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	09 94       	ijmp

00001eb0 <__epilogue_restores__>:
    1eb0:	2a 88       	ldd	r2, Y+18	; 0x12
    1eb2:	39 88       	ldd	r3, Y+17	; 0x11
    1eb4:	48 88       	ldd	r4, Y+16	; 0x10
    1eb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eba:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ebc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ebe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ec0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ec2:	b9 84       	ldd	r11, Y+9	; 0x09
    1ec4:	c8 84       	ldd	r12, Y+8	; 0x08
    1ec6:	df 80       	ldd	r13, Y+7	; 0x07
    1ec8:	ee 80       	ldd	r14, Y+6	; 0x06
    1eca:	fd 80       	ldd	r15, Y+5	; 0x05
    1ecc:	0c 81       	ldd	r16, Y+4	; 0x04
    1ece:	1b 81       	ldd	r17, Y+3	; 0x03
    1ed0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ed2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ed4:	ce 0f       	add	r28, r30
    1ed6:	d1 1d       	adc	r29, r1
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	de bf       	out	0x3e, r29	; 62
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	cd bf       	out	0x3d, r28	; 61
    1ee2:	ed 01       	movw	r28, r26
    1ee4:	08 95       	ret

00001ee6 <_exit>:
    1ee6:	f8 94       	cli

00001ee8 <__stop_program>:
    1ee8:	ff cf       	rjmp	.-2      	; 0x1ee8 <__stop_program>
