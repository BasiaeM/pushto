
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00001c66  00001cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800112  00800112  00001dac  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151d  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  000033a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000418  00000000  00000000  00003a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030e  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a30  00000000  00000000  000044b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00004ee2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_1>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_2>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_6>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	03 6e       	ori	r16, 0xE3	; 227
      56:	db 36       	cpi	r29, 0x6B	; 107
      58:	3d 9a       	sbi	0x07, 5	; 7
      5a:	99 99       	sbic	0x13, 1	; 19
      5c:	99 3d       	cpi	r25, 0xD9	; 217
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	3e 00       	.word	0x003e	; ????
      64:	00 00       	nop
      66:	80 3f       	cpi	r24, 0xF0	; 240
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	2c 7a       	andi	r18, 0xAC	; 172
      98:	a5 ba       	out	0x15, r10	; 21
      9a:	6c c5       	rjmp	.+2776   	; 0xb74 <obliczenie_nastaw+0xac>
      9c:	90 da       	rcall	.-2784   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
      9e:	3b 93       	.word	0x933b	; ????
      a0:	65 fc       	sbrc	r6, 5
      a2:	8b bc       	out	0x2b, r8	; 43
      a4:	53 f8       	bld	r5, 3
      a6:	10 fd       	sbrc	r17, 0
      a8:	3c 56       	subi	r19, 0x6C	; 108
      aa:	92 83       	std	Z+2, r25	; 0x02
      ac:	4d bd       	out	0x2d, r20	; 45
      ae:	87 9d       	mul	r24, r7
      b0:	3a b6       	in	r3, 0x3a	; 58
      b2:	3d cb       	rjmp	.-2438   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      b4:	c9 bf       	out	0x39, r28	; 57
      b6:	5b be       	out	0x3b, r5	; 59
      b8:	73 da       	rcall	.-2842   	; 0xfffff5a0 <__eeprom_end+0xff7ef5a0>
      ba:	0f c9       	rjmp	.-3554   	; 0xfffff2da <__eeprom_end+0xff7ef2da>
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 00       	.word	0x003f	; ????

000000dc <__trampolines_end>:
      dc:	63 64       	ori	r22, 0x43	; 67
      de:	69 6e       	ori	r22, 0xE9	; 233
      e0:	6f 70       	andi	r22, 0x0F	; 15
      e2:	73 75       	andi	r23, 0x53	; 83
      e4:	78 58       	subi	r23, 0x88	; 136
      e6:	5b 00       	.word	0x005b	; ????

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e6       	ldi	r26, 0x60	; 96
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e6 e6       	ldi	r30, 0x66	; 102
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 31       	cpi	r26, 0x12	; 18
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	21 e0       	ldi	r18, 0x01	; 1
     10c:	a2 e1       	ldi	r26, 0x12	; 18
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a7 34       	cpi	r26, 0x47	; 71
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 a9 06 	call	0xd52	; 0xd52 <main>
     11e:	0c 94 31 0e 	jmp	0x1c62	; 0x1c62 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <system_init>:
    

void system_init (void)
{	
	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
     126:	85 b7       	in	r24, 0x35	; 53
     128:	85 60       	ori	r24, 0x05	; 5
     12a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
     12c:	8b b7       	in	r24, 0x3b	; 59
     12e:	80 6c       	ori	r24, 0xC0	; 192
     130:	8b bf       	out	0x3b, r24	; 59
	
	/*inicjalizacja LCD*/
	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
     132:	8f ef       	ldi	r24, 0xFF	; 255
     134:	8a bb       	out	0x1a, r24	; 26
	encoder2.maskA=0b000001000;
	encoder2.maskB=0b000000010;
	encoder2.count=0;*/

	//inicjalizacja klawiatury
	keypad_A.i=0; //zerowanie wskaznika buforu
     136:	e2 e1       	ldi	r30, 0x12	; 18
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	13 8a       	std	Z+19, r1	; 0x13
     13c:	12 8a       	std	Z+18, r1	; 0x12
	keypad_A.flags='\0';
     13e:	14 8a       	std	Z+20, r1	; 0x14
	keypad_A.last_result = 0xFF;
     140:	81 83       	std	Z+1, r24	; 0x01

	telescope_A.update=0; //flaga aktualizacja nastaw
     142:	10 92 2e 01 	sts	0x012E, r1
     146:	10 92 2d 01 	sts	0x012D, r1

	//############# Timer1 16bit config ####################
	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
     14a:	9f b5       	in	r25, 0x2f	; 47
     14c:	9f bd       	out	0x2f, r25	; 47
 	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Mode = CTC, Prescaler = 64
     14e:	9e b5       	in	r25, 0x2e	; 46
     150:	9b 60       	ori	r25, 0x0B	; 11
     152:	9e bd       	out	0x2e, r25	; 46
	OCR1A = 31250;   // timer compare value 1Hz - 31250 
     154:	22 e1       	ldi	r18, 0x12	; 18
     156:	3a e7       	ldi	r19, 0x7A	; 122
     158:	3b bd       	out	0x2b, r19	; 43
     15a:	2a bd       	out	0x2a, r18	; 42
	TIMSK|=(1<<OCIE1A); //enable compare reg A interrupt
     15c:	99 b7       	in	r25, 0x39	; 57
     15e:	90 61       	ori	r25, 0x10	; 16
     160:	99 bf       	out	0x39, r25	; 57
	
    	sei(); // enable global interrupts
     162:	78 94       	sei

    	//dioda -test
    	DDRC = 0xFF;
     164:	84 bb       	out	0x14, r24	; 20
    	PORTC = 0xFF;
     166:	85 bb       	out	0x15, r24	; 21
     168:	08 95       	ret

0000016a <__vector_6>:
    	sscanf(buf1,"ala ma kota"); // dziala, moze byc uzywane
    	*/
}

ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
{
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	5f 93       	push	r21
     176:	6f 93       	push	r22
     178:	7f 93       	push	r23
     17a:	8f 93       	push	r24
     17c:	9f 93       	push	r25
     17e:	af 93       	push	r26
     180:	bf 93       	push	r27
	telescope_A.time++; //czas od kalibracji w sekundachs
     182:	80 91 2b 01 	lds	r24, 0x012B
     186:	90 91 2c 01 	lds	r25, 0x012C
     18a:	01 96       	adiw	r24, 0x01	; 1
     18c:	90 93 2c 01 	sts	0x012C, r25
     190:	80 93 2b 01 	sts	0x012B, r24
	if(telescope_A.time%10==0)
     194:	6a e0       	ldi	r22, 0x0A	; 10
     196:	70 e0       	ldi	r23, 0x00	; 0
     198:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>
     19c:	89 2b       	or	r24, r25
     19e:	31 f4       	brne	.+12     	; 0x1ac <__vector_6+0x42>
		telescope_A.update=1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	90 93 2e 01 	sts	0x012E, r25
     1a8:	80 93 2d 01 	sts	0x012D, r24
}
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <__vector_1>:

ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
{
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
	//direction(&encoder1);
}
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <__vector_2>:

ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
{
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
	//direction(&encoder2);
}
     1e2:	0f 90       	pop	r0
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	0f 90       	pop	r0
     1e8:	1f 90       	pop	r1
     1ea:	18 95       	reti

000001ec <lcdcmd>:
#include <util/delay.h>

void lcdcmd(unsigned char Dane)
{

LCD_PORT &= ~RS; //wysy≈Çanie polecenia
     1ec:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     1ee:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     1f0:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT &= 0x0f;
     1f2:	9b b3       	in	r25, 0x1b	; 27
     1f4:	9f 70       	andi	r25, 0x0F	; 15
     1f6:	9b bb       	out	0x1b, r25	; 27

LCD_PORT |= ((Dane ) & 0xf0);
     1f8:	9b b3       	in	r25, 0x1b	; 27
     1fa:	28 2f       	mov	r18, r24
     1fc:	20 7f       	andi	r18, 0xF0	; 240
     1fe:	92 2b       	or	r25, r18
     200:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     202:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     204:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     206:	e3 ef       	ldi	r30, 0xF3	; 243
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	31 97       	sbiw	r30, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcdcmd+0x1e>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <lcdcmd+0x24>
     210:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     212:	da 98       	cbi	0x1b, 2	; 27

LCD_PORT &= 0x0f;
     214:	9b b3       	in	r25, 0x1b	; 27
     216:	9f 70       	andi	r25, 0x0F	; 15
     218:	9b bb       	out	0x1b, r25	; 27

LCD_PORT  |= ((Dane<<4) &  0xf0);
     21a:	2b b3       	in	r18, 0x1b	; 27
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	8f 9f       	mul	r24, r31
     220:	c0 01       	movw	r24, r0
     222:	11 24       	eor	r1, r1
     224:	82 2b       	or	r24, r18
     226:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     228:	da 9a       	sbi	0x1b, 2	; 27
     22a:	83 ef       	ldi	r24, 0xF3	; 243
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <lcdcmd+0x42>
     232:	00 c0       	rjmp	.+0      	; 0x234 <lcdcmd+0x48>
     234:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     236:	da 98       	cbi	0x1b, 2	; 27
     238:	08 95       	ret

0000023a <lcdData>:


}
void lcdData(unsigned char l)
{
LCD_PORT |=RS;  //wysylanie danych
     23a:	d8 9a       	sbi	0x1b, 0	; 27
LCD_PORT &=~RW;
     23c:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  &=~EN;
     23e:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     240:	9b b3       	in	r25, 0x1b	; 27
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	9b bb       	out	0x1b, r25	; 27
LCD_PORT |=((l ) & 0xf0);
     246:	9b b3       	in	r25, 0x1b	; 27
     248:	28 2f       	mov	r18, r24
     24a:	20 7f       	andi	r18, 0xF0	; 240
     24c:	92 2b       	or	r25, r18
     24e:	9b bb       	out	0x1b, r25	; 27
LCD_PORT &=~RW;
     250:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT  |=EN;
     252:	da 9a       	sbi	0x1b, 2	; 27
     254:	e3 ef       	ldi	r30, 0xF3	; 243
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	f1 f7       	brne	.-4      	; 0x258 <lcdData+0x1e>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <lcdData+0x24>
     25e:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     260:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &= 0x0f;
     262:	9b b3       	in	r25, 0x1b	; 27
     264:	9f 70       	andi	r25, 0x0F	; 15
     266:	9b bb       	out	0x1b, r25	; 27
LCD_PORT  |= ((l<<4) &  0xf0);
     268:	2b b3       	in	r18, 0x1b	; 27
     26a:	f0 e1       	ldi	r31, 0x10	; 16
     26c:	8f 9f       	mul	r24, r31
     26e:	c0 01       	movw	r24, r0
     270:	11 24       	eor	r1, r1
     272:	82 2b       	or	r24, r18
     274:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     276:	da 9a       	sbi	0x1b, 2	; 27
     278:	83 ef       	ldi	r24, 0xF3	; 243
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcdData+0x42>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcdData+0x48>
     282:	00 00       	nop
_delay_ms(2);
LCD_PORT  &=~EN;
     284:	da 98       	cbi	0x1b, 2	; 27
     286:	08 95       	ret

00000288 <lcdInit>:

}

void lcdInit(void)
{
LCD_PORT &=~RS;
     288:	d8 98       	cbi	0x1b, 0	; 27
LCD_PORT  &=~EN;
     28a:	da 98       	cbi	0x1b, 2	; 27
LCD_PORT &=~RW;
     28c:	d9 98       	cbi	0x1b, 1	; 27
LCD_PORT |= 0x30;
     28e:	8b b3       	in	r24, 0x1b	; 27
     290:	80 63       	ori	r24, 0x30	; 48
     292:	8b bb       	out	0x1b, r24	; 27
     294:	8f e0       	ldi	r24, 0x0F	; 15
     296:	97 e2       	ldi	r25, 0x27	; 39
     298:	01 97       	sbiw	r24, 0x01	; 1
     29a:	f1 f7       	brne	.-4      	; 0x298 <lcdInit+0x10>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <lcdInit+0x16>
     29e:	00 00       	nop
_delay_ms(40);
LCD_PORT  |=EN;
     2a0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2a2:	da 98       	cbi	0x1b, 2	; 27
     2a4:	81 ee       	ldi	r24, 0xE1	; 225
     2a6:	94 e0       	ldi	r25, 0x04	; 4
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <lcdInit+0x20>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <lcdInit+0x26>
     2ae:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     2b0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2b2:	da 98       	cbi	0x1b, 2	; 27
     2b4:	81 ee       	ldi	r24, 0xE1	; 225
     2b6:	94 e0       	ldi	r25, 0x04	; 4
     2b8:	01 97       	sbiw	r24, 0x01	; 1
     2ba:	f1 f7       	brne	.-4      	; 0x2b8 <lcdInit+0x30>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <lcdInit+0x36>
     2be:	00 00       	nop
_delay_ms(5);
LCD_PORT  |=EN;
     2c0:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2c2:	da 98       	cbi	0x1b, 2	; 27
     2c4:	83 ef       	ldi	r24, 0xF3	; 243
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <lcdInit+0x40>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <lcdInit+0x46>
     2ce:	00 00       	nop
_delay_ms(2);

LCD_PORT &= 0x20;
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	80 72       	andi	r24, 0x20	; 32
     2d4:	8b bb       	out	0x1b, r24	; 27
LCD_PORT  |=EN;
     2d6:	da 9a       	sbi	0x1b, 2	; 27
LCD_PORT  &=~EN;
     2d8:	da 98       	cbi	0x1b, 2	; 27
lcdcmd(0x28);   //set data length 4 bit 2 line
     2da:	88 e2       	ldi	r24, 0x28	; 40
     2dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     2e0:	83 ed       	ldi	r24, 0xD3	; 211
     2e2:	90 e3       	ldi	r25, 0x30	; 48
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <lcdInit+0x5c>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <lcdInit+0x62>
     2ea:	00 00       	nop
_delay_ms(50);
lcdcmd(0x0E);   // set display on cursor on blink on
     2ec:	8e e0       	ldi	r24, 0x0E	; 14
     2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     2f2:	83 ed       	ldi	r24, 0xD3	; 211
     2f4:	90 e3       	ldi	r25, 0x30	; 48
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcdInit+0x6e>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcdInit+0x74>
     2fc:	00 00       	nop
_delay_ms(50);
lcdcmd(0x01); // clear lcd
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     304:	83 ed       	ldi	r24, 0xD3	; 211
     306:	90 e3       	ldi	r25, 0x30	; 48
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <lcdInit+0x80>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <lcdInit+0x86>
     30e:	00 00       	nop
_delay_ms(50);
lcdcmd(0x06);  // cursor shift direction
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     316:	83 ed       	ldi	r24, 0xD3	; 211
     318:	90 e3       	ldi	r25, 0x30	; 48
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <lcdInit+0x92>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <lcdInit+0x98>
     320:	00 00       	nop
_delay_ms(50);
lcdcmd(0x80);  //set ram address
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
     328:	83 ed       	ldi	r24, 0xD3	; 211
     32a:	90 e3       	ldi	r25, 0x30	; 48
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <lcdInit+0xa4>
     330:	00 c0       	rjmp	.+0      	; 0x332 <lcdInit+0xaa>
     332:	00 00       	nop
     334:	08 95       	ret

00000336 <prints>:
}



void prints(const char *s)
  {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	ec 01       	movw	r28, r24

    while (*s)
     33c:	89 91       	ld	r24, Y+
     33e:	88 23       	and	r24, r24
     340:	19 f0       	breq	.+6      	; 0x348 <prints+0x12>
      {
	 lcdData(*s);
     342:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
     346:	fa cf       	rjmp	.-12     	; 0x33c <prints+0x6>
	 s++;
      }
  }
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <gotoXy>:

void gotoXy(unsigned char  x,unsigned char y)
{
 if(x<40)
     34e:	88 32       	cpi	r24, 0x28	; 40
     350:	28 f4       	brcc	.+10     	; 0x35c <gotoXy+0xe>
 {
  if(y) x |= 0x40;
     352:	61 11       	cpse	r22, r1
     354:	80 64       	ori	r24, 0x40	; 64
  x |=0x80;
  lcdcmd(x);
     356:	80 68       	ori	r24, 0x80	; 128
     358:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <lcdcmd>
     35c:	08 95       	ret

0000035e <integerToLcd>:
  }

}
void integerToLcd(int integer )
{
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	1f 92       	push	r1
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	7c 01       	movw	r14, r24

unsigned char thousands,hundreds,tens,ones;
thousands = integer / 1000;
     372:	68 ee       	ldi	r22, 0xE8	; 232
     374:	73 e0       	ldi	r23, 0x03	; 3
     376:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>

    lcdData(thousands + 0x30);
     37a:	80 e3       	ldi	r24, 0x30	; 48
     37c:	86 0f       	add	r24, r22
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>

	 hundreds = ((integer - thousands*1000)-1) / 100;
     384:	88 e1       	ldi	r24, 0x18	; 24
     386:	9c ef       	ldi	r25, 0xFC	; 252
     388:	69 81       	ldd	r22, Y+1	; 0x01
     38a:	68 9f       	mul	r22, r24
     38c:	90 01       	movw	r18, r0
     38e:	69 9f       	mul	r22, r25
     390:	30 0d       	add	r19, r0
     392:	11 24       	eor	r1, r1
     394:	2e 0d       	add	r18, r14
     396:	3f 1d       	adc	r19, r15
     398:	c9 01       	movw	r24, r18
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	04 e6       	ldi	r16, 0x64	; 100
     39e:	10 e0       	ldi	r17, 0x00	; 0
     3a0:	b8 01       	movw	r22, r16
     3a2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>

	lcdData( hundreds + 0x30);
     3a6:	80 e3       	ldi	r24, 0x30	; 48
     3a8:	86 0f       	add	r24, r22
     3aa:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
tens=(integer%100)/10;
     3ae:	c7 01       	movw	r24, r14
     3b0:	b8 01       	movw	r22, r16
     3b2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>
     3b6:	0a e0       	ldi	r16, 0x0A	; 10
     3b8:	10 e0       	ldi	r17, 0x00	; 0
     3ba:	b8 01       	movw	r22, r16
     3bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>

	lcdData( tens + 0x30);
     3c0:	80 e3       	ldi	r24, 0x30	; 48
     3c2:	86 0f       	add	r24, r22
     3c4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcdData>
	ones=integer%10;
     3c8:	c7 01       	movw	r24, r14
     3ca:	b8 01       	movw	r22, r16
     3cc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__divmodhi4>

	lcdData( ones + 0x30);
     3d0:	80 5d       	subi	r24, 0xD0	; 208
}
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
tens=(integer%100)/10;

	lcdData( tens + 0x30);
	ones=integer%10;

	lcdData( ones + 0x30);
     3e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <lcdData>

000003e4 <lcd_clr>:
{
 if(x<40)
 {
  if(y) x |= 0x40;
  x |=0x80;
  lcdcmd(x);
     3e4:	80 e8       	ldi	r24, 0x80	; 128
     3e6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
}

void lcd_clr(void)
{
  gotoXy(0,0);
  prints("                ");
     3ea:	80 e6       	ldi	r24, 0x60	; 96
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
{
 if(x<40)
 {
  if(y) x |= 0x40;
  x |=0x80;
  lcdcmd(x);
     3f2:	80 ec       	ldi	r24, 0xC0	; 192
     3f4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcdcmd>
void lcd_clr(void)
{
  gotoXy(0,0);
  prints("                ");
  gotoXy(0,1);
  prints("                ");
     3f8:	80 e6       	ldi	r24, 0x60	; 96
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0c 94 9b 01 	jmp	0x336	; 0x336 <prints>

00000400 <keypad>:
#include "keypad.h"


char keypad(struct Key *klaw) 
 {
     400:	fc 01       	movw	r30, r24
	klaw->result=0;
     402:	10 82       	st	Z, r1
	KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
     404:	80 ef       	ldi	r24, 0xF0	; 240
     406:	81 bb       	out	0x11, r24	; 17
	KB_PORT=0b00001111;
     408:	9f e0       	ldi	r25, 0x0F	; 15
     40a:	92 bb       	out	0x12, r25	; 18
     40c:	a7 e8       	ldi	r26, 0x87	; 135
     40e:	b3 e1       	ldi	r27, 0x13	; 19
     410:	11 97       	sbiw	r26, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <keypad+0x10>
     414:	00 c0       	rjmp	.+0      	; 0x416 <keypad+0x16>
     416:	00 00       	nop
	_delay_ms(20);
	klaw->result = KB_PIN;
     418:	20 b3       	in	r18, 0x10	; 16
     41a:	20 83       	st	Z, r18

	//odczyt wierszy
	KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
     41c:	91 bb       	out	0x11, r25	; 17
	KB_PORT=0b11110000;
     41e:	82 bb       	out	0x12, r24	; 18
     420:	87 e8       	ldi	r24, 0x87	; 135
     422:	93 e1       	ldi	r25, 0x13	; 19
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <keypad+0x24>
     428:	00 c0       	rjmp	.+0      	; 0x42a <keypad+0x2a>
     42a:	00 00       	nop
	_delay_ms(20);
	klaw->result |= KB_PIN; 
     42c:	80 b3       	in	r24, 0x10	; 16
     42e:	90 81       	ld	r25, Z
     430:	98 2b       	or	r25, r24
     432:	90 83       	st	Z, r25

	if(klaw->result == klaw->last_result)
     434:	81 81       	ldd	r24, Z+1	; 0x01
     436:	98 13       	cpse	r25, r24
     438:	03 c0       	rjmp	.+6      	; 0x440 <keypad+0x40>
	{
		klaw->last_result = klaw->result;
		return klaw->result=0xFF;
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	80 83       	st	Z, r24
     43e:	08 95       	ret
	}
	else
	{
		klaw->last_result = klaw->result;
     440:	91 83       	std	Z+1, r25	; 0x01
		return klaw->result; //ostatnio wcisniety
     442:	89 2f       	mov	r24, r25
	}
}
     444:	08 95       	ret

00000446 <keypad_clr_buf>:
	

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
     446:	e4 e1       	ldi	r30, 0x14	; 20
     448:	f1 e0       	ldi	r31, 0x01	; 1
	for(int i=0;i<16;i++) //czyszczenie bufora
				keypad_A.buf[i]='\0'; 
     44a:	11 92       	st	Z+, r1

}

void keypad_clr_buf(void) //to kiedys do poprawki na wskaznik struct Key *klaw klaw->buf[i]='\0'; i wywolania w calym kodzie
{
	for(int i=0;i<16;i++) //czyszczenie bufora
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	e4 32       	cpi	r30, 0x24	; 36
     450:	f8 07       	cpc	r31, r24
     452:	d9 f7       	brne	.-10     	; 0x44a <keypad_clr_buf+0x4>
				keypad_A.buf[i]='\0'; 
	keypad_A.i=0; //zerowanie wskaznika zapisu bufora
     454:	10 92 25 01 	sts	0x0125, r1
     458:	10 92 24 01 	sts	0x0124, r1
     45c:	08 95       	ret

0000045e <keypad_proc>:
		return klaw->result; //ostatnio wcisniety
	}
}

void keypad_proc(struct Key *klaw)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	fc 01       	movw	r30, r24

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     464:	80 81       	ld	r24, Z
     466:	87 3d       	cpi	r24, 0xD7	; 215
     468:	09 f4       	brne	.+2      	; 0x46c <__stack+0xd>
     46a:	c4 c0       	rjmp	.+392    	; 0x5f4 <__stack+0x195>
     46c:	58 f5       	brcc	.+86     	; 0x4c4 <__stack+0x65>
     46e:	87 3b       	cpi	r24, 0xB7	; 183
     470:	09 f4       	brne	.+2      	; 0x474 <__stack+0x15>
     472:	6c c0       	rjmp	.+216    	; 0x54c <__stack+0xed>
     474:	98 f4       	brcc	.+38     	; 0x49c <__stack+0x3d>
     476:	8b 37       	cpi	r24, 0x7B	; 123
     478:	09 f4       	brne	.+2      	; 0x47c <__stack+0x1d>
     47a:	51 c0       	rjmp	.+162    	; 0x51e <__stack+0xbf>
     47c:	8d 37       	cpi	r24, 0x7D	; 125
     47e:	09 f4       	brne	.+2      	; 0x482 <__stack+0x23>
     480:	4b c0       	rjmp	.+150    	; 0x518 <__stack+0xb9>
     482:	87 37       	cpi	r24, 0x77	; 119
     484:	09 f0       	breq	.+2      	; 0x488 <__stack+0x29>
     486:	c1 c0       	rjmp	.+386    	; 0x60a <__stack+0x1ab>
     488:	ef 01       	movw	r28, r30
			klaw->flags |= KB_M;
	
		}break; 

		case 0b01110111     : { //D - czyszczenie
			 keypad_clr_buf();//czyszczenie bufora
     48a:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
			//czyszczenie flag
			klaw->flags &= ~KB_H;
			klaw->flags &= ~KB_M;
     48e:	9c 89       	ldd	r25, Y+20	; 0x14
     490:	93 7f       	andi	r25, 0xF3	; 243
			klaw->flags |= KB_CLR;
     492:	90 61       	ori	r25, 0x10	; 16
     494:	9c 8b       	std	Y+20, r25	; 0x14
			//czyszczenie wskaznika buforu
			klaw->i = 0;
     496:	1b 8a       	std	Y+19, r1	; 0x13
     498:	1a 8a       	std	Y+18, r1	; 0x12
		}; break; 
     49a:	b7 c0       	rjmp	.+366    	; 0x60a <__stack+0x1ab>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     49c:	8d 3b       	cpi	r24, 0xBD	; 189
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__stack+0x43>
     4a0:	9e c0       	rjmp	.+316    	; 0x5de <__stack+0x17f>
     4a2:	8e 3b       	cpi	r24, 0xBE	; 190
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__stack+0x49>
     4a6:	7a c0       	rjmp	.+244    	; 0x59c <__stack+0x13d>
     4a8:	8b 3b       	cpi	r24, 0xBB	; 187
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__stack+0x4f>
     4ac:	ae c0       	rjmp	.+348    	; 0x60a <__stack+0x1ab>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
     4ae:	82 89       	ldd	r24, Z+18	; 0x12
     4b0:	93 89       	ldd	r25, Z+19	; 0x13
     4b2:	9c 01       	movw	r18, r24
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	33 8b       	std	Z+19, r19	; 0x13
     4ba:	22 8b       	std	Z+18, r18	; 0x12
     4bc:	e8 0f       	add	r30, r24
     4be:	f9 1f       	adc	r31, r25
     4c0:	89 e3       	ldi	r24, 0x39	; 57
     4c2:	a2 c0       	rjmp	.+324    	; 0x608 <__stack+0x1a9>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     4c4:	87 3e       	cpi	r24, 0xE7	; 231
     4c6:	79 f1       	breq	.+94     	; 0x526 <__stack+0xc7>
     4c8:	a0 f4       	brcc	.+40     	; 0x4f2 <__stack+0x93>
     4ca:	8d 3d       	cpi	r24, 0xDD	; 221
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__stack+0x71>
     4ce:	7c c0       	rjmp	.+248    	; 0x5c8 <__stack+0x169>
     4d0:	8e 3d       	cpi	r24, 0xDE	; 222
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <__stack+0x77>
     4d4:	58 c0       	rjmp	.+176    	; 0x586 <__stack+0x127>
     4d6:	8b 3d       	cpi	r24, 0xDB	; 219
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__stack+0x7d>
     4da:	97 c0       	rjmp	.+302    	; 0x60a <__stack+0x1ab>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
     4dc:	82 89       	ldd	r24, Z+18	; 0x12
     4de:	93 89       	ldd	r25, Z+19	; 0x13
     4e0:	9c 01       	movw	r18, r24
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	33 8b       	std	Z+19, r19	; 0x13
     4e8:	22 8b       	std	Z+18, r18	; 0x12
     4ea:	e8 0f       	add	r30, r24
     4ec:	f9 1f       	adc	r31, r25
     4ee:	88 e3       	ldi	r24, 0x38	; 56
     4f0:	8b c0       	rjmp	.+278    	; 0x608 <__stack+0x1a9>
}

void keypad_proc(struct Key *klaw)
{

	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
     4f2:	8d 3e       	cpi	r24, 0xED	; 237
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <__stack+0x99>
     4f6:	5d c0       	rjmp	.+186    	; 0x5b2 <__stack+0x153>
     4f8:	8e 3e       	cpi	r24, 0xEE	; 238
     4fa:	d1 f1       	breq	.+116    	; 0x570 <__stack+0x111>
     4fc:	8b 3e       	cpi	r24, 0xEB	; 235
     4fe:	09 f0       	breq	.+2      	; 0x502 <__stack+0xa3>
     500:	84 c0       	rjmp	.+264    	; 0x60a <__stack+0x1ab>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
     502:	82 89       	ldd	r24, Z+18	; 0x12
     504:	93 89       	ldd	r25, Z+19	; 0x13
     506:	9c 01       	movw	r18, r24
     508:	2f 5f       	subi	r18, 0xFF	; 255
     50a:	3f 4f       	sbci	r19, 0xFF	; 255
     50c:	33 8b       	std	Z+19, r19	; 0x13
     50e:	22 8b       	std	Z+18, r18	; 0x12
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	87 e3       	ldi	r24, 0x37	; 55
     516:	78 c0       	rjmp	.+240    	; 0x608 <__stack+0x1a9>
	switch (klaw->result) // akcja dla ostanio wcisnietego klawisza
	{
		//klawisze funkcyjne
		
		//case 0b01111110     : ; break; //A - potwierdzenie (accept)
		case 0b01111101     : klaw->flags |= KB_NEW; break; //B - wprowadzanie nowego obiektu
     518:	84 89       	ldd	r24, Z+20	; 0x14
     51a:	80 64       	ori	r24, 0x40	; 64
     51c:	02 c0       	rjmp	.+4      	; 0x522 <__stack+0xc3>
		case 0b01111011     : klaw->flags |= KB_CAL ; break; //C - kalibracja (calibration)
     51e:	84 89       	ldd	r24, Z+20	; 0x14
     520:	80 62       	ori	r24, 0x20	; 32
     522:	84 8b       	std	Z+20, r24	; 0x14
     524:	72 c0       	rjmp	.+228    	; 0x60a <__stack+0x1ab>

		case 0b11100111     : { //* H
			if(!(klaw->flags & KB_H) && !(klaw->flags & KB_M)) //jesli brak flagi H i M
     526:	84 89       	ldd	r24, Z+20	; 0x14
     528:	98 2f       	mov	r25, r24
     52a:	9c 70       	andi	r25, 0x0C	; 12
     52c:	69 f4       	brne	.+26     	; 0x548 <__stack+0xe9>
				klaw->buf[klaw->i++]='H';
     52e:	22 89       	ldd	r18, Z+18	; 0x12
     530:	33 89       	ldd	r19, Z+19	; 0x13
     532:	a9 01       	movw	r20, r18
     534:	4f 5f       	subi	r20, 0xFF	; 255
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	53 8b       	std	Z+19, r21	; 0x13
     53a:	42 8b       	std	Z+18, r20	; 0x12
     53c:	df 01       	movw	r26, r30
     53e:	a2 0f       	add	r26, r18
     540:	b3 1f       	adc	r27, r19
     542:	98 e4       	ldi	r25, 0x48	; 72
     544:	12 96       	adiw	r26, 0x02	; 2
     546:	9c 93       	st	X, r25
			klaw->flags |= KB_H;
     548:	88 60       	ori	r24, 0x08	; 8
     54a:	eb cf       	rjmp	.-42     	; 0x522 <__stack+0xc3>

		} break; 
		case 0b10110111     :{ //# M
			if(!(klaw->flags & KB_M))
     54c:	84 89       	ldd	r24, Z+20	; 0x14
     54e:	82 fd       	sbrc	r24, 2
     550:	0d c0       	rjmp	.+26     	; 0x56c <__stack+0x10d>
				klaw->buf[klaw->i++]='M';
     552:	22 89       	ldd	r18, Z+18	; 0x12
     554:	33 89       	ldd	r19, Z+19	; 0x13
     556:	a9 01       	movw	r20, r18
     558:	4f 5f       	subi	r20, 0xFF	; 255
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	53 8b       	std	Z+19, r21	; 0x13
     55e:	42 8b       	std	Z+18, r20	; 0x12
     560:	df 01       	movw	r26, r30
     562:	a2 0f       	add	r26, r18
     564:	b3 1f       	adc	r27, r19
     566:	9d e4       	ldi	r25, 0x4D	; 77
     568:	12 96       	adiw	r26, 0x02	; 2
     56a:	9c 93       	st	X, r25
			klaw->flags |= KB_M;
     56c:	84 60       	ori	r24, 0x04	; 4
     56e:	d9 cf       	rjmp	.-78     	; 0x522 <__stack+0xc3>
		}; break; 
		

		
		//klawisz numeryczny     
		case 0b11101110     : klaw->buf[klaw->i++]='1'; break; //1
     570:	82 89       	ldd	r24, Z+18	; 0x12
     572:	93 89       	ldd	r25, Z+19	; 0x13
     574:	9c 01       	movw	r18, r24
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	33 8b       	std	Z+19, r19	; 0x13
     57c:	22 8b       	std	Z+18, r18	; 0x12
     57e:	e8 0f       	add	r30, r24
     580:	f9 1f       	adc	r31, r25
     582:	81 e3       	ldi	r24, 0x31	; 49
     584:	41 c0       	rjmp	.+130    	; 0x608 <__stack+0x1a9>
		case 0b11011110     : klaw->buf[klaw->i++]='2'; break; //2
     586:	82 89       	ldd	r24, Z+18	; 0x12
     588:	93 89       	ldd	r25, Z+19	; 0x13
     58a:	9c 01       	movw	r18, r24
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	33 8b       	std	Z+19, r19	; 0x13
     592:	22 8b       	std	Z+18, r18	; 0x12
     594:	e8 0f       	add	r30, r24
     596:	f9 1f       	adc	r31, r25
     598:	82 e3       	ldi	r24, 0x32	; 50
     59a:	36 c0       	rjmp	.+108    	; 0x608 <__stack+0x1a9>
		case 0b10111110     : klaw->buf[klaw->i++]='3'; break; //3
     59c:	82 89       	ldd	r24, Z+18	; 0x12
     59e:	93 89       	ldd	r25, Z+19	; 0x13
     5a0:	9c 01       	movw	r18, r24
     5a2:	2f 5f       	subi	r18, 0xFF	; 255
     5a4:	3f 4f       	sbci	r19, 0xFF	; 255
     5a6:	33 8b       	std	Z+19, r19	; 0x13
     5a8:	22 8b       	std	Z+18, r18	; 0x12
     5aa:	e8 0f       	add	r30, r24
     5ac:	f9 1f       	adc	r31, r25
     5ae:	83 e3       	ldi	r24, 0x33	; 51
     5b0:	2b c0       	rjmp	.+86     	; 0x608 <__stack+0x1a9>
		case 0b11101101     : klaw->buf[klaw->i++]='4'; break; //4
     5b2:	82 89       	ldd	r24, Z+18	; 0x12
     5b4:	93 89       	ldd	r25, Z+19	; 0x13
     5b6:	9c 01       	movw	r18, r24
     5b8:	2f 5f       	subi	r18, 0xFF	; 255
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	33 8b       	std	Z+19, r19	; 0x13
     5be:	22 8b       	std	Z+18, r18	; 0x12
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	84 e3       	ldi	r24, 0x34	; 52
     5c6:	20 c0       	rjmp	.+64     	; 0x608 <__stack+0x1a9>
		case 0b11011101     : klaw->buf[klaw->i++]='5'; break; //5
     5c8:	82 89       	ldd	r24, Z+18	; 0x12
     5ca:	93 89       	ldd	r25, Z+19	; 0x13
     5cc:	9c 01       	movw	r18, r24
     5ce:	2f 5f       	subi	r18, 0xFF	; 255
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	33 8b       	std	Z+19, r19	; 0x13
     5d4:	22 8b       	std	Z+18, r18	; 0x12
     5d6:	e8 0f       	add	r30, r24
     5d8:	f9 1f       	adc	r31, r25
     5da:	85 e3       	ldi	r24, 0x35	; 53
     5dc:	15 c0       	rjmp	.+42     	; 0x608 <__stack+0x1a9>
		case 0b10111101     : klaw->buf[klaw->i++]='6'; break; //6
     5de:	82 89       	ldd	r24, Z+18	; 0x12
     5e0:	93 89       	ldd	r25, Z+19	; 0x13
     5e2:	9c 01       	movw	r18, r24
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	3f 4f       	sbci	r19, 0xFF	; 255
     5e8:	33 8b       	std	Z+19, r19	; 0x13
     5ea:	22 8b       	std	Z+18, r18	; 0x12
     5ec:	e8 0f       	add	r30, r24
     5ee:	f9 1f       	adc	r31, r25
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	0a c0       	rjmp	.+20     	; 0x608 <__stack+0x1a9>
		case 0b11101011     : klaw->buf[klaw->i++]='7'; break; //7
		case 0b11011011     : klaw->buf[klaw->i++]='8'; break; //8
		case 0b10111011     : klaw->buf[klaw->i++]='9'; break; //9
		case 0b11010111     : klaw->buf[klaw->i++]='0'; break; //0
     5f4:	82 89       	ldd	r24, Z+18	; 0x12
     5f6:	93 89       	ldd	r25, Z+19	; 0x13
     5f8:	9c 01       	movw	r18, r24
     5fa:	2f 5f       	subi	r18, 0xFF	; 255
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	33 8b       	std	Z+19, r19	; 0x13
     600:	22 8b       	std	Z+18, r18	; 0x12
     602:	e8 0f       	add	r30, r24
     604:	f9 1f       	adc	r31, r25
     606:	80 e3       	ldi	r24, 0x30	; 48
     608:	82 83       	std	Z+2, r24	; 0x02
		//default:
	}
	

}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <kalibracja>:
#include "pushto_lib.h"


void kalibracja(struct Enc *enk1, struct Enc *enk2, struct Telescope *tel) //enkoder1 - wysokosc, enkoder2 - obrot
{
     610:	4f 92       	push	r4
     612:	5f 92       	push	r5
     614:	6f 92       	push	r6
     616:	7f 92       	push	r7
     618:	8f 92       	push	r8
     61a:	9f 92       	push	r9
     61c:	af 92       	push	r10
     61e:	bf 92       	push	r11
     620:	cf 92       	push	r12
     622:	df 92       	push	r13
     624:	ef 92       	push	r14
     626:	ff 92       	push	r15
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	7c 01       	movw	r14, r24
     632:	8b 01       	movw	r16, r22
     634:	ea 01       	movw	r28, r20
    /*funkcja do kalibracji pushtu, okreslenie polozenia ukladu rownikowego wzgledem ukladu horyzontalnego*/

	float halk;	//wysoko≈õƒá alkaida
	float talk; //kƒÖt godzinny

	gotoXy(0,0);
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto zenit-> C");
     63e:	81 e7       	ldi	r24, 0x71	; 113
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     646:	82 e1       	ldi	r24, 0x12	; 18
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     64e:	8b 37       	cpi	r24, 0x7B	; 123
     650:	d1 f7       	brne	.-12     	; 0x646 <kalibracja+0x36>
	enk1->count=EN1_RANGE/4; //ustawienie wysokosci zenitu
     652:	80 e7       	ldi	r24, 0x70	; 112
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	f7 01       	movw	r30, r14
     658:	93 83       	std	Z+3, r25	; 0x03
     65a:	82 83       	std	Z+2, r24	; 0x02
	
	gotoXy(0,0);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto polaris-> C");
     664:	80 e8       	ldi	r24, 0x80	; 128
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     66c:	82 e1       	ldi	r24, 0x12	; 18
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     674:	8b 37       	cpi	r24, 0x7B	; 123
     676:	d1 f7       	brne	.-12     	; 0x66c <kalibracja+0x5c>
	enk2->count=0; //ustawienie 0 enkodera na azymucie=0
     678:	f8 01       	movw	r30, r16
     67a:	13 82       	std	Z+3, r1	; 0x03
     67c:	12 82       	std	Z+2, r1	; 0x02
	tel->h_pol=(enk1->count*2.0*PI)/EN1_RANGE; //szeroko≈õƒá geograficzna h_pol, rad
     67e:	f7 01       	movw	r30, r14
     680:	62 81       	ldd	r22, Z+2	; 0x02
     682:	73 81       	ldd	r23, Z+3	; 0x03
     684:	07 2e       	mov	r0, r23
     686:	00 0c       	add	r0, r0
     688:	88 0b       	sbc	r24, r24
     68a:	99 0b       	sbc	r25, r25
     68c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     698:	2b ed       	ldi	r18, 0xDB	; 219
     69a:	3f e0       	ldi	r19, 0x0F	; 15
     69c:	49 e4       	ldi	r20, 0x49	; 73
     69e:	50 e4       	ldi	r21, 0x40	; 64
     6a0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	41 ee       	ldi	r20, 0xE1	; 225
     6aa:	53 e4       	ldi	r21, 0x43	; 67
     6ac:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     6b0:	6c 8b       	std	Y+20, r22	; 0x14
     6b2:	7d 8b       	std	Y+21, r23	; 0x15
     6b4:	8e 8b       	std	Y+22, r24	; 0x16
     6b6:	9f 8b       	std	Y+23, r25	; 0x17

	gotoXy(0,0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("Goto alkaid -> C");
     6c0:	81 e9       	ldi	r24, 0x91	; 145
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(&keypad_A)!=0b01111011){} //oczekuj na C
     6c8:	82 e1       	ldi	r24, 0x12	; 18
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     6d0:	8b 37       	cpi	r24, 0x7B	; 123
     6d2:	d1 f7       	brne	.-12     	; 0x6c8 <kalibracja+0xb8>
	
	halk=(enk1->count/EN1_RANGE)*2.0*PI; //przeliczenie zmierzonej wysoko≈õci na radiany
     6d4:	f7 01       	movw	r30, r14
     6d6:	62 81       	ldd	r22, Z+2	; 0x02
     6d8:	73 81       	ldd	r23, Z+3	; 0x03
     6da:	07 2e       	mov	r0, r23
     6dc:	00 0c       	add	r0, r0
     6de:	88 0b       	sbc	r24, r24
     6e0:	99 0b       	sbc	r25, r25
     6e2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	41 ee       	ldi	r20, 0xE1	; 225
     6ec:	53 e4       	ldi	r21, 0x43	; 67
     6ee:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     6fa:	2b ed       	ldi	r18, 0xDB	; 219
     6fc:	3f e0       	ldi	r19, 0x0F	; 15
     6fe:	49 e4       	ldi	r20, 0x49	; 73
     700:	50 e4       	ldi	r21, 0x40	; 64
     702:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
     706:	0e 94 36 0a 	call	0x146c	; 0x146c <sin>
     70a:	4b 01       	movw	r8, r22
     70c:	5c 01       	movw	r10, r24
     70e:	cc 88       	ldd	r12, Y+20	; 0x14
     710:	dd 88       	ldd	r13, Y+21	; 0x15
     712:	ee 88       	ldd	r14, Y+22	; 0x16
     714:	ff 88       	ldd	r15, Y+23	; 0x17
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 36 0a 	call	0x146c	; 0x146c <sin>
     71e:	2b 01       	movw	r4, r22
     720:	3c 01       	movw	r6, r24
     722:	c7 01       	movw	r24, r14
     724:	b6 01       	movw	r22, r12
     726:	0e 94 c3 07 	call	0xf86	; 0xf86 <cos>
     72a:	6b 01       	movw	r12, r22
     72c:	7c 01       	movw	r14, r24
     72e:	27 e1       	ldi	r18, 0x17	; 23
     730:	35 e1       	ldi	r19, 0x15	; 21
     732:	42 e4       	ldi	r20, 0x42	; 66
     734:	5f e3       	ldi	r21, 0x3F	; 63
     736:	c3 01       	movw	r24, r6
     738:	b2 01       	movw	r22, r4
     73a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     73e:	9b 01       	movw	r18, r22
     740:	ac 01       	movw	r20, r24
     742:	c5 01       	movw	r24, r10
     744:	b4 01       	movw	r22, r8
     746:	0e 94 07 07 	call	0xe0e	; 0xe0e <__subsf3>
     74a:	4b 01       	movw	r8, r22
     74c:	5c 01       	movw	r10, r24
     74e:	2c ee       	ldi	r18, 0xEC	; 236
     750:	3f ee       	ldi	r19, 0xEF	; 239
     752:	46 e2       	ldi	r20, 0x26	; 38
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	c5 01       	movw	r24, r10
     764:	b4 01       	movw	r22, r8
     766:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     76a:	0e 94 f6 06 	call	0xdec	; 0xdec <acos>
     76e:	6b 01       	movw	r12, r22
     770:	7c 01       	movw	r14, r24
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin
     772:	f8 01       	movw	r30, r16
     774:	62 81       	ldd	r22, Z+2	; 0x02
     776:	73 81       	ldd	r23, Z+3	; 0x03
     778:	07 2e       	mov	r0, r23
     77a:	00 0c       	add	r0, r0
     77c:	88 0b       	sbc	r24, r24
     77e:	99 0b       	sbc	r25, r25
     780:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     784:	9b 01       	movw	r18, r22
     786:	ac 01       	movw	r20, r24
     788:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     78c:	2b ed       	ldi	r18, 0xDB	; 219
     78e:	3f e0       	ldi	r19, 0x0F	; 15
     790:	49 e4       	ldi	r20, 0x49	; 73
     792:	50 e4       	ldi	r21, 0x40	; 64
     794:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	41 ee       	ldi	r20, 0xE1	; 225
     79e:	53 e4       	ldi	r21, 0x43	; 67
     7a0:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     7a4:	2b ed       	ldi	r18, 0xDB	; 219
     7a6:	3f e0       	ldi	r19, 0x0F	; 15
     7a8:	49 e4       	ldi	r20, 0x49	; 73
     7aa:	50 e4       	ldi	r21, 0x40	; 64
     7ac:	0e 94 be 07 	call	0xf7c	; 0xf7c <__cmpsf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	54 f0       	brlt	.+20     	; 0x7c8 <kalibracja+0x1b8>
     7b4:	2b ed       	ldi	r18, 0xDB	; 219
     7b6:	3f e0       	ldi	r19, 0x0F	; 15
     7b8:	49 e4       	ldi	r20, 0x49	; 73
     7ba:	50 e4       	ldi	r21, 0x40	; 64
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     7c4:	6b 01       	movw	r12, r22
     7c6:	7c 01       	movw	r14, r24

	tel->time=talk+ralk; //ustawianie zegara
     7c8:	22 ec       	ldi	r18, 0xC2	; 194
     7ca:	3e e5       	ldi	r19, 0x5E	; 94
     7cc:	47 e6       	ldi	r20, 0x67	; 103
     7ce:	50 e4       	ldi	r21, 0x40	; 64
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     7d8:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fixsfsi>
     7dc:	79 83       	std	Y+1, r23	; 0x01
     7de:	68 83       	st	Y, r22
	lcd_clr();

}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	9f 90       	pop	r9
     7f6:	8f 90       	pop	r8
     7f8:	7f 90       	pop	r7
     7fa:	6f 90       	pop	r6
     7fc:	5f 90       	pop	r5
     7fe:	4f 90       	pop	r4
	halk=(enk1->count/EN1_RANGE)*2.0*PI; //przeliczenie zmierzonej wysoko≈õci na radiany
	talk= acos(((sin(halk)-sin(tel->h_pol)*sin(dalk))/(cos(dalk)*cos(tel->h_pol))));
	if(enk2->count*2.0*PI/EN2_RANGE<=PI) talk+=PI; //wynikajace z zakresu funkcji asin

	tel->time=talk+ralk; //ustawianie zegara
	lcd_clr();
     800:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <lcd_clr>

00000804 <nowy_cel>:

}

void nowy_cel(struct Key *klaw, struct Telescope *tel)
{
     804:	2f 92       	push	r2
     806:	3f 92       	push	r3
     808:	4f 92       	push	r4
     80a:	5f 92       	push	r5
     80c:	6f 92       	push	r6
     80e:	7f 92       	push	r7
     810:	8f 92       	push	r8
     812:	9f 92       	push	r9
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <nowy_cel+0x26>
     82a:	00 d0       	rcall	.+0      	; 0x82c <nowy_cel+0x28>
     82c:	00 d0       	rcall	.+0      	; 0x82e <nowy_cel+0x2a>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	8c 01       	movw	r16, r24
     834:	1b 01       	movw	r2, r22
    /*funkcja obslugujaca wprowadzanie nowego celu, 
    zawiera wskazowki dotyczace formatu wprowadzania,
    po wprowadzeniu konwertuje znaki z bufora klawiatury na liczby
    reprezentujace deklinacje i rektastencje zadana*/

	int h=0;
     836:	1e 82       	std	Y+6, r1	; 0x06
     838:	1d 82       	std	Y+5, r1	; 0x05
	int m=0;
     83a:	1c 82       	std	Y+4, r1	; 0x04
     83c:	1b 82       	std	Y+3, r1	; 0x03
	int s=0;
     83e:	1a 82       	std	Y+2, r1	; 0x02
     840:	19 82       	std	Y+1, r1	; 0x01

	keypad_clr_buf(); //czyszczenie bufora
     842:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
	gotoXy(0,0);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("podaj dekl i RA ");
     84e:	82 ea       	ldi	r24, 0xA2	; 162
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	gotoXy(0,1);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("format xHyMz ->B");
     85e:	83 eb       	ldi	r24, 0xB3	; 179
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     866:	c8 01       	movw	r24, r16
     868:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     86c:	8d 37       	cpi	r24, 0x7D	; 125
     86e:	d9 f7       	brne	.-10     	; 0x866 <nowy_cel+0x62>
	gotoXy(0,0);
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("oznaczenia:     ");
     878:	84 ec       	ldi	r24, 0xC4	; 196
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	gotoXy(0,1);
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
	prints("H(*) M(#)    ->B");
     888:	85 ed       	ldi	r24, 0xD5	; 213
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
	while(keypad(klaw)!=0b01111101){} //oczekuj na B
     890:	c8 01       	movw	r24, r16
     892:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     896:	8d 37       	cpi	r24, 0x7D	; 125
     898:	d9 f7       	brne	.-10     	; 0x890 <nowy_cel+0x8c>
	lcd_clr();
     89a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>

	gotoXy(0,0);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    prints("podaj RA     ->B");
     8a6:	86 ee       	ldi	r24, 0xE6	; 230
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
     8ae:	c8 01       	movw	r24, r16
     8b0:	02 96       	adiw	r24, 0x02	; 2
     8b2:	7c 01       	movw	r14, r24
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     8b4:	c8 01       	movw	r24, r16
     8b6:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     8ba:	8d 37       	cpi	r24, 0x7D	; 125
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <nowy_cel+0xd0>
    {
    	gotoXy(0,1);
     8be:	61 e0       	ldi	r22, 0x01	; 1
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    	keypad_proc(klaw);
     8c6:	c8 01       	movw	r24, r16
     8c8:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>
    	prints(klaw->buf);
     8cc:	c7 01       	movw	r24, r14
     8ce:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
     8d2:	f0 cf       	rjmp	.-32     	; 0x8b4 <nowy_cel+0xb0>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     8d4:	fe 01       	movw	r30, r28
     8d6:	31 96       	adiw	r30, 0x01	; 1
     8d8:	4f 01       	movw	r8, r30
     8da:	ff 93       	push	r31
     8dc:	ef 93       	push	r30
     8de:	5e 01       	movw	r10, r28
     8e0:	f3 e0       	ldi	r31, 0x03	; 3
     8e2:	af 0e       	add	r10, r31
     8e4:	b1 1c       	adc	r11, r1
     8e6:	bf 92       	push	r11
     8e8:	af 92       	push	r10
     8ea:	6e 01       	movw	r12, r28
     8ec:	85 e0       	ldi	r24, 0x05	; 5
     8ee:	c8 0e       	add	r12, r24
     8f0:	d1 1c       	adc	r13, r1
     8f2:	df 92       	push	r13
     8f4:	cf 92       	push	r12
     8f6:	87 ef       	ldi	r24, 0xF7	; 247
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	ff 92       	push	r15
     900:	ef 92       	push	r14
     902:	0e 94 c5 0a 	call	0x158a	; 0x158a <sscanf>

    tel->re_zad = (15*h+15/60.0*m+15/3600.0*s)*(PI/180.0); //z przeliczeniem na radiany
     906:	8d 81       	ldd	r24, Y+5	; 0x05
     908:	9e 81       	ldd	r25, Y+6	; 0x06
     90a:	2f e0       	ldi	r18, 0x0F	; 15
     90c:	28 9f       	mul	r18, r24
     90e:	b0 01       	movw	r22, r0
     910:	29 9f       	mul	r18, r25
     912:	70 0d       	add	r23, r0
     914:	11 24       	eor	r1, r1
     916:	07 2e       	mov	r0, r23
     918:	00 0c       	add	r0, r0
     91a:	88 0b       	sbc	r24, r24
     91c:	99 0b       	sbc	r25, r25
     91e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     922:	2b 01       	movw	r4, r22
     924:	3c 01       	movw	r6, r24
     926:	6b 81       	ldd	r22, Y+3	; 0x03
     928:	7c 81       	ldd	r23, Y+4	; 0x04
     92a:	07 2e       	mov	r0, r23
     92c:	00 0c       	add	r0, r0
     92e:	88 0b       	sbc	r24, r24
     930:	99 0b       	sbc	r25, r25
     932:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e8       	ldi	r20, 0x80	; 128
     93c:	5e e3       	ldi	r21, 0x3E	; 62
     93e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     94e:	2b 01       	movw	r4, r22
     950:	3c 01       	movw	r6, r24
     952:	69 81       	ldd	r22, Y+1	; 0x01
     954:	7a 81       	ldd	r23, Y+2	; 0x02
     956:	07 2e       	mov	r0, r23
     958:	00 0c       	add	r0, r0
     95a:	88 0b       	sbc	r24, r24
     95c:	99 0b       	sbc	r25, r25
     95e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     962:	29 e8       	ldi	r18, 0x89	; 137
     964:	38 e8       	ldi	r19, 0x88	; 136
     966:	48 e8       	ldi	r20, 0x88	; 136
     968:	5b e3       	ldi	r21, 0x3B	; 59
     96a:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     97a:	25 e3       	ldi	r18, 0x35	; 53
     97c:	3a ef       	ldi	r19, 0xFA	; 250
     97e:	4e e8       	ldi	r20, 0x8E	; 142
     980:	5c e3       	ldi	r21, 0x3C	; 60
     982:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     986:	f1 01       	movw	r30, r2
     988:	60 87       	std	Z+8, r22	; 0x08
     98a:	71 87       	std	Z+9, r23	; 0x09
     98c:	82 87       	std	Z+10, r24	; 0x0a
     98e:	93 87       	std	Z+11, r25	; 0x0b

    keypad_clr_buf(); // czyszczenie bufora
     990:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
    lcd_clr();
     994:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
    h=0;m=0;s=0;
     998:	1e 82       	std	Y+6, r1	; 0x06
     99a:	1d 82       	std	Y+5, r1	; 0x05
     99c:	1c 82       	std	Y+4, r1	; 0x04
     99e:	1b 82       	std	Y+3, r1	; 0x03
     9a0:	1a 82       	std	Y+2, r1	; 0x02
     9a2:	19 82       	std	Y+1, r1	; 0x01
    klaw->flags &= ~KB_H;
	klaw->flags &= ~KB_M;
     9a4:	f8 01       	movw	r30, r16
     9a6:	84 89       	ldd	r24, Z+20	; 0x14
     9a8:	83 7f       	andi	r24, 0xF3	; 243
     9aa:	84 8b       	std	Z+20, r24	; 0x14
	gotoXy(0,0);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    prints("dekl H to st ->B");
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
    while(keypad(klaw)!=0b01111101) //oczekuj na B
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	cd bf       	out	0x3d, r28	; 61
     9c6:	c8 01       	movw	r24, r16
     9c8:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
     9cc:	8d 37       	cpi	r24, 0x7D	; 125
     9ce:	59 f0       	breq	.+22     	; 0x9e6 <nowy_cel+0x1e2>
    {
    	gotoXy(0,1);
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 a7 01 	call	0x34e	; 0x34e <gotoXy>
    	keypad_proc(klaw);
     9d8:	c8 01       	movw	r24, r16
     9da:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>
    	prints(klaw->buf);
     9de:	c7 01       	movw	r24, r14
     9e0:	0e 94 9b 01 	call	0x336	; 0x336 <prints>
     9e4:	f0 cf       	rjmp	.-32     	; 0x9c6 <nowy_cel+0x1c2>
    }
    sscanf(klaw->buf,"%iH%iM%i",&h,&m,&s);
     9e6:	9f 92       	push	r9
     9e8:	8f 92       	push	r8
     9ea:	bf 92       	push	r11
     9ec:	af 92       	push	r10
     9ee:	df 92       	push	r13
     9f0:	cf 92       	push	r12
     9f2:	87 ef       	ldi	r24, 0xF7	; 247
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	9f 93       	push	r25
     9f8:	8f 93       	push	r24
     9fa:	ff 92       	push	r15
     9fc:	ef 92       	push	r14
     9fe:	0e 94 c5 0a 	call	0x158a	; 0x158a <sscanf>
    tel->de_zad = (h+m/60.0+s/3600.0)*(PI/180.0); //w radianach
     a02:	6d 81       	ldd	r22, Y+5	; 0x05
     a04:	7e 81       	ldd	r23, Y+6	; 0x06
     a06:	07 2e       	mov	r0, r23
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	bc 01       	movw	r22, r24
     a1c:	99 0f       	add	r25, r25
     a1e:	88 0b       	sbc	r24, r24
     a20:	99 0b       	sbc	r25, r25
     a22:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e7       	ldi	r20, 0x70	; 112
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     a3e:	6b 01       	movw	r12, r22
     a40:	7c 01       	movw	r14, r24
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	9a 81       	ldd	r25, Y+2	; 0x02
     a46:	bc 01       	movw	r22, r24
     a48:	99 0f       	add	r25, r25
     a4a:	88 0b       	sbc	r24, r24
     a4c:	99 0b       	sbc	r25, r25
     a4e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	41 e6       	ldi	r20, 0x61	; 97
     a58:	55 e4       	ldi	r21, 0x45	; 69
     a5a:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     a5e:	9b 01       	movw	r18, r22
     a60:	ac 01       	movw	r20, r24
     a62:	c7 01       	movw	r24, r14
     a64:	b6 01       	movw	r22, r12
     a66:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     a6a:	25 e3       	ldi	r18, 0x35	; 53
     a6c:	3a ef       	ldi	r19, 0xFA	; 250
     a6e:	4e e8       	ldi	r20, 0x8E	; 142
     a70:	5c e3       	ldi	r21, 0x3C	; 60
     a72:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     a76:	f1 01       	movw	r30, r2
     a78:	64 83       	std	Z+4, r22	; 0x04
     a7a:	75 83       	std	Z+5, r23	; 0x05
     a7c:	86 83       	std	Z+6, r24	; 0x06
     a7e:	97 83       	std	Z+7, r25	; 0x07
 	
 	keypad_clr_buf();
     a80:	0e 94 23 02 	call	0x446	; 0x446 <keypad_clr_buf>
 	lcd_clr();
     a84:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
	klaw->flags='\0'; //czszczenie flag
     a88:	f8 01       	movw	r30, r16
     a8a:	14 8a       	std	Z+20, r1	; 0x14
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
}
     a96:	26 96       	adiw	r28, 0x06	; 6
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	9f 90       	pop	r9
     ab8:	8f 90       	pop	r8
     aba:	7f 90       	pop	r7
     abc:	6f 90       	pop	r6
     abe:	5f 90       	pop	r5
     ac0:	4f 90       	pop	r4
     ac2:	3f 90       	pop	r3
     ac4:	2f 90       	pop	r2
     ac6:	08 95       	ret

00000ac8 <obliczenie_nastaw>:

void obliczenie_nastaw(struct Telescope *tel)
{
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	64 97       	sbiw	r28, 0x14	; 20
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	8c 01       	movw	r16, r24
    /*funkcja obliczajaca nastawy dla enkoderow na podstawie wprowadzonych(zadanych)
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
     afa:	fc 01       	movw	r30, r24
     afc:	60 81       	ld	r22, Z
     afe:	71 81       	ldd	r23, Z+1	; 0x01
     b00:	07 2e       	mov	r0, r23
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__floatsisf>
     b0c:	f8 01       	movw	r30, r16
     b0e:	20 85       	ldd	r18, Z+8	; 0x08
     b10:	31 85       	ldd	r19, Z+9	; 0x09
     b12:	42 85       	ldd	r20, Z+10	; 0x0a
     b14:	53 85       	ldd	r21, Z+11	; 0x0b
     b16:	0e 94 07 07 	call	0xe0e	; 0xe0e <__subsf3>
     b1a:	69 83       	std	Y+1, r22	; 0x01
     b1c:	7a 83       	std	Y+2, r23	; 0x02
     b1e:	8b 83       	std	Y+3, r24	; 0x03
     b20:	9c 83       	std	Y+4, r25	; 0x04
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
     b22:	f8 01       	movw	r30, r16
     b24:	84 80       	ldd	r8, Z+4	; 0x04
     b26:	95 80       	ldd	r9, Z+5	; 0x05
     b28:	a6 80       	ldd	r10, Z+6	; 0x06
     b2a:	b7 80       	ldd	r11, Z+7	; 0x07
     b2c:	c5 01       	movw	r24, r10
     b2e:	b4 01       	movw	r22, r8
     b30:	0e 94 36 0a 	call	0x146c	; 0x146c <sin>
     b34:	2b 01       	movw	r4, r22
     b36:	3c 01       	movw	r6, r24
     b38:	f8 01       	movw	r30, r16
     b3a:	c4 88       	ldd	r12, Z+20	; 0x14
     b3c:	d5 88       	ldd	r13, Z+21	; 0x15
     b3e:	e6 88       	ldd	r14, Z+22	; 0x16
     b40:	f7 88       	ldd	r15, Z+23	; 0x17
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 36 0a 	call	0x146c	; 0x146c <sin>
     b4a:	6d 83       	std	Y+5, r22	; 0x05
     b4c:	7e 83       	std	Y+6, r23	; 0x06
     b4e:	8f 83       	std	Y+7, r24	; 0x07
     b50:	98 87       	std	Y+8, r25	; 0x08
     b52:	c5 01       	movw	r24, r10
     b54:	b4 01       	movw	r22, r8
     b56:	0e 94 c3 07 	call	0xf86	; 0xf86 <cos>
     b5a:	4b 01       	movw	r8, r22
     b5c:	5c 01       	movw	r10, r24
     b5e:	c7 01       	movw	r24, r14
     b60:	b6 01       	movw	r22, r12
     b62:	0e 94 c3 07 	call	0xf86	; 0xf86 <cos>
     b66:	69 87       	std	Y+9, r22	; 0x09
     b68:	7a 87       	std	Y+10, r23	; 0x0a
     b6a:	8b 87       	std	Y+11, r24	; 0x0b
     b6c:	9c 87       	std	Y+12, r25	; 0x0c
     b6e:	69 81       	ldd	r22, Y+1	; 0x01
     b70:	7a 81       	ldd	r23, Y+2	; 0x02
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	0e 94 c3 07 	call	0xf86	; 0xf86 <cos>
     b7a:	6d 87       	std	Y+13, r22	; 0x0d
     b7c:	7e 87       	std	Y+14, r23	; 0x0e
     b7e:	8f 87       	std	Y+15, r24	; 0x0f
     b80:	98 8b       	std	Y+16, r25	; 0x10
     b82:	2d 81       	ldd	r18, Y+5	; 0x05
     b84:	3e 81       	ldd	r19, Y+6	; 0x06
     b86:	4f 81       	ldd	r20, Y+7	; 0x07
     b88:	58 85       	ldd	r21, Y+8	; 0x08
     b8a:	c3 01       	movw	r24, r6
     b8c:	b2 01       	movw	r22, r4
     b8e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     b92:	6b 01       	movw	r12, r22
     b94:	7c 01       	movw	r14, r24
     b96:	29 85       	ldd	r18, Y+9	; 0x09
     b98:	3a 85       	ldd	r19, Y+10	; 0x0a
     b9a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b9c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b9e:	c5 01       	movw	r24, r10
     ba0:	b4 01       	movw	r22, r8
     ba2:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     ba6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ba8:	3e 85       	ldd	r19, Y+14	; 0x0e
     baa:	4f 85       	ldd	r20, Y+15	; 0x0f
     bac:	58 89       	ldd	r21, Y+16	; 0x10
     bae:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     bb2:	9b 01       	movw	r18, r22
     bb4:	ac 01       	movw	r20, r24
     bb6:	c7 01       	movw	r24, r14
     bb8:	b6 01       	movw	r22, r12
     bba:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     bbe:	0e 94 74 07 	call	0xee8	; 0xee8 <asin>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
     bc6:	f8 01       	movw	r30, r16
     bc8:	64 87       	std	Z+12, r22	; 0x0c
     bca:	75 87       	std	Z+13, r23	; 0x0d
     bcc:	86 87       	std	Z+14, r24	; 0x0e
     bce:	97 87       	std	Z+15, r25	; 0x0f
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     bd0:	69 81       	ldd	r22, Y+1	; 0x01
     bd2:	7a 81       	ldd	r23, Y+2	; 0x02
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	9c 81       	ldd	r25, Y+4	; 0x04
     bd8:	0e 94 36 0a 	call	0x146c	; 0x146c <sin>
     bdc:	9b 01       	movw	r18, r22
     bde:	ac 01       	movw	r20, r24
     be0:	c5 01       	movw	r24, r10
     be2:	b4 01       	movw	r22, r8
     be4:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     be8:	69 8b       	std	Y+17, r22	; 0x11
     bea:	7a 8b       	std	Y+18, r23	; 0x12
     bec:	8b 8b       	std	Y+19, r24	; 0x13
     bee:	9c 8b       	std	Y+20, r25	; 0x14
     bf0:	c3 01       	movw	r24, r6
     bf2:	b2 01       	movw	r22, r4
     bf4:	90 58       	subi	r25, 0x80	; 128
     bf6:	29 85       	ldd	r18, Y+9	; 0x09
     bf8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bfa:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfc:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfe:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     c02:	2b 01       	movw	r4, r22
     c04:	3c 01       	movw	r6, r24
     c06:	2d 81       	ldd	r18, Y+5	; 0x05
     c08:	3e 81       	ldd	r19, Y+6	; 0x06
     c0a:	4f 81       	ldd	r20, Y+7	; 0x07
     c0c:	58 85       	ldd	r21, Y+8	; 0x08
     c0e:	c5 01       	movw	r24, r10
     c10:	b4 01       	movw	r22, r8
     c12:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     c16:	2d 85       	ldd	r18, Y+13	; 0x0d
     c18:	3e 85       	ldd	r19, Y+14	; 0x0e
     c1a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c1c:	58 89       	ldd	r21, Y+16	; 0x10
     c1e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	c3 01       	movw	r24, r6
     c28:	b2 01       	movw	r22, r4
     c2a:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	69 89       	ldd	r22, Y+17	; 0x11
     c34:	7a 89       	ldd	r23, Y+18	; 0x12
     c36:	8b 89       	ldd	r24, Y+19	; 0x13
     c38:	9c 89       	ldd	r25, Y+20	; 0x14
     c3a:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     c3e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <atan>
     c42:	4b 01       	movw	r8, r22
     c44:	5c 01       	movw	r10, r24
		if(o_time<(PI/2.0) || o_time>(3.0*PI/2.0)) tel->obr_obl+=PI; // z zale≈ºno≈õci azymutu i kƒÖta godzinnego 
     c46:	2b ed       	ldi	r18, 0xDB	; 219
     c48:	3f e0       	ldi	r19, 0x0F	; 15
     c4a:	49 ec       	ldi	r20, 0xC9	; 201
     c4c:	5f e3       	ldi	r21, 0x3F	; 63
     c4e:	69 81       	ldd	r22, Y+1	; 0x01
     c50:	7a 81       	ldd	r23, Y+2	; 0x02
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	0e 94 be 07 	call	0xf7c	; 0xf7c <__cmpsf2>
     c5a:	87 fd       	sbrc	r24, 7
     c5c:	12 c0       	rjmp	.+36     	; 0xc82 <obliczenie_nastaw+0x1ba>
     c5e:	24 ee       	ldi	r18, 0xE4	; 228
     c60:	3b ec       	ldi	r19, 0xCB	; 203
     c62:	46 e9       	ldi	r20, 0x96	; 150
     c64:	50 e4       	ldi	r21, 0x40	; 64
     c66:	69 81       	ldd	r22, Y+1	; 0x01
     c68:	7a 81       	ldd	r23, Y+2	; 0x02
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	0e 94 bc 09 	call	0x1378	; 0x1378 <__gesf2>
     c72:	18 16       	cp	r1, r24
     c74:	34 f0       	brlt	.+12     	; 0xc82 <obliczenie_nastaw+0x1ba>
     deklinacji(wys_zad) i rektastencji(obr_zad)
     oraz czasu ktory minal od momentu kalibracji */

	float o_time = tel->time-tel->re_zad; //kƒÖt godzinny obiektu
	tel->wys_obl= asin(sin(tel->de_zad)*sin(tel->h_pol)+cos(tel->de_zad)*cos(tel->h_pol)*cos(o_time));
	tel->obr_obl= atan(cos(tel->de_zad)*sin(o_time)/(-sin(tel->de_zad)*cos(tel->h_pol)+cos(tel->de_zad)*sin(tel->h_pol)*cos(o_time)));
     c76:	f8 01       	movw	r30, r16
     c78:	80 8a       	std	Z+16, r8	; 0x10
     c7a:	91 8a       	std	Z+17, r9	; 0x11
     c7c:	a2 8a       	std	Z+18, r10	; 0x12
     c7e:	b3 8a       	std	Z+19, r11	; 0x13
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <obliczenie_nastaw+0x1d4>
		if(o_time<(PI/2.0) || o_time>(3.0*PI/2.0)) tel->obr_obl+=PI; // z zale≈ºno≈õci azymutu i kƒÖta godzinnego 
     c82:	2b ed       	ldi	r18, 0xDB	; 219
     c84:	3f e0       	ldi	r19, 0x0F	; 15
     c86:	49 e4       	ldi	r20, 0x49	; 73
     c88:	50 e4       	ldi	r21, 0x40	; 64
     c8a:	c5 01       	movw	r24, r10
     c8c:	b4 01       	movw	r22, r8
     c8e:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     c92:	f8 01       	movw	r30, r16
     c94:	60 8b       	std	Z+16, r22	; 0x10
     c96:	71 8b       	std	Z+17, r23	; 0x11
     c98:	82 8b       	std	Z+18, r24	; 0x12
     c9a:	93 8b       	std	Z+19, r25	; 0x13
		if(tel->obr_obl<=0) tel->obr_obl+=2*PI; //z w≈Çasno≈õci atan
     c9c:	f8 01       	movw	r30, r16
     c9e:	80 88       	ldd	r8, Z+16	; 0x10
     ca0:	91 88       	ldd	r9, Z+17	; 0x11
     ca2:	a2 88       	ldd	r10, Z+18	; 0x12
     ca4:	b3 88       	ldd	r11, Z+19	; 0x13
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	a9 01       	movw	r20, r18
     cac:	c5 01       	movw	r24, r10
     cae:	b4 01       	movw	r22, r8
     cb0:	0e 94 be 07 	call	0xf7c	; 0xf7c <__cmpsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	6c f0       	brlt	.+26     	; 0xcd2 <obliczenie_nastaw+0x20a>
     cb8:	2b ed       	ldi	r18, 0xDB	; 219
     cba:	3f e0       	ldi	r19, 0x0F	; 15
     cbc:	49 ec       	ldi	r20, 0xC9	; 201
     cbe:	50 e4       	ldi	r21, 0x40	; 64
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
     cc8:	f8 01       	movw	r30, r16
     cca:	60 8b       	std	Z+16, r22	; 0x10
     ccc:	71 8b       	std	Z+17, r23	; 0x11
     cce:	82 8b       	std	Z+18, r24	; 0x12
     cd0:	93 8b       	std	Z+19, r25	; 0x13


	tel->wys_obl=(tel->wys_obl*EN1_RANGE)/(2.0*PI); //przeliczenie na obroty
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	41 ee       	ldi	r20, 0xE1	; 225
     cd8:	53 e4       	ldi	r21, 0x43	; 67
     cda:	c7 01       	movw	r24, r14
     cdc:	b6 01       	movw	r22, r12
     cde:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     ce2:	2b ed       	ldi	r18, 0xDB	; 219
     ce4:	3f e0       	ldi	r19, 0x0F	; 15
     ce6:	49 ec       	ldi	r20, 0xC9	; 201
     ce8:	50 e4       	ldi	r21, 0x40	; 64
     cea:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     cee:	f8 01       	movw	r30, r16
     cf0:	64 87       	std	Z+12, r22	; 0x0c
     cf2:	75 87       	std	Z+13, r23	; 0x0d
     cf4:	86 87       	std	Z+14, r24	; 0x0e
     cf6:	97 87       	std	Z+15, r25	; 0x0f
	tel->obr_obl=(tel->obr_obl*EN2_RANGE)/(2.0*PI);
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	41 ee       	ldi	r20, 0xE1	; 225
     cfe:	53 e4       	ldi	r21, 0x43	; 67
     d00:	60 89       	ldd	r22, Z+16	; 0x10
     d02:	71 89       	ldd	r23, Z+17	; 0x11
     d04:	82 89       	ldd	r24, Z+18	; 0x12
     d06:	93 89       	ldd	r25, Z+19	; 0x13
     d08:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
     d0c:	2b ed       	ldi	r18, 0xDB	; 219
     d0e:	3f e0       	ldi	r19, 0x0F	; 15
     d10:	49 ec       	ldi	r20, 0xC9	; 201
     d12:	50 e4       	ldi	r21, 0x40	; 64
     d14:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divsf3>
     d18:	f8 01       	movw	r30, r16
     d1a:	60 8b       	std	Z+16, r22	; 0x10
     d1c:	71 8b       	std	Z+17, r23	; 0x11
     d1e:	82 8b       	std	Z+18, r24	; 0x12
     d20:	93 8b       	std	Z+19, r25	; 0x13
}
     d22:	64 96       	adiw	r28, 0x14	; 20
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	7f 90       	pop	r7
     d48:	6f 90       	pop	r6
     d4a:	5f 90       	pop	r5
     d4c:	4f 90       	pop	r4
     d4e:	08 95       	ret

00000d50 <naprowadzanie>:

void naprowadzanie(struct Telescope *tel)
{
     d50:	08 95       	ret

00000d52 <main>:


int main(void)
{
	system_init();
     d52:	0e 94 93 00 	call	0x126	; 0x126 <system_init>
	lcdInit();
     d56:	0e 94 44 01 	call	0x288	; 0x288 <lcdInit>
		if(keypad() == 1)
		{
			PORTC ^= (1 << 0); 
		}
*/
		keypad(&keypad_A); //odczyt klawiatury
     d5a:	82 e1       	ldi	r24, 0x12	; 18
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 00 02 	call	0x400	; 0x400 <keypad>
		keypad_proc(&keypad_A); //przetwarzanie znakow
     d62:	82 e1       	ldi	r24, 0x12	; 18
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 2f 02 	call	0x45e	; 0x45e <keypad_proc>

		if(keypad_A.flags & KB_NEW)
     d6a:	80 91 26 01 	lds	r24, 0x0126
     d6e:	86 ff       	sbrs	r24, 6
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <main+0x36>
		{
			nowy_cel(&keypad_A,&telescope_A);
     d72:	6b e2       	ldi	r22, 0x2B	; 43
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	82 e1       	ldi	r24, 0x12	; 18
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 02 04 	call	0x804	; 0x804 <nowy_cel>
			keypad_A.flags &= ~KB_NEW;
     d7e:	80 91 26 01 	lds	r24, 0x0126
     d82:	8f 7b       	andi	r24, 0xBF	; 191
     d84:	80 93 26 01 	sts	0x0126, r24
		}
		if(keypad_A.flags & KB_CAL)
     d88:	80 91 26 01 	lds	r24, 0x0126
     d8c:	85 ff       	sbrs	r24, 5
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <main+0x58>
		{
			kalibracja(&encoder1,&encoder2,&telescope_A); // funkcja z pushto_lib
     d90:	4b e2       	ldi	r20, 0x2B	; 43
     d92:	51 e0       	ldi	r21, 0x01	; 1
     d94:	63 e4       	ldi	r22, 0x43	; 67
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	87 e2       	ldi	r24, 0x27	; 39
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 08 03 	call	0x610	; 0x610 <kalibracja>
			keypad_A.flags &= ~KB_CAL;
     da0:	80 91 26 01 	lds	r24, 0x0126
     da4:	8f 7d       	andi	r24, 0xDF	; 223
     da6:	80 93 26 01 	sts	0x0126, r24
		}
		if(keypad_A.flags & KB_CLR)
     daa:	80 91 26 01 	lds	r24, 0x0126
     dae:	84 ff       	sbrs	r24, 4
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <main+0x6e>
		{
			lcd_clr();
     db2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_clr>
			keypad_A.flags &= ~KB_CLR;
     db6:	80 91 26 01 	lds	r24, 0x0126
     dba:	8f 7e       	andi	r24, 0xEF	; 239
     dbc:	80 93 26 01 	sts	0x0126, r24
		}
		if(telescope_A.update)
     dc0:	80 91 2d 01 	lds	r24, 0x012D
     dc4:	90 91 2e 01 	lds	r25, 0x012E
     dc8:	89 2b       	or	r24, r25
     dca:	21 f0       	breq	.+8      	; 0xdd4 <main+0x82>
		{
			obliczenie_nastaw(&telescope_A); //funkcja na obliczenie nastaw, co 10sek (patrz ISR(TIMER1_COMPA_vect))
     dcc:	8b e2       	ldi	r24, 0x2B	; 43
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	0e 94 64 05 	call	0xac8	; 0xac8 <obliczenie_nastaw>
		}


		if(keypad_A.i > 14)
     dd4:	80 91 24 01 	lds	r24, 0x0124
     dd8:	90 91 25 01 	lds	r25, 0x0125
     ddc:	0f 97       	sbiw	r24, 0x0f	; 15
     dde:	0c f4       	brge	.+2      	; 0xde2 <main+0x90>
     de0:	bc cf       	rjmp	.-136    	; 0xd5a <main+0x8>
			keypad_A.i=0;
     de2:	10 92 25 01 	sts	0x0125, r1
     de6:	10 92 24 01 	sts	0x0124, r1
     dea:	b7 cf       	rjmp	.-146    	; 0xd5a <main+0x8>

00000dec <acos>:
     dec:	9f 93       	push	r25
     dee:	9f 77       	andi	r25, 0x7F	; 127
     df0:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_arccos>
     df4:	0f 90       	pop	r0
     df6:	00 20       	and	r0, r0
     df8:	42 f4       	brpl	.+16     	; 0xe0a <acos+0x1e>
     dfa:	90 58       	subi	r25, 0x80	; 128
     dfc:	a2 ea       	ldi	r26, 0xA2	; 162
     dfe:	2a ed       	ldi	r18, 0xDA	; 218
     e00:	3f e0       	ldi	r19, 0x0F	; 15
     e02:	49 e4       	ldi	r20, 0x49	; 73
     e04:	50 e4       	ldi	r21, 0x40	; 64
     e06:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
     e0a:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_round>

00000e0e <__subsf3>:
     e0e:	50 58       	subi	r21, 0x80	; 128

00000e10 <__addsf3>:
     e10:	bb 27       	eor	r27, r27
     e12:	aa 27       	eor	r26, r26
     e14:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
     e18:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_round>
     e1c:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
     e20:	38 f0       	brcs	.+14     	; 0xe30 <__addsf3+0x20>
     e22:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
     e26:	20 f0       	brcs	.+8      	; 0xe30 <__addsf3+0x20>
     e28:	39 f4       	brne	.+14     	; 0xe38 <__addsf3+0x28>
     e2a:	9f 3f       	cpi	r25, 0xFF	; 255
     e2c:	19 f4       	brne	.+6      	; 0xe34 <__addsf3+0x24>
     e2e:	26 f4       	brtc	.+8      	; 0xe38 <__addsf3+0x28>
     e30:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_nan>
     e34:	0e f4       	brtc	.+2      	; 0xe38 <__addsf3+0x28>
     e36:	e0 95       	com	r30
     e38:	e7 fb       	bst	r30, 7
     e3a:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_inf>

00000e3e <__addsf3x>:
     e3e:	e9 2f       	mov	r30, r25
     e40:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_split3>
     e44:	58 f3       	brcs	.-42     	; 0xe1c <__addsf3+0xc>
     e46:	ba 17       	cp	r27, r26
     e48:	62 07       	cpc	r22, r18
     e4a:	73 07       	cpc	r23, r19
     e4c:	84 07       	cpc	r24, r20
     e4e:	95 07       	cpc	r25, r21
     e50:	20 f0       	brcs	.+8      	; 0xe5a <__addsf3x+0x1c>
     e52:	79 f4       	brne	.+30     	; 0xe72 <__addsf3x+0x34>
     e54:	a6 f5       	brtc	.+104    	; 0xebe <__addsf3x+0x80>
     e56:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_zero>
     e5a:	0e f4       	brtc	.+2      	; 0xe5e <__addsf3x+0x20>
     e5c:	e0 95       	com	r30
     e5e:	0b 2e       	mov	r0, r27
     e60:	ba 2f       	mov	r27, r26
     e62:	a0 2d       	mov	r26, r0
     e64:	0b 01       	movw	r0, r22
     e66:	b9 01       	movw	r22, r18
     e68:	90 01       	movw	r18, r0
     e6a:	0c 01       	movw	r0, r24
     e6c:	ca 01       	movw	r24, r20
     e6e:	a0 01       	movw	r20, r0
     e70:	11 24       	eor	r1, r1
     e72:	ff 27       	eor	r31, r31
     e74:	59 1b       	sub	r21, r25
     e76:	99 f0       	breq	.+38     	; 0xe9e <__addsf3x+0x60>
     e78:	59 3f       	cpi	r21, 0xF9	; 249
     e7a:	50 f4       	brcc	.+20     	; 0xe90 <__addsf3x+0x52>
     e7c:	50 3e       	cpi	r21, 0xE0	; 224
     e7e:	68 f1       	brcs	.+90     	; 0xeda <__addsf3x+0x9c>
     e80:	1a 16       	cp	r1, r26
     e82:	f0 40       	sbci	r31, 0x00	; 0
     e84:	a2 2f       	mov	r26, r18
     e86:	23 2f       	mov	r18, r19
     e88:	34 2f       	mov	r19, r20
     e8a:	44 27       	eor	r20, r20
     e8c:	58 5f       	subi	r21, 0xF8	; 248
     e8e:	f3 cf       	rjmp	.-26     	; 0xe76 <__addsf3x+0x38>
     e90:	46 95       	lsr	r20
     e92:	37 95       	ror	r19
     e94:	27 95       	ror	r18
     e96:	a7 95       	ror	r26
     e98:	f0 40       	sbci	r31, 0x00	; 0
     e9a:	53 95       	inc	r21
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <__addsf3x+0x52>
     e9e:	7e f4       	brtc	.+30     	; 0xebe <__addsf3x+0x80>
     ea0:	1f 16       	cp	r1, r31
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	62 0b       	sbc	r22, r18
     ea6:	73 0b       	sbc	r23, r19
     ea8:	84 0b       	sbc	r24, r20
     eaa:	ba f0       	brmi	.+46     	; 0xeda <__addsf3x+0x9c>
     eac:	91 50       	subi	r25, 0x01	; 1
     eae:	a1 f0       	breq	.+40     	; 0xed8 <__addsf3x+0x9a>
     eb0:	ff 0f       	add	r31, r31
     eb2:	bb 1f       	adc	r27, r27
     eb4:	66 1f       	adc	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	c2 f7       	brpl	.-16     	; 0xeac <__addsf3x+0x6e>
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <__addsf3x+0x9c>
     ebe:	ba 0f       	add	r27, r26
     ec0:	62 1f       	adc	r22, r18
     ec2:	73 1f       	adc	r23, r19
     ec4:	84 1f       	adc	r24, r20
     ec6:	48 f4       	brcc	.+18     	; 0xeda <__addsf3x+0x9c>
     ec8:	87 95       	ror	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f7 95       	ror	r31
     ed2:	9e 3f       	cpi	r25, 0xFE	; 254
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__addsf3x+0x9a>
     ed6:	b0 cf       	rjmp	.-160    	; 0xe38 <__addsf3+0x28>
     ed8:	93 95       	inc	r25
     eda:	88 0f       	add	r24, r24
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__addsf3x+0xa2>
     ede:	99 27       	eor	r25, r25
     ee0:	ee 0f       	add	r30, r30
     ee2:	97 95       	ror	r25
     ee4:	87 95       	ror	r24
     ee6:	08 95       	ret

00000ee8 <asin>:
     ee8:	9f 93       	push	r25
     eea:	9f 77       	andi	r25, 0x7F	; 127
     eec:	ee e3       	ldi	r30, 0x3E	; 62
     eee:	89 37       	cpi	r24, 0x79	; 121
     ef0:	9e 07       	cpc	r25, r30
     ef2:	28 f4       	brcc	.+10     	; 0xefe <asin+0x16>
     ef4:	e4 e5       	ldi	r30, 0x54	; 84
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	0e 94 21 09 	call	0x1242	; 0x1242 <__fp_powsodd>
     efc:	0c c0       	rjmp	.+24     	; 0xf16 <asin+0x2e>
     efe:	0e 94 ad 08 	call	0x115a	; 0x115a <__fp_arccos>
     f02:	90 58       	subi	r25, 0x80	; 128
     f04:	a2 ea       	ldi	r26, 0xA2	; 162
     f06:	2a ed       	ldi	r18, 0xDA	; 218
     f08:	3f e0       	ldi	r19, 0x0F	; 15
     f0a:	49 ec       	ldi	r20, 0xC9	; 201
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
     f12:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_round>
     f16:	0f 90       	pop	r0
     f18:	07 fc       	sbrc	r0, 7
     f1a:	90 58       	subi	r25, 0x80	; 128
     f1c:	08 95       	ret

00000f1e <atan>:
     f1e:	df 93       	push	r29
     f20:	dd 27       	eor	r29, r29
     f22:	b9 2f       	mov	r27, r25
     f24:	bf 77       	andi	r27, 0x7F	; 127
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	5f e3       	ldi	r21, 0x3F	; 63
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	48 07       	cpc	r20, r24
     f30:	5b 07       	cpc	r21, r27
     f32:	18 f4       	brcc	.+6      	; 0xf3a <atan+0x1c>
     f34:	d9 2f       	mov	r29, r25
     f36:	0e 94 c1 09 	call	0x1382	; 0x1382 <inverse>
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	7f 93       	push	r23
     f40:	6f 93       	push	r22
     f42:	0e 94 84 0a 	call	0x1508	; 0x1508 <square>
     f46:	e8 e6       	ldi	r30, 0x68	; 104
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_powser>
     f4e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_round>
     f52:	2f 91       	pop	r18
     f54:	3f 91       	pop	r19
     f56:	4f 91       	pop	r20
     f58:	5f 91       	pop	r21
     f5a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__mulsf3x>
     f5e:	dd 23       	and	r29, r29
     f60:	51 f0       	breq	.+20     	; 0xf76 <atan+0x58>
     f62:	90 58       	subi	r25, 0x80	; 128
     f64:	a2 ea       	ldi	r26, 0xA2	; 162
     f66:	2a ed       	ldi	r18, 0xDA	; 218
     f68:	3f e0       	ldi	r19, 0x0F	; 15
     f6a:	49 ec       	ldi	r20, 0xC9	; 201
     f6c:	5f e3       	ldi	r21, 0x3F	; 63
     f6e:	d0 78       	andi	r29, 0x80	; 128
     f70:	5d 27       	eor	r21, r29
     f72:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
     f76:	df 91       	pop	r29
     f78:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_round>

00000f7c <__cmpsf2>:
     f7c:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_cmp>
     f80:	08 f4       	brcc	.+2      	; 0xf84 <__cmpsf2+0x8>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	08 95       	ret

00000f86 <cos>:
     f86:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_rempio2>
     f8a:	e3 95       	inc	r30
     f8c:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_sinus>

00000f90 <__divsf3>:
     f90:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__divsf3x>
     f94:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_round>
     f98:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
     f9c:	58 f0       	brcs	.+22     	; 0xfb4 <__divsf3+0x24>
     f9e:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
     fa2:	40 f0       	brcs	.+16     	; 0xfb4 <__divsf3+0x24>
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <__divsf3+0x20>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	29 f0       	breq	.+10     	; 0xfb4 <__divsf3+0x24>
     faa:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_inf>
     fae:	51 11       	cpse	r21, r1
     fb0:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_szero>
     fb4:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_nan>

00000fb8 <__divsf3x>:
     fb8:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_split3>
     fbc:	68 f3       	brcs	.-38     	; 0xf98 <__divsf3+0x8>

00000fbe <__divsf3_pse>:
     fbe:	99 23       	and	r25, r25
     fc0:	b1 f3       	breq	.-20     	; 0xfae <__divsf3+0x1e>
     fc2:	55 23       	and	r21, r21
     fc4:	91 f3       	breq	.-28     	; 0xfaa <__divsf3+0x1a>
     fc6:	95 1b       	sub	r25, r21
     fc8:	55 0b       	sbc	r21, r21
     fca:	bb 27       	eor	r27, r27
     fcc:	aa 27       	eor	r26, r26
     fce:	62 17       	cp	r22, r18
     fd0:	73 07       	cpc	r23, r19
     fd2:	84 07       	cpc	r24, r20
     fd4:	38 f0       	brcs	.+14     	; 0xfe4 <__divsf3_pse+0x26>
     fd6:	9f 5f       	subi	r25, 0xFF	; 255
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	44 1f       	adc	r20, r20
     fe0:	aa 1f       	adc	r26, r26
     fe2:	a9 f3       	breq	.-22     	; 0xfce <__divsf3_pse+0x10>
     fe4:	35 d0       	rcall	.+106    	; 0x1050 <__divsf3_pse+0x92>
     fe6:	0e 2e       	mov	r0, r30
     fe8:	3a f0       	brmi	.+14     	; 0xff8 <__divsf3_pse+0x3a>
     fea:	e0 e8       	ldi	r30, 0x80	; 128
     fec:	32 d0       	rcall	.+100    	; 0x1052 <__divsf3_pse+0x94>
     fee:	91 50       	subi	r25, 0x01	; 1
     ff0:	50 40       	sbci	r21, 0x00	; 0
     ff2:	e6 95       	lsr	r30
     ff4:	00 1c       	adc	r0, r0
     ff6:	ca f7       	brpl	.-14     	; 0xfea <__divsf3_pse+0x2c>
     ff8:	2b d0       	rcall	.+86     	; 0x1050 <__divsf3_pse+0x92>
     ffa:	fe 2f       	mov	r31, r30
     ffc:	29 d0       	rcall	.+82     	; 0x1050 <__divsf3_pse+0x92>
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	bb 1f       	adc	r27, r27
    1006:	26 17       	cp	r18, r22
    1008:	37 07       	cpc	r19, r23
    100a:	48 07       	cpc	r20, r24
    100c:	ab 07       	cpc	r26, r27
    100e:	b0 e8       	ldi	r27, 0x80	; 128
    1010:	09 f0       	breq	.+2      	; 0x1014 <__divsf3_pse+0x56>
    1012:	bb 0b       	sbc	r27, r27
    1014:	80 2d       	mov	r24, r0
    1016:	bf 01       	movw	r22, r30
    1018:	ff 27       	eor	r31, r31
    101a:	93 58       	subi	r25, 0x83	; 131
    101c:	5f 4f       	sbci	r21, 0xFF	; 255
    101e:	3a f0       	brmi	.+14     	; 0x102e <__divsf3_pse+0x70>
    1020:	9e 3f       	cpi	r25, 0xFE	; 254
    1022:	51 05       	cpc	r21, r1
    1024:	78 f0       	brcs	.+30     	; 0x1044 <__divsf3_pse+0x86>
    1026:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_inf>
    102a:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_szero>
    102e:	5f 3f       	cpi	r21, 0xFF	; 255
    1030:	e4 f3       	brlt	.-8      	; 0x102a <__divsf3_pse+0x6c>
    1032:	98 3e       	cpi	r25, 0xE8	; 232
    1034:	d4 f3       	brlt	.-12     	; 0x102a <__divsf3_pse+0x6c>
    1036:	86 95       	lsr	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__divsf3_pse+0x78>
    1044:	88 0f       	add	r24, r24
    1046:	91 1d       	adc	r25, r1
    1048:	96 95       	lsr	r25
    104a:	87 95       	ror	r24
    104c:	97 f9       	bld	r25, 7
    104e:	08 95       	ret
    1050:	e1 e0       	ldi	r30, 0x01	; 1
    1052:	66 0f       	add	r22, r22
    1054:	77 1f       	adc	r23, r23
    1056:	88 1f       	adc	r24, r24
    1058:	bb 1f       	adc	r27, r27
    105a:	62 17       	cp	r22, r18
    105c:	73 07       	cpc	r23, r19
    105e:	84 07       	cpc	r24, r20
    1060:	ba 07       	cpc	r27, r26
    1062:	20 f0       	brcs	.+8      	; 0x106c <__divsf3_pse+0xae>
    1064:	62 1b       	sub	r22, r18
    1066:	73 0b       	sbc	r23, r19
    1068:	84 0b       	sbc	r24, r20
    106a:	ba 0b       	sbc	r27, r26
    106c:	ee 1f       	adc	r30, r30
    106e:	88 f7       	brcc	.-30     	; 0x1052 <__divsf3_pse+0x94>
    1070:	e0 95       	com	r30
    1072:	08 95       	ret

00001074 <__fixsfsi>:
    1074:	0e 94 41 08 	call	0x1082	; 0x1082 <__fixunssfsi>
    1078:	68 94       	set
    107a:	b1 11       	cpse	r27, r1
    107c:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_szero>
    1080:	08 95       	ret

00001082 <__fixunssfsi>:
    1082:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_splitA>
    1086:	88 f0       	brcs	.+34     	; 0x10aa <__fixunssfsi+0x28>
    1088:	9f 57       	subi	r25, 0x7F	; 127
    108a:	98 f0       	brcs	.+38     	; 0x10b2 <__fixunssfsi+0x30>
    108c:	b9 2f       	mov	r27, r25
    108e:	99 27       	eor	r25, r25
    1090:	b7 51       	subi	r27, 0x17	; 23
    1092:	b0 f0       	brcs	.+44     	; 0x10c0 <__fixunssfsi+0x3e>
    1094:	e1 f0       	breq	.+56     	; 0x10ce <__fixunssfsi+0x4c>
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	1a f0       	brmi	.+6      	; 0x10a6 <__fixunssfsi+0x24>
    10a0:	ba 95       	dec	r27
    10a2:	c9 f7       	brne	.-14     	; 0x1096 <__fixunssfsi+0x14>
    10a4:	14 c0       	rjmp	.+40     	; 0x10ce <__fixunssfsi+0x4c>
    10a6:	b1 30       	cpi	r27, 0x01	; 1
    10a8:	91 f0       	breq	.+36     	; 0x10ce <__fixunssfsi+0x4c>
    10aa:	0e 94 b5 09 	call	0x136a	; 0x136a <__fp_zero>
    10ae:	b1 e0       	ldi	r27, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_zero>
    10b6:	67 2f       	mov	r22, r23
    10b8:	78 2f       	mov	r23, r24
    10ba:	88 27       	eor	r24, r24
    10bc:	b8 5f       	subi	r27, 0xF8	; 248
    10be:	39 f0       	breq	.+14     	; 0x10ce <__fixunssfsi+0x4c>
    10c0:	b9 3f       	cpi	r27, 0xF9	; 249
    10c2:	cc f3       	brlt	.-14     	; 0x10b6 <__fixunssfsi+0x34>
    10c4:	86 95       	lsr	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b3 95       	inc	r27
    10cc:	d9 f7       	brne	.-10     	; 0x10c4 <__fixunssfsi+0x42>
    10ce:	3e f4       	brtc	.+14     	; 0x10de <__fixunssfsi+0x5c>
    10d0:	90 95       	com	r25
    10d2:	80 95       	com	r24
    10d4:	70 95       	com	r23
    10d6:	61 95       	neg	r22
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	8f 4f       	sbci	r24, 0xFF	; 255
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	08 95       	ret

000010e0 <__floatunsisf>:
    10e0:	e8 94       	clt
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <__floatsisf+0x12>

000010e4 <__floatsisf>:
    10e4:	97 fb       	bst	r25, 7
    10e6:	3e f4       	brtc	.+14     	; 0x10f6 <__floatsisf+0x12>
    10e8:	90 95       	com	r25
    10ea:	80 95       	com	r24
    10ec:	70 95       	com	r23
    10ee:	61 95       	neg	r22
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	99 23       	and	r25, r25
    10f8:	a9 f0       	breq	.+42     	; 0x1124 <__floatsisf+0x40>
    10fa:	f9 2f       	mov	r31, r25
    10fc:	96 e9       	ldi	r25, 0x96	; 150
    10fe:	bb 27       	eor	r27, r27
    1100:	93 95       	inc	r25
    1102:	f6 95       	lsr	r31
    1104:	87 95       	ror	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	b7 95       	ror	r27
    110c:	f1 11       	cpse	r31, r1
    110e:	f8 cf       	rjmp	.-16     	; 0x1100 <__floatsisf+0x1c>
    1110:	fa f4       	brpl	.+62     	; 0x1150 <__floatsisf+0x6c>
    1112:	bb 0f       	add	r27, r27
    1114:	11 f4       	brne	.+4      	; 0x111a <__floatsisf+0x36>
    1116:	60 ff       	sbrs	r22, 0
    1118:	1b c0       	rjmp	.+54     	; 0x1150 <__floatsisf+0x6c>
    111a:	6f 5f       	subi	r22, 0xFF	; 255
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	8f 4f       	sbci	r24, 0xFF	; 255
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	16 c0       	rjmp	.+44     	; 0x1150 <__floatsisf+0x6c>
    1124:	88 23       	and	r24, r24
    1126:	11 f0       	breq	.+4      	; 0x112c <__floatsisf+0x48>
    1128:	96 e9       	ldi	r25, 0x96	; 150
    112a:	11 c0       	rjmp	.+34     	; 0x114e <__floatsisf+0x6a>
    112c:	77 23       	and	r23, r23
    112e:	21 f0       	breq	.+8      	; 0x1138 <__floatsisf+0x54>
    1130:	9e e8       	ldi	r25, 0x8E	; 142
    1132:	87 2f       	mov	r24, r23
    1134:	76 2f       	mov	r23, r22
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <__floatsisf+0x5e>
    1138:	66 23       	and	r22, r22
    113a:	71 f0       	breq	.+28     	; 0x1158 <__floatsisf+0x74>
    113c:	96 e8       	ldi	r25, 0x86	; 134
    113e:	86 2f       	mov	r24, r22
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	2a f0       	brmi	.+10     	; 0x1150 <__floatsisf+0x6c>
    1146:	9a 95       	dec	r25
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	88 1f       	adc	r24, r24
    114e:	da f7       	brpl	.-10     	; 0x1146 <__floatsisf+0x62>
    1150:	88 0f       	add	r24, r24
    1152:	96 95       	lsr	r25
    1154:	87 95       	ror	r24
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <__fp_arccos>:
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	1f 93       	push	r17
    1160:	0f 93       	push	r16
    1162:	8b 01       	movw	r16, r22
    1164:	ec 01       	movw	r28, r24
    1166:	e5 e9       	ldi	r30, 0x95	; 149
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_powser>
    116e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_round>
    1172:	98 01       	movw	r18, r16
    1174:	ae 01       	movw	r20, r28
    1176:	8b 01       	movw	r16, r22
    1178:	ec 01       	movw	r28, r24
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	80 e8       	ldi	r24, 0x80	; 128
    1180:	9f e3       	ldi	r25, 0x3F	; 63
    1182:	0e 94 07 07 	call	0xe0e	; 0xe0e <__subsf3>
    1186:	0e 94 44 0a 	call	0x1488	; 0x1488 <sqrt>
    118a:	98 01       	movw	r18, r16
    118c:	ae 01       	movw	r20, r28
    118e:	0f 91       	pop	r16
    1190:	1f 91       	pop	r17
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__mulsf3x>

0000119a <__fp_cmp>:
    119a:	99 0f       	add	r25, r25
    119c:	00 08       	sbc	r0, r0
    119e:	55 0f       	add	r21, r21
    11a0:	aa 0b       	sbc	r26, r26
    11a2:	e0 e8       	ldi	r30, 0x80	; 128
    11a4:	fe ef       	ldi	r31, 0xFE	; 254
    11a6:	16 16       	cp	r1, r22
    11a8:	17 06       	cpc	r1, r23
    11aa:	e8 07       	cpc	r30, r24
    11ac:	f9 07       	cpc	r31, r25
    11ae:	c0 f0       	brcs	.+48     	; 0x11e0 <__fp_cmp+0x46>
    11b0:	12 16       	cp	r1, r18
    11b2:	13 06       	cpc	r1, r19
    11b4:	e4 07       	cpc	r30, r20
    11b6:	f5 07       	cpc	r31, r21
    11b8:	98 f0       	brcs	.+38     	; 0x11e0 <__fp_cmp+0x46>
    11ba:	62 1b       	sub	r22, r18
    11bc:	73 0b       	sbc	r23, r19
    11be:	84 0b       	sbc	r24, r20
    11c0:	95 0b       	sbc	r25, r21
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <__fp_cmp+0x38>
    11c4:	0a 26       	eor	r0, r26
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <__fp_cmp+0x46>
    11c8:	23 2b       	or	r18, r19
    11ca:	24 2b       	or	r18, r20
    11cc:	25 2b       	or	r18, r21
    11ce:	21 f4       	brne	.+8      	; 0x11d8 <__fp_cmp+0x3e>
    11d0:	08 95       	ret
    11d2:	0a 26       	eor	r0, r26
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <__fp_cmp+0x3e>
    11d6:	a1 40       	sbci	r26, 0x01	; 1
    11d8:	a6 95       	lsr	r26
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	81 1d       	adc	r24, r1
    11de:	81 1d       	adc	r24, r1
    11e0:	08 95       	ret

000011e2 <__fp_inf>:
    11e2:	97 f9       	bld	r25, 7
    11e4:	9f 67       	ori	r25, 0x7F	; 127
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	08 95       	ret

000011ee <__fp_nan>:
    11ee:	9f ef       	ldi	r25, 0xFF	; 255
    11f0:	80 ec       	ldi	r24, 0xC0	; 192
    11f2:	08 95       	ret

000011f4 <__fp_powser>:
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	1f 93       	push	r17
    11fa:	0f 93       	push	r16
    11fc:	ff 92       	push	r15
    11fe:	ef 92       	push	r14
    1200:	df 92       	push	r13
    1202:	7b 01       	movw	r14, r22
    1204:	8c 01       	movw	r16, r24
    1206:	68 94       	set
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <__fp_powser+0x22>
    120a:	da 2e       	mov	r13, r26
    120c:	ef 01       	movw	r28, r30
    120e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__mulsf3x>
    1212:	fe 01       	movw	r30, r28
    1214:	e8 94       	clt
    1216:	a5 91       	lpm	r26, Z+
    1218:	25 91       	lpm	r18, Z+
    121a:	35 91       	lpm	r19, Z+
    121c:	45 91       	lpm	r20, Z+
    121e:	55 91       	lpm	r21, Z+
    1220:	a6 f3       	brts	.-24     	; 0x120a <__fp_powser+0x16>
    1222:	ef 01       	movw	r28, r30
    1224:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
    1228:	fe 01       	movw	r30, r28
    122a:	97 01       	movw	r18, r14
    122c:	a8 01       	movw	r20, r16
    122e:	da 94       	dec	r13
    1230:	69 f7       	brne	.-38     	; 0x120c <__fp_powser+0x18>
    1232:	df 90       	pop	r13
    1234:	ef 90       	pop	r14
    1236:	ff 90       	pop	r15
    1238:	0f 91       	pop	r16
    123a:	1f 91       	pop	r17
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <__fp_powsodd>:
    1242:	9f 93       	push	r25
    1244:	8f 93       	push	r24
    1246:	7f 93       	push	r23
    1248:	6f 93       	push	r22
    124a:	ff 93       	push	r31
    124c:	ef 93       	push	r30
    124e:	9b 01       	movw	r18, r22
    1250:	ac 01       	movw	r20, r24
    1252:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3>
    1256:	ef 91       	pop	r30
    1258:	ff 91       	pop	r31
    125a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_powser>
    125e:	2f 91       	pop	r18
    1260:	3f 91       	pop	r19
    1262:	4f 91       	pop	r20
    1264:	5f 91       	pop	r21
    1266:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__mulsf3>

0000126a <__fp_pscA>:
    126a:	00 24       	eor	r0, r0
    126c:	0a 94       	dec	r0
    126e:	16 16       	cp	r1, r22
    1270:	17 06       	cpc	r1, r23
    1272:	18 06       	cpc	r1, r24
    1274:	09 06       	cpc	r0, r25
    1276:	08 95       	ret

00001278 <__fp_pscB>:
    1278:	00 24       	eor	r0, r0
    127a:	0a 94       	dec	r0
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	14 06       	cpc	r1, r20
    1282:	05 06       	cpc	r0, r21
    1284:	08 95       	ret
    1286:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_nan>

0000128a <__fp_rempio2>:
    128a:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_splitA>
    128e:	d8 f3       	brcs	.-10     	; 0x1286 <__fp_pscB+0xe>
    1290:	e8 94       	clt
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	bb 27       	eor	r27, r27
    1296:	9f 57       	subi	r25, 0x7F	; 127
    1298:	f0 f0       	brcs	.+60     	; 0x12d6 <__fp_rempio2+0x4c>
    129a:	2a ed       	ldi	r18, 0xDA	; 218
    129c:	3f e0       	ldi	r19, 0x0F	; 15
    129e:	49 ec       	ldi	r20, 0xC9	; 201
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <__fp_rempio2+0x24>
    12a2:	ee 0f       	add	r30, r30
    12a4:	bb 0f       	add	r27, r27
    12a6:	66 1f       	adc	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	88 1f       	adc	r24, r24
    12ac:	28 f0       	brcs	.+10     	; 0x12b8 <__fp_rempio2+0x2e>
    12ae:	b2 3a       	cpi	r27, 0xA2	; 162
    12b0:	62 07       	cpc	r22, r18
    12b2:	73 07       	cpc	r23, r19
    12b4:	84 07       	cpc	r24, r20
    12b6:	28 f0       	brcs	.+10     	; 0x12c2 <__fp_rempio2+0x38>
    12b8:	b2 5a       	subi	r27, 0xA2	; 162
    12ba:	62 0b       	sbc	r22, r18
    12bc:	73 0b       	sbc	r23, r19
    12be:	84 0b       	sbc	r24, r20
    12c0:	e3 95       	inc	r30
    12c2:	9a 95       	dec	r25
    12c4:	72 f7       	brpl	.-36     	; 0x12a2 <__fp_rempio2+0x18>
    12c6:	80 38       	cpi	r24, 0x80	; 128
    12c8:	30 f4       	brcc	.+12     	; 0x12d6 <__fp_rempio2+0x4c>
    12ca:	9a 95       	dec	r25
    12cc:	bb 0f       	add	r27, r27
    12ce:	66 1f       	adc	r22, r22
    12d0:	77 1f       	adc	r23, r23
    12d2:	88 1f       	adc	r24, r24
    12d4:	d2 f7       	brpl	.-12     	; 0x12ca <__fp_rempio2+0x40>
    12d6:	90 48       	sbci	r25, 0x80	; 128
    12d8:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_mpack_finite>

000012dc <__fp_round>:
    12dc:	09 2e       	mov	r0, r25
    12de:	03 94       	inc	r0
    12e0:	00 0c       	add	r0, r0
    12e2:	11 f4       	brne	.+4      	; 0x12e8 <__fp_round+0xc>
    12e4:	88 23       	and	r24, r24
    12e6:	52 f0       	brmi	.+20     	; 0x12fc <__fp_round+0x20>
    12e8:	bb 0f       	add	r27, r27
    12ea:	40 f4       	brcc	.+16     	; 0x12fc <__fp_round+0x20>
    12ec:	bf 2b       	or	r27, r31
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__fp_round+0x18>
    12f0:	60 ff       	sbrs	r22, 0
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <__fp_round+0x20>
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	08 95       	ret

000012fe <__fp_sinus>:
    12fe:	ef 93       	push	r30
    1300:	e0 ff       	sbrs	r30, 0
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <__fp_sinus+0x14>
    1304:	a2 ea       	ldi	r26, 0xA2	; 162
    1306:	2a ed       	ldi	r18, 0xDA	; 218
    1308:	3f e0       	ldi	r19, 0x0F	; 15
    130a:	49 ec       	ldi	r20, 0xC9	; 201
    130c:	5f eb       	ldi	r21, 0xBF	; 191
    130e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
    1312:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_round>
    1316:	0f 90       	pop	r0
    1318:	03 94       	inc	r0
    131a:	01 fc       	sbrc	r0, 1
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	ed eb       	ldi	r30, 0xBD	; 189
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_powsodd>

00001326 <__fp_split3>:
    1326:	57 fd       	sbrc	r21, 7
    1328:	90 58       	subi	r25, 0x80	; 128
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	59 f0       	breq	.+22     	; 0x1346 <__fp_splitA+0x10>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	71 f0       	breq	.+28     	; 0x1350 <__fp_splitA+0x1a>
    1334:	47 95       	ror	r20

00001336 <__fp_splitA>:
    1336:	88 0f       	add	r24, r24
    1338:	97 fb       	bst	r25, 7
    133a:	99 1f       	adc	r25, r25
    133c:	61 f0       	breq	.+24     	; 0x1356 <__fp_splitA+0x20>
    133e:	9f 3f       	cpi	r25, 0xFF	; 255
    1340:	79 f0       	breq	.+30     	; 0x1360 <__fp_splitA+0x2a>
    1342:	87 95       	ror	r24
    1344:	08 95       	ret
    1346:	12 16       	cp	r1, r18
    1348:	13 06       	cpc	r1, r19
    134a:	14 06       	cpc	r1, r20
    134c:	55 1f       	adc	r21, r21
    134e:	f2 cf       	rjmp	.-28     	; 0x1334 <__fp_split3+0xe>
    1350:	46 95       	lsr	r20
    1352:	f1 df       	rcall	.-30     	; 0x1336 <__fp_splitA>
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <__fp_splitA+0x30>
    1356:	16 16       	cp	r1, r22
    1358:	17 06       	cpc	r1, r23
    135a:	18 06       	cpc	r1, r24
    135c:	99 1f       	adc	r25, r25
    135e:	f1 cf       	rjmp	.-30     	; 0x1342 <__fp_splitA+0xc>
    1360:	86 95       	lsr	r24
    1362:	71 05       	cpc	r23, r1
    1364:	61 05       	cpc	r22, r1
    1366:	08 94       	sec
    1368:	08 95       	ret

0000136a <__fp_zero>:
    136a:	e8 94       	clt

0000136c <__fp_szero>:
    136c:	bb 27       	eor	r27, r27
    136e:	66 27       	eor	r22, r22
    1370:	77 27       	eor	r23, r23
    1372:	cb 01       	movw	r24, r22
    1374:	97 f9       	bld	r25, 7
    1376:	08 95       	ret

00001378 <__gesf2>:
    1378:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_cmp>
    137c:	08 f4       	brcc	.+2      	; 0x1380 <__gesf2+0x8>
    137e:	8f ef       	ldi	r24, 0xFF	; 255
    1380:	08 95       	ret

00001382 <inverse>:
    1382:	9b 01       	movw	r18, r22
    1384:	ac 01       	movw	r20, r24
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	80 e8       	ldi	r24, 0x80	; 128
    138c:	9f e3       	ldi	r25, 0x3F	; 63
    138e:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__divsf3>

00001392 <__mulsf3>:
    1392:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__mulsf3x>
    1396:	0c 94 6e 09 	jmp	0x12dc	; 0x12dc <__fp_round>
    139a:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_pscA>
    139e:	38 f0       	brcs	.+14     	; 0x13ae <__mulsf3+0x1c>
    13a0:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fp_pscB>
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <__mulsf3+0x1c>
    13a6:	95 23       	and	r25, r21
    13a8:	11 f0       	breq	.+4      	; 0x13ae <__mulsf3+0x1c>
    13aa:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_inf>
    13ae:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_nan>
    13b2:	11 24       	eor	r1, r1
    13b4:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_szero>

000013b8 <__mulsf3x>:
    13b8:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_split3>
    13bc:	70 f3       	brcs	.-36     	; 0x139a <__mulsf3+0x8>

000013be <__mulsf3_pse>:
    13be:	95 9f       	mul	r25, r21
    13c0:	c1 f3       	breq	.-16     	; 0x13b2 <__mulsf3+0x20>
    13c2:	95 0f       	add	r25, r21
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	55 1f       	adc	r21, r21
    13c8:	62 9f       	mul	r22, r18
    13ca:	f0 01       	movw	r30, r0
    13cc:	72 9f       	mul	r23, r18
    13ce:	bb 27       	eor	r27, r27
    13d0:	f0 0d       	add	r31, r0
    13d2:	b1 1d       	adc	r27, r1
    13d4:	63 9f       	mul	r22, r19
    13d6:	aa 27       	eor	r26, r26
    13d8:	f0 0d       	add	r31, r0
    13da:	b1 1d       	adc	r27, r1
    13dc:	aa 1f       	adc	r26, r26
    13de:	64 9f       	mul	r22, r20
    13e0:	66 27       	eor	r22, r22
    13e2:	b0 0d       	add	r27, r0
    13e4:	a1 1d       	adc	r26, r1
    13e6:	66 1f       	adc	r22, r22
    13e8:	82 9f       	mul	r24, r18
    13ea:	22 27       	eor	r18, r18
    13ec:	b0 0d       	add	r27, r0
    13ee:	a1 1d       	adc	r26, r1
    13f0:	62 1f       	adc	r22, r18
    13f2:	73 9f       	mul	r23, r19
    13f4:	b0 0d       	add	r27, r0
    13f6:	a1 1d       	adc	r26, r1
    13f8:	62 1f       	adc	r22, r18
    13fa:	83 9f       	mul	r24, r19
    13fc:	a0 0d       	add	r26, r0
    13fe:	61 1d       	adc	r22, r1
    1400:	22 1f       	adc	r18, r18
    1402:	74 9f       	mul	r23, r20
    1404:	33 27       	eor	r19, r19
    1406:	a0 0d       	add	r26, r0
    1408:	61 1d       	adc	r22, r1
    140a:	23 1f       	adc	r18, r19
    140c:	84 9f       	mul	r24, r20
    140e:	60 0d       	add	r22, r0
    1410:	21 1d       	adc	r18, r1
    1412:	82 2f       	mov	r24, r18
    1414:	76 2f       	mov	r23, r22
    1416:	6a 2f       	mov	r22, r26
    1418:	11 24       	eor	r1, r1
    141a:	9f 57       	subi	r25, 0x7F	; 127
    141c:	50 40       	sbci	r21, 0x00	; 0
    141e:	9a f0       	brmi	.+38     	; 0x1446 <__mulsf3_pse+0x88>
    1420:	f1 f0       	breq	.+60     	; 0x145e <__mulsf3_pse+0xa0>
    1422:	88 23       	and	r24, r24
    1424:	4a f0       	brmi	.+18     	; 0x1438 <__mulsf3_pse+0x7a>
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	bb 1f       	adc	r27, r27
    142c:	66 1f       	adc	r22, r22
    142e:	77 1f       	adc	r23, r23
    1430:	88 1f       	adc	r24, r24
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	50 40       	sbci	r21, 0x00	; 0
    1436:	a9 f7       	brne	.-22     	; 0x1422 <__mulsf3_pse+0x64>
    1438:	9e 3f       	cpi	r25, 0xFE	; 254
    143a:	51 05       	cpc	r21, r1
    143c:	80 f0       	brcs	.+32     	; 0x145e <__mulsf3_pse+0xa0>
    143e:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_inf>
    1442:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_szero>
    1446:	5f 3f       	cpi	r21, 0xFF	; 255
    1448:	e4 f3       	brlt	.-8      	; 0x1442 <__mulsf3_pse+0x84>
    144a:	98 3e       	cpi	r25, 0xE8	; 232
    144c:	d4 f3       	brlt	.-12     	; 0x1442 <__mulsf3_pse+0x84>
    144e:	86 95       	lsr	r24
    1450:	77 95       	ror	r23
    1452:	67 95       	ror	r22
    1454:	b7 95       	ror	r27
    1456:	f7 95       	ror	r31
    1458:	e7 95       	ror	r30
    145a:	9f 5f       	subi	r25, 0xFF	; 255
    145c:	c1 f7       	brne	.-16     	; 0x144e <__mulsf3_pse+0x90>
    145e:	fe 2b       	or	r31, r30
    1460:	88 0f       	add	r24, r24
    1462:	91 1d       	adc	r25, r1
    1464:	96 95       	lsr	r25
    1466:	87 95       	ror	r24
    1468:	97 f9       	bld	r25, 7
    146a:	08 95       	ret

0000146c <sin>:
    146c:	9f 93       	push	r25
    146e:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_rempio2>
    1472:	0f 90       	pop	r0
    1474:	07 fc       	sbrc	r0, 7
    1476:	ee 5f       	subi	r30, 0xFE	; 254
    1478:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__fp_sinus>
    147c:	19 f4       	brne	.+6      	; 0x1484 <sin+0x18>
    147e:	16 f4       	brtc	.+4      	; 0x1484 <sin+0x18>
    1480:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__fp_nan>
    1484:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__fp_mpack>

00001488 <sqrt>:
    1488:	0e 94 9b 09 	call	0x1336	; 0x1336 <__fp_splitA>
    148c:	b8 f3       	brcs	.-18     	; 0x147c <sin+0x10>
    148e:	99 23       	and	r25, r25
    1490:	c9 f3       	breq	.-14     	; 0x1484 <sin+0x18>
    1492:	b6 f3       	brts	.-20     	; 0x1480 <sin+0x14>
    1494:	9f 57       	subi	r25, 0x7F	; 127
    1496:	55 0b       	sbc	r21, r21
    1498:	87 ff       	sbrs	r24, 7
    149a:	0e 94 96 0a 	call	0x152c	; 0x152c <__fp_norm2>
    149e:	00 24       	eor	r0, r0
    14a0:	a0 e6       	ldi	r26, 0x60	; 96
    14a2:	40 ea       	ldi	r20, 0xA0	; 160
    14a4:	90 01       	movw	r18, r0
    14a6:	80 58       	subi	r24, 0x80	; 128
    14a8:	56 95       	lsr	r21
    14aa:	97 95       	ror	r25
    14ac:	28 f4       	brcc	.+10     	; 0x14b8 <sqrt+0x30>
    14ae:	80 5c       	subi	r24, 0xC0	; 192
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	20 f0       	brcs	.+8      	; 0x14c0 <sqrt+0x38>
    14b8:	26 17       	cp	r18, r22
    14ba:	37 07       	cpc	r19, r23
    14bc:	48 07       	cpc	r20, r24
    14be:	30 f4       	brcc	.+12     	; 0x14cc <sqrt+0x44>
    14c0:	62 1b       	sub	r22, r18
    14c2:	73 0b       	sbc	r23, r19
    14c4:	84 0b       	sbc	r24, r20
    14c6:	20 29       	or	r18, r0
    14c8:	31 29       	or	r19, r1
    14ca:	4a 2b       	or	r20, r26
    14cc:	a6 95       	lsr	r26
    14ce:	17 94       	ror	r1
    14d0:	07 94       	ror	r0
    14d2:	20 25       	eor	r18, r0
    14d4:	31 25       	eor	r19, r1
    14d6:	4a 27       	eor	r20, r26
    14d8:	58 f7       	brcc	.-42     	; 0x14b0 <sqrt+0x28>
    14da:	66 0f       	add	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <sqrt+0x62>
    14e2:	26 17       	cp	r18, r22
    14e4:	37 07       	cpc	r19, r23
    14e6:	48 07       	cpc	r20, r24
    14e8:	30 f4       	brcc	.+12     	; 0x14f6 <sqrt+0x6e>
    14ea:	62 0b       	sbc	r22, r18
    14ec:	73 0b       	sbc	r23, r19
    14ee:	84 0b       	sbc	r24, r20
    14f0:	20 0d       	add	r18, r0
    14f2:	31 1d       	adc	r19, r1
    14f4:	41 1d       	adc	r20, r1
    14f6:	a0 95       	com	r26
    14f8:	81 f7       	brne	.-32     	; 0x14da <sqrt+0x52>
    14fa:	b9 01       	movw	r22, r18
    14fc:	84 2f       	mov	r24, r20
    14fe:	91 58       	subi	r25, 0x81	; 129
    1500:	88 0f       	add	r24, r24
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	08 95       	ret

00001508 <square>:
    1508:	9b 01       	movw	r18, r22
    150a:	ac 01       	movw	r20, r24
    150c:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__mulsf3>

00001510 <__fp_mpack>:
    1510:	9f 3f       	cpi	r25, 0xFF	; 255
    1512:	31 f0       	breq	.+12     	; 0x1520 <__fp_mpack_finite+0xc>

00001514 <__fp_mpack_finite>:
    1514:	91 50       	subi	r25, 0x01	; 1
    1516:	20 f4       	brcc	.+8      	; 0x1520 <__fp_mpack_finite+0xc>
    1518:	87 95       	ror	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	b7 95       	ror	r27
    1520:	88 0f       	add	r24, r24
    1522:	91 1d       	adc	r25, r1
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <__fp_norm2>:
    152c:	91 50       	subi	r25, 0x01	; 1
    152e:	50 40       	sbci	r21, 0x00	; 0
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	d2 f7       	brpl	.-12     	; 0x152c <__fp_norm2>
    1538:	08 95       	ret

0000153a <__divmodhi4>:
    153a:	97 fb       	bst	r25, 7
    153c:	07 2e       	mov	r0, r23
    153e:	16 f4       	brtc	.+4      	; 0x1544 <__divmodhi4+0xa>
    1540:	00 94       	com	r0
    1542:	07 d0       	rcall	.+14     	; 0x1552 <__divmodhi4_neg1>
    1544:	77 fd       	sbrc	r23, 7
    1546:	09 d0       	rcall	.+18     	; 0x155a <__divmodhi4_neg2>
    1548:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__udivmodhi4>
    154c:	07 fc       	sbrc	r0, 7
    154e:	05 d0       	rcall	.+10     	; 0x155a <__divmodhi4_neg2>
    1550:	3e f4       	brtc	.+14     	; 0x1560 <__divmodhi4_exit>

00001552 <__divmodhi4_neg1>:
    1552:	90 95       	com	r25
    1554:	81 95       	neg	r24
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <__divmodhi4_neg2>:
    155a:	70 95       	com	r23
    155c:	61 95       	neg	r22
    155e:	7f 4f       	sbci	r23, 0xFF	; 255

00001560 <__divmodhi4_exit>:
    1560:	08 95       	ret

00001562 <__udivmodhi4>:
    1562:	aa 1b       	sub	r26, r26
    1564:	bb 1b       	sub	r27, r27
    1566:	51 e1       	ldi	r21, 0x11	; 17
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <__udivmodhi4_ep>

0000156a <__udivmodhi4_loop>:
    156a:	aa 1f       	adc	r26, r26
    156c:	bb 1f       	adc	r27, r27
    156e:	a6 17       	cp	r26, r22
    1570:	b7 07       	cpc	r27, r23
    1572:	10 f0       	brcs	.+4      	; 0x1578 <__udivmodhi4_ep>
    1574:	a6 1b       	sub	r26, r22
    1576:	b7 0b       	sbc	r27, r23

00001578 <__udivmodhi4_ep>:
    1578:	88 1f       	adc	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	5a 95       	dec	r21
    157e:	a9 f7       	brne	.-22     	; 0x156a <__udivmodhi4_loop>
    1580:	80 95       	com	r24
    1582:	90 95       	com	r25
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	08 95       	ret

0000158a <sscanf>:
    158a:	ae e0       	ldi	r26, 0x0E	; 14
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb ec       	ldi	r30, 0xCB	; 203
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__prologue_saves__+0x20>
    1596:	85 e0       	ldi	r24, 0x05	; 5
    1598:	8c 83       	std	Y+4, r24	; 0x04
    159a:	8b 89       	ldd	r24, Y+19	; 0x13
    159c:	9c 89       	ldd	r25, Y+20	; 0x14
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	ae 01       	movw	r20, r28
    15a4:	49 5e       	subi	r20, 0xE9	; 233
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255
    15a8:	6d 89       	ldd	r22, Y+21	; 0x15
    15aa:	7e 89       	ldd	r23, Y+22	; 0x16
    15ac:	ce 01       	movw	r24, r28
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <vfscanf>
    15b4:	2e 96       	adiw	r28, 0x0e	; 14
    15b6:	e2 e0       	ldi	r30, 0x02	; 2
    15b8:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__epilogue_restores__+0x20>

000015bc <putval>:
    15bc:	20 fd       	sbrc	r18, 0
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <putval+0x16>
    15c0:	fc 01       	movw	r30, r24
    15c2:	23 fd       	sbrc	r18, 3
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <putval+0x14>
    15c6:	22 ff       	sbrs	r18, 2
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <putval+0x12>
    15ca:	73 83       	std	Z+3, r23	; 0x03
    15cc:	62 83       	std	Z+2, r22	; 0x02
    15ce:	51 83       	std	Z+1, r21	; 0x01
    15d0:	40 83       	st	Z, r20
    15d2:	08 95       	ret

000015d4 <mulacc>:
    15d4:	44 fd       	sbrc	r20, 4
    15d6:	10 c0       	rjmp	.+32     	; 0x15f8 <mulacc+0x24>
    15d8:	46 fd       	sbrc	r20, 6
    15da:	10 c0       	rjmp	.+32     	; 0x15fc <mulacc+0x28>
    15dc:	db 01       	movw	r26, r22
    15de:	fc 01       	movw	r30, r24
    15e0:	aa 0f       	add	r26, r26
    15e2:	bb 1f       	adc	r27, r27
    15e4:	ee 1f       	adc	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	10 94       	com	r1
    15ea:	d1 f7       	brne	.-12     	; 0x15e0 <mulacc+0xc>
    15ec:	6a 0f       	add	r22, r26
    15ee:	7b 1f       	adc	r23, r27
    15f0:	8e 1f       	adc	r24, r30
    15f2:	9f 1f       	adc	r25, r31
    15f4:	31 e0       	ldi	r19, 0x01	; 1
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <mulacc+0x2a>
    15f8:	33 e0       	ldi	r19, 0x03	; 3
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <mulacc+0x2a>
    15fc:	34 e0       	ldi	r19, 0x04	; 4
    15fe:	66 0f       	add	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	88 1f       	adc	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	31 50       	subi	r19, 0x01	; 1
    1608:	d1 f7       	brne	.-12     	; 0x15fe <mulacc+0x2a>
    160a:	62 0f       	add	r22, r18
    160c:	71 1d       	adc	r23, r1
    160e:	81 1d       	adc	r24, r1
    1610:	91 1d       	adc	r25, r1
    1612:	08 95       	ret

00001614 <skip_spaces>:
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	8c 01       	movw	r16, r24
    161e:	c8 01       	movw	r24, r16
    1620:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1624:	ec 01       	movw	r28, r24
    1626:	97 fd       	sbrc	r25, 7
    1628:	08 c0       	rjmp	.+16     	; 0x163a <skip_spaces+0x26>
    162a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <isspace>
    162e:	89 2b       	or	r24, r25
    1630:	b1 f7       	brne	.-20     	; 0x161e <skip_spaces+0xa>
    1632:	b8 01       	movw	r22, r16
    1634:	ce 01       	movw	r24, r28
    1636:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <ungetc>
    163a:	ce 01       	movw	r24, r28
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <conv_int>:
    1646:	a1 e0       	ldi	r26, 0x01	; 1
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e9 e2       	ldi	r30, 0x29	; 41
    164c:	fb e0       	ldi	r31, 0x0B	; 11
    164e:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__prologue_saves__+0xc>
    1652:	8c 01       	movw	r16, r24
    1654:	c6 2e       	mov	r12, r22
    1656:	7a 01       	movw	r14, r20
    1658:	29 83       	std	Y+1, r18	; 0x01
    165a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    165e:	ac 01       	movw	r20, r24
    1660:	55 27       	eor	r21, r21
    1662:	29 81       	ldd	r18, Y+1	; 0x01
    1664:	4b 32       	cpi	r20, 0x2B	; 43
    1666:	51 05       	cpc	r21, r1
    1668:	21 f0       	breq	.+8      	; 0x1672 <conv_int+0x2c>
    166a:	4d 32       	cpi	r20, 0x2D	; 45
    166c:	51 05       	cpc	r21, r1
    166e:	69 f4       	brne	.+26     	; 0x168a <conv_int+0x44>
    1670:	20 68       	ori	r18, 0x80	; 128
    1672:	ca 94       	dec	r12
    1674:	c1 10       	cpse	r12, r1
    1676:	02 c0       	rjmp	.+4      	; 0x167c <conv_int+0x36>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	76 c0       	rjmp	.+236    	; 0x1768 <conv_int+0x122>
    167c:	c8 01       	movw	r24, r16
    167e:	29 83       	std	Y+1, r18	; 0x01
    1680:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1684:	29 81       	ldd	r18, Y+1	; 0x01
    1686:	97 fd       	sbrc	r25, 7
    1688:	f7 cf       	rjmp	.-18     	; 0x1678 <conv_int+0x32>
    168a:	32 2f       	mov	r19, r18
    168c:	3d 7f       	andi	r19, 0xFD	; 253
    168e:	d3 2e       	mov	r13, r19
    1690:	32 2f       	mov	r19, r18
    1692:	30 73       	andi	r19, 0x30	; 48
    1694:	49 f5       	brne	.+82     	; 0x16e8 <conv_int+0xa2>
    1696:	80 33       	cpi	r24, 0x30	; 48
    1698:	39 f5       	brne	.+78     	; 0x16e8 <conv_int+0xa2>
    169a:	bb 24       	eor	r11, r11
    169c:	ba 94       	dec	r11
    169e:	bc 0c       	add	r11, r12
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <conv_int+0x5e>
    16a2:	4e c0       	rjmp	.+156    	; 0x1740 <conv_int+0xfa>
    16a4:	c8 01       	movw	r24, r16
    16a6:	29 83       	std	Y+1, r18	; 0x01
    16a8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    16ac:	29 81       	ldd	r18, Y+1	; 0x01
    16ae:	97 fd       	sbrc	r25, 7
    16b0:	47 c0       	rjmp	.+142    	; 0x1740 <conv_int+0xfa>
    16b2:	38 2f       	mov	r19, r24
    16b4:	3f 7d       	andi	r19, 0xDF	; 223
    16b6:	38 35       	cpi	r19, 0x58	; 88
    16b8:	69 f4       	brne	.+26     	; 0x16d4 <conv_int+0x8e>
    16ba:	8d 2d       	mov	r24, r13
    16bc:	82 64       	ori	r24, 0x42	; 66
    16be:	d8 2e       	mov	r13, r24
    16c0:	ca 94       	dec	r12
    16c2:	ca 94       	dec	r12
    16c4:	cc 20       	and	r12, r12
    16c6:	e1 f1       	breq	.+120    	; 0x1740 <conv_int+0xfa>
    16c8:	c8 01       	movw	r24, r16
    16ca:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    16ce:	97 ff       	sbrs	r25, 7
    16d0:	0b c0       	rjmp	.+22     	; 0x16e8 <conv_int+0xa2>
    16d2:	36 c0       	rjmp	.+108    	; 0x1740 <conv_int+0xfa>
    16d4:	26 ff       	sbrs	r18, 6
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <conv_int+0x9a>
    16d8:	2d 2d       	mov	r18, r13
    16da:	22 60       	ori	r18, 0x02	; 2
    16dc:	d2 2e       	mov	r13, r18
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <conv_int+0xa0>
    16e0:	3d 2d       	mov	r19, r13
    16e2:	32 61       	ori	r19, 0x12	; 18
    16e4:	d3 2e       	mov	r13, r19
    16e6:	cb 2c       	mov	r12, r11
    16e8:	81 2c       	mov	r8, r1
    16ea:	91 2c       	mov	r9, r1
    16ec:	54 01       	movw	r10, r8
    16ee:	20 ed       	ldi	r18, 0xD0	; 208
    16f0:	28 0f       	add	r18, r24
    16f2:	28 30       	cpi	r18, 0x08	; 8
    16f4:	80 f0       	brcs	.+32     	; 0x1716 <conv_int+0xd0>
    16f6:	d4 fe       	sbrs	r13, 4
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <conv_int+0xbc>
    16fa:	b8 01       	movw	r22, r16
    16fc:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <ungetc>
    1700:	1c c0       	rjmp	.+56     	; 0x173a <conv_int+0xf4>
    1702:	2a 30       	cpi	r18, 0x0A	; 10
    1704:	40 f0       	brcs	.+16     	; 0x1716 <conv_int+0xd0>
    1706:	d6 fe       	sbrs	r13, 6
    1708:	f8 cf       	rjmp	.-16     	; 0x16fa <conv_int+0xb4>
    170a:	2f 7d       	andi	r18, 0xDF	; 223
    170c:	3f ee       	ldi	r19, 0xEF	; 239
    170e:	32 0f       	add	r19, r18
    1710:	36 30       	cpi	r19, 0x06	; 6
    1712:	98 f7       	brcc	.-26     	; 0x16fa <conv_int+0xb4>
    1714:	27 50       	subi	r18, 0x07	; 7
    1716:	4d 2d       	mov	r20, r13
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <mulacc>
    1720:	4b 01       	movw	r8, r22
    1722:	5c 01       	movw	r10, r24
    1724:	8d 2d       	mov	r24, r13
    1726:	82 60       	ori	r24, 0x02	; 2
    1728:	d8 2e       	mov	r13, r24
    172a:	ca 94       	dec	r12
    172c:	cc 20       	and	r12, r12
    172e:	59 f0       	breq	.+22     	; 0x1746 <conv_int+0x100>
    1730:	c8 01       	movw	r24, r16
    1732:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1736:	97 ff       	sbrs	r25, 7
    1738:	da cf       	rjmp	.-76     	; 0x16ee <conv_int+0xa8>
    173a:	d1 fc       	sbrc	r13, 1
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <conv_int+0x100>
    173e:	9c cf       	rjmp	.-200    	; 0x1678 <conv_int+0x32>
    1740:	81 2c       	mov	r8, r1
    1742:	91 2c       	mov	r9, r1
    1744:	54 01       	movw	r10, r8
    1746:	d7 fe       	sbrs	r13, 7
    1748:	08 c0       	rjmp	.+16     	; 0x175a <conv_int+0x114>
    174a:	b0 94       	com	r11
    174c:	a0 94       	com	r10
    174e:	90 94       	com	r9
    1750:	80 94       	com	r8
    1752:	81 1c       	adc	r8, r1
    1754:	91 1c       	adc	r9, r1
    1756:	a1 1c       	adc	r10, r1
    1758:	b1 1c       	adc	r11, r1
    175a:	2d 2d       	mov	r18, r13
    175c:	b5 01       	movw	r22, r10
    175e:	a4 01       	movw	r20, r8
    1760:	c7 01       	movw	r24, r14
    1762:	0e 94 de 0a 	call	0x15bc	; 0x15bc <putval>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	21 96       	adiw	r28, 0x01	; 1
    176a:	ec e0       	ldi	r30, 0x0C	; 12
    176c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__epilogue_restores__+0xc>

00001770 <conv_brk>:
    1770:	a1 e2       	ldi	r26, 0x21	; 33
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	ee eb       	ldi	r30, 0xBE	; 190
    1776:	fb e0       	ldi	r31, 0x0B	; 11
    1778:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x8>
    177c:	5c 01       	movw	r10, r24
    177e:	7a 01       	movw	r14, r20
    1780:	ce 01       	movw	r24, r28
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	6c 01       	movw	r12, r24
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	f6 01       	movw	r30, r12
    178a:	11 92       	st	Z+, r1
    178c:	8a 95       	dec	r24
    178e:	e9 f7       	brne	.-6      	; 0x178a <conv_brk+0x1a>
    1790:	f5 01       	movw	r30, r10
    1792:	83 80       	ldd	r8, Z+3	; 0x03
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	91 2c       	mov	r9, r1
    179a:	71 2c       	mov	r7, r1
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	a1 e0       	ldi	r26, 0x01	; 1
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	f9 01       	movw	r30, r18
    17a4:	83 fc       	sbrc	r8, 3
    17a6:	85 91       	lpm	r24, Z+
    17a8:	83 fe       	sbrs	r8, 3
    17aa:	81 91       	ld	r24, Z+
    17ac:	8f 01       	movw	r16, r30
    17ae:	98 2f       	mov	r25, r24
    17b0:	9f 01       	movw	r18, r30
    17b2:	81 11       	cpse	r24, r1
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <conv_brk+0x4c>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	7c c0       	rjmp	.+248    	; 0x18b4 <conv_brk+0x144>
    17bc:	8e 35       	cpi	r24, 0x5E	; 94
    17be:	19 f4       	brne	.+6      	; 0x17c6 <conv_brk+0x56>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	49 f1       	breq	.+82     	; 0x1818 <conv_brk+0xa8>
    17c6:	e7 2f       	mov	r30, r23
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	e4 17       	cp	r30, r20
    17cc:	f5 07       	cpc	r31, r21
    17ce:	3c f4       	brge	.+14     	; 0x17de <conv_brk+0x6e>
    17d0:	8d 35       	cpi	r24, 0x5D	; 93
    17d2:	59 f1       	breq	.+86     	; 0x182a <conv_brk+0xba>
    17d4:	8d 32       	cpi	r24, 0x2D	; 45
    17d6:	19 f4       	brne	.+6      	; 0x17de <conv_brk+0x6e>
    17d8:	77 20       	and	r7, r7
    17da:	01 f1       	breq	.+64     	; 0x181c <conv_brk+0xac>
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <conv_brk+0x74>
    17de:	71 10       	cpse	r7, r1
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <conv_brk+0x74>
    17e2:	98 2e       	mov	r9, r24
    17e4:	89 2f       	mov	r24, r25
    17e6:	86 95       	lsr	r24
    17e8:	86 95       	lsr	r24
    17ea:	86 95       	lsr	r24
    17ec:	86 01       	movw	r16, r12
    17ee:	08 0f       	add	r16, r24
    17f0:	11 1d       	adc	r17, r1
    17f2:	89 2f       	mov	r24, r25
    17f4:	87 70       	andi	r24, 0x07	; 7
    17f6:	3d 01       	movw	r6, r26
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <conv_brk+0x8c>
    17fa:	66 0c       	add	r6, r6
    17fc:	8a 95       	dec	r24
    17fe:	ea f7       	brpl	.-6      	; 0x17fa <conv_brk+0x8a>
    1800:	f8 01       	movw	r30, r16
    1802:	80 81       	ld	r24, Z
    1804:	86 29       	or	r24, r6
    1806:	80 83       	st	Z, r24
    1808:	99 15       	cp	r25, r9
    180a:	59 f0       	breq	.+22     	; 0x1822 <conv_brk+0xb2>
    180c:	99 15       	cp	r25, r9
    180e:	10 f4       	brcc	.+4      	; 0x1814 <conv_brk+0xa4>
    1810:	9f 5f       	subi	r25, 0xFF	; 255
    1812:	e8 cf       	rjmp	.-48     	; 0x17e4 <conv_brk+0x74>
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	e6 cf       	rjmp	.-52     	; 0x17e4 <conv_brk+0x74>
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <conv_brk+0xb4>
    181c:	77 24       	eor	r7, r7
    181e:	73 94       	inc	r7
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <conv_brk+0xb4>
    1822:	71 2c       	mov	r7, r1
    1824:	4f 5f       	subi	r20, 0xFF	; 255
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
    1828:	bc cf       	rjmp	.-136    	; 0x17a2 <conv_brk+0x32>
    182a:	77 20       	and	r7, r7
    182c:	19 f0       	breq	.+6      	; 0x1834 <conv_brk+0xc4>
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8e 83       	std	Y+6, r24	; 0x06
    1834:	71 11       	cpse	r23, r1
    1836:	03 c0       	rjmp	.+6      	; 0x183e <conv_brk+0xce>
    1838:	99 24       	eor	r9, r9
    183a:	93 94       	inc	r9
    183c:	16 c0       	rjmp	.+44     	; 0x186a <conv_brk+0xfa>
    183e:	f6 01       	movw	r30, r12
    1840:	9e 01       	movw	r18, r28
    1842:	2f 5d       	subi	r18, 0xDF	; 223
    1844:	3f 4f       	sbci	r19, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	80 95       	com	r24
    184a:	81 93       	st	Z+, r24
    184c:	e2 17       	cp	r30, r18
    184e:	f3 07       	cpc	r31, r19
    1850:	d1 f7       	brne	.-12     	; 0x1846 <conv_brk+0xd6>
    1852:	f2 cf       	rjmp	.-28     	; 0x1838 <conv_brk+0xc8>
    1854:	e1 14       	cp	r14, r1
    1856:	f1 04       	cpc	r15, r1
    1858:	29 f0       	breq	.+10     	; 0x1864 <conv_brk+0xf4>
    185a:	f7 01       	movw	r30, r14
    185c:	80 83       	st	Z, r24
    185e:	c7 01       	movw	r24, r14
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	7c 01       	movw	r14, r24
    1864:	61 50       	subi	r22, 0x01	; 1
    1866:	91 2c       	mov	r9, r1
    1868:	f9 f0       	breq	.+62     	; 0x18a8 <conv_brk+0x138>
    186a:	c5 01       	movw	r24, r10
    186c:	69 a3       	std	Y+33, r22	; 0x21
    186e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1872:	69 a1       	ldd	r22, Y+33	; 0x21
    1874:	97 fd       	sbrc	r25, 7
    1876:	16 c0       	rjmp	.+44     	; 0x18a4 <conv_brk+0x134>
    1878:	28 2f       	mov	r18, r24
    187a:	26 95       	lsr	r18
    187c:	26 95       	lsr	r18
    187e:	26 95       	lsr	r18
    1880:	f6 01       	movw	r30, r12
    1882:	e2 0f       	add	r30, r18
    1884:	f1 1d       	adc	r31, r1
    1886:	20 81       	ld	r18, Z
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	ac 01       	movw	r20, r24
    188c:	47 70       	andi	r20, 0x07	; 7
    188e:	55 27       	eor	r21, r21
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <conv_brk+0x126>
    1892:	35 95       	asr	r19
    1894:	27 95       	ror	r18
    1896:	4a 95       	dec	r20
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <conv_brk+0x122>
    189a:	20 fd       	sbrc	r18, 0
    189c:	db cf       	rjmp	.-74     	; 0x1854 <conv_brk+0xe4>
    189e:	b5 01       	movw	r22, r10
    18a0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <ungetc>
    18a4:	91 10       	cpse	r9, r1
    18a6:	87 cf       	rjmp	.-242    	; 0x17b6 <conv_brk+0x46>
    18a8:	e1 14       	cp	r14, r1
    18aa:	f1 04       	cpc	r15, r1
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <conv_brk+0x142>
    18ae:	f7 01       	movw	r30, r14
    18b0:	10 82       	st	Z, r1
    18b2:	c8 01       	movw	r24, r16
    18b4:	a1 96       	adiw	r28, 0x21	; 33
    18b6:	ee e0       	ldi	r30, 0x0E	; 14
    18b8:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x8>

000018bc <vfscanf>:
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	7f 92       	push	r7
    18c2:	8f 92       	push	r8
    18c4:	9f 92       	push	r9
    18c6:	af 92       	push	r10
    18c8:	bf 92       	push	r11
    18ca:	cf 92       	push	r12
    18cc:	df 92       	push	r13
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	1f 92       	push	r1
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	6c 01       	movw	r12, r24
    18e2:	2b 01       	movw	r4, r22
    18e4:	5a 01       	movw	r10, r20
    18e6:	fc 01       	movw	r30, r24
    18e8:	17 82       	std	Z+7, r1	; 0x07
    18ea:	16 82       	std	Z+6, r1	; 0x06
    18ec:	71 2c       	mov	r7, r1
    18ee:	f6 01       	movw	r30, r12
    18f0:	f3 80       	ldd	r15, Z+3	; 0x03
    18f2:	f2 01       	movw	r30, r4
    18f4:	f3 fc       	sbrc	r15, 3
    18f6:	85 91       	lpm	r24, Z+
    18f8:	f3 fe       	sbrs	r15, 3
    18fa:	81 91       	ld	r24, Z+
    18fc:	38 2f       	mov	r19, r24
    18fe:	2f 01       	movw	r4, r30
    1900:	88 23       	and	r24, r24
    1902:	09 f4       	brne	.+2      	; 0x1906 <vfscanf+0x4a>
    1904:	f3 c0       	rjmp	.+486    	; 0x1aec <vfscanf+0x230>
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	39 83       	std	Y+1, r19	; 0x01
    190a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <isspace>
    190e:	39 81       	ldd	r19, Y+1	; 0x01
    1910:	89 2b       	or	r24, r25
    1912:	21 f0       	breq	.+8      	; 0x191c <vfscanf+0x60>
    1914:	c6 01       	movw	r24, r12
    1916:	0e 94 0a 0b 	call	0x1614	; 0x1614 <skip_spaces>
    191a:	e9 cf       	rjmp	.-46     	; 0x18ee <vfscanf+0x32>
    191c:	35 32       	cpi	r19, 0x25	; 37
    191e:	41 f4       	brne	.+16     	; 0x1930 <vfscanf+0x74>
    1920:	f2 01       	movw	r30, r4
    1922:	f3 fc       	sbrc	r15, 3
    1924:	35 91       	lpm	r19, Z+
    1926:	f3 fe       	sbrs	r15, 3
    1928:	31 91       	ld	r19, Z+
    192a:	2f 01       	movw	r4, r30
    192c:	35 32       	cpi	r19, 0x25	; 37
    192e:	69 f4       	brne	.+26     	; 0x194a <vfscanf+0x8e>
    1930:	c6 01       	movw	r24, r12
    1932:	39 83       	std	Y+1, r19	; 0x01
    1934:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1938:	39 81       	ldd	r19, Y+1	; 0x01
    193a:	97 fd       	sbrc	r25, 7
    193c:	d5 c0       	rjmp	.+426    	; 0x1ae8 <vfscanf+0x22c>
    193e:	38 17       	cp	r19, r24
    1940:	b1 f2       	breq	.-84     	; 0x18ee <vfscanf+0x32>
    1942:	b6 01       	movw	r22, r12
    1944:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <ungetc>
    1948:	d1 c0       	rjmp	.+418    	; 0x1aec <vfscanf+0x230>
    194a:	3a 32       	cpi	r19, 0x2A	; 42
    194c:	39 f4       	brne	.+14     	; 0x195c <vfscanf+0xa0>
    194e:	f3 fc       	sbrc	r15, 3
    1950:	35 91       	lpm	r19, Z+
    1952:	f3 fe       	sbrs	r15, 3
    1954:	31 91       	ld	r19, Z+
    1956:	2f 01       	movw	r4, r30
    1958:	51 e0       	ldi	r21, 0x01	; 1
    195a:	01 c0       	rjmp	.+2      	; 0x195e <vfscanf+0xa2>
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	42 01       	movw	r8, r4
    1960:	10 e0       	ldi	r17, 0x00	; 0
    1962:	20 ed       	ldi	r18, 0xD0	; 208
    1964:	23 0f       	add	r18, r19
    1966:	2a 30       	cpi	r18, 0x0A	; 10
    1968:	90 f4       	brcc	.+36     	; 0x198e <vfscanf+0xd2>
    196a:	52 60       	ori	r21, 0x02	; 2
    196c:	61 2f       	mov	r22, r17
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	59 83       	std	Y+1, r21	; 0x01
    1978:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <mulacc>
    197c:	16 2f       	mov	r17, r22
    197e:	f4 01       	movw	r30, r8
    1980:	f3 fc       	sbrc	r15, 3
    1982:	35 91       	lpm	r19, Z+
    1984:	f3 fe       	sbrs	r15, 3
    1986:	31 91       	ld	r19, Z+
    1988:	4f 01       	movw	r8, r30
    198a:	59 81       	ldd	r21, Y+1	; 0x01
    198c:	ea cf       	rjmp	.-44     	; 0x1962 <vfscanf+0xa6>
    198e:	05 2f       	mov	r16, r21
    1990:	23 2f       	mov	r18, r19
    1992:	24 01       	movw	r4, r8
    1994:	51 ff       	sbrs	r21, 1
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfscanf+0xe2>
    1998:	11 11       	cpse	r17, r1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <vfscanf+0xe4>
    199c:	a7 c0       	rjmp	.+334    	; 0x1aec <vfscanf+0x230>
    199e:	1f ef       	ldi	r17, 0xFF	; 255
    19a0:	38 36       	cpi	r19, 0x68	; 104
    19a2:	19 f0       	breq	.+6      	; 0x19aa <vfscanf+0xee>
    19a4:	3c 36       	cpi	r19, 0x6C	; 108
    19a6:	59 f0       	breq	.+22     	; 0x19be <vfscanf+0x102>
    19a8:	11 c0       	rjmp	.+34     	; 0x19cc <vfscanf+0x110>
    19aa:	f4 01       	movw	r30, r8
    19ac:	f3 fc       	sbrc	r15, 3
    19ae:	25 91       	lpm	r18, Z+
    19b0:	f3 fe       	sbrs	r15, 3
    19b2:	21 91       	ld	r18, Z+
    19b4:	2f 01       	movw	r4, r30
    19b6:	28 36       	cpi	r18, 0x68	; 104
    19b8:	49 f4       	brne	.+18     	; 0x19cc <vfscanf+0x110>
    19ba:	05 2f       	mov	r16, r21
    19bc:	08 60       	ori	r16, 0x08	; 8
    19be:	04 60       	ori	r16, 0x04	; 4
    19c0:	f2 01       	movw	r30, r4
    19c2:	f3 fc       	sbrc	r15, 3
    19c4:	25 91       	lpm	r18, Z+
    19c6:	f3 fe       	sbrs	r15, 3
    19c8:	21 91       	ld	r18, Z+
    19ca:	2f 01       	movw	r4, r30
    19cc:	22 23       	and	r18, r18
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <vfscanf+0x116>
    19d0:	8d c0       	rjmp	.+282    	; 0x1aec <vfscanf+0x230>
    19d2:	62 2f       	mov	r22, r18
    19d4:	70 e0       	ldi	r23, 0x00	; 0
    19d6:	8c ed       	ldi	r24, 0xDC	; 220
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	29 83       	std	Y+1, r18	; 0x01
    19dc:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <strchr_P>
    19e0:	29 81       	ldd	r18, Y+1	; 0x01
    19e2:	89 2b       	or	r24, r25
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <vfscanf+0x12c>
    19e6:	82 c0       	rjmp	.+260    	; 0x1aec <vfscanf+0x230>
    19e8:	00 fd       	sbrc	r16, 0
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <vfscanf+0x13e>
    19ec:	f5 01       	movw	r30, r10
    19ee:	e0 80       	ld	r14, Z
    19f0:	f1 80       	ldd	r15, Z+1	; 0x01
    19f2:	c5 01       	movw	r24, r10
    19f4:	02 96       	adiw	r24, 0x02	; 2
    19f6:	5c 01       	movw	r10, r24
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <vfscanf+0x142>
    19fa:	e1 2c       	mov	r14, r1
    19fc:	f1 2c       	mov	r15, r1
    19fe:	2e 36       	cpi	r18, 0x6E	; 110
    1a00:	51 f4       	brne	.+20     	; 0x1a16 <vfscanf+0x15a>
    1a02:	f6 01       	movw	r30, r12
    1a04:	46 81       	ldd	r20, Z+6	; 0x06
    1a06:	57 81       	ldd	r21, Z+7	; 0x07
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	20 2f       	mov	r18, r16
    1a0e:	c7 01       	movw	r24, r14
    1a10:	0e 94 de 0a 	call	0x15bc	; 0x15bc <putval>
    1a14:	6c cf       	rjmp	.-296    	; 0x18ee <vfscanf+0x32>
    1a16:	23 36       	cpi	r18, 0x63	; 99
    1a18:	91 f4       	brne	.+36     	; 0x1a3e <vfscanf+0x182>
    1a1a:	01 ff       	sbrs	r16, 1
    1a1c:	11 e0       	ldi	r17, 0x01	; 1
    1a1e:	c6 01       	movw	r24, r12
    1a20:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1a24:	97 fd       	sbrc	r25, 7
    1a26:	60 c0       	rjmp	.+192    	; 0x1ae8 <vfscanf+0x22c>
    1a28:	e1 14       	cp	r14, r1
    1a2a:	f1 04       	cpc	r15, r1
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <vfscanf+0x17c>
    1a2e:	f7 01       	movw	r30, r14
    1a30:	80 83       	st	Z, r24
    1a32:	c7 01       	movw	r24, r14
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	7c 01       	movw	r14, r24
    1a38:	11 50       	subi	r17, 0x01	; 1
    1a3a:	89 f7       	brne	.-30     	; 0x1a1e <vfscanf+0x162>
    1a3c:	51 c0       	rjmp	.+162    	; 0x1ae0 <vfscanf+0x224>
    1a3e:	2b 35       	cpi	r18, 0x5B	; 91
    1a40:	59 f4       	brne	.+22     	; 0x1a58 <vfscanf+0x19c>
    1a42:	92 01       	movw	r18, r4
    1a44:	a7 01       	movw	r20, r14
    1a46:	61 2f       	mov	r22, r17
    1a48:	c6 01       	movw	r24, r12
    1a4a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <conv_brk>
    1a4e:	2c 01       	movw	r4, r24
    1a50:	89 2b       	or	r24, r25
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <vfscanf+0x19a>
    1a54:	45 c0       	rjmp	.+138    	; 0x1ae0 <vfscanf+0x224>
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <vfscanf+0x21a>
    1a58:	c6 01       	movw	r24, r12
    1a5a:	29 83       	std	Y+1, r18	; 0x01
    1a5c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <skip_spaces>
    1a60:	29 81       	ldd	r18, Y+1	; 0x01
    1a62:	97 fd       	sbrc	r25, 7
    1a64:	41 c0       	rjmp	.+130    	; 0x1ae8 <vfscanf+0x22c>
    1a66:	2f 36       	cpi	r18, 0x6F	; 111
    1a68:	59 f1       	breq	.+86     	; 0x1ac0 <vfscanf+0x204>
    1a6a:	28 f4       	brcc	.+10     	; 0x1a76 <vfscanf+0x1ba>
    1a6c:	24 36       	cpi	r18, 0x64	; 100
    1a6e:	31 f1       	breq	.+76     	; 0x1abc <vfscanf+0x200>
    1a70:	29 36       	cpi	r18, 0x69	; 105
    1a72:	49 f1       	breq	.+82     	; 0x1ac6 <vfscanf+0x20a>
    1a74:	27 c0       	rjmp	.+78     	; 0x1ac4 <vfscanf+0x208>
    1a76:	23 37       	cpi	r18, 0x73	; 115
    1a78:	69 f0       	breq	.+26     	; 0x1a94 <vfscanf+0x1d8>
    1a7a:	25 37       	cpi	r18, 0x75	; 117
    1a7c:	f9 f0       	breq	.+62     	; 0x1abc <vfscanf+0x200>
    1a7e:	22 c0       	rjmp	.+68     	; 0x1ac4 <vfscanf+0x208>
    1a80:	e1 14       	cp	r14, r1
    1a82:	f1 04       	cpc	r15, r1
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <vfscanf+0x1d4>
    1a86:	f7 01       	movw	r30, r14
    1a88:	80 82       	st	Z, r8
    1a8a:	c7 01       	movw	r24, r14
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	7c 01       	movw	r14, r24
    1a90:	11 50       	subi	r17, 0x01	; 1
    1a92:	71 f0       	breq	.+28     	; 0x1ab0 <vfscanf+0x1f4>
    1a94:	c6 01       	movw	r24, r12
    1a96:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgetc>
    1a9a:	4c 01       	movw	r8, r24
    1a9c:	97 fd       	sbrc	r25, 7
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <vfscanf+0x1f4>
    1aa0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <isspace>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	61 f3       	breq	.-40     	; 0x1a80 <vfscanf+0x1c4>
    1aa8:	b6 01       	movw	r22, r12
    1aaa:	c4 01       	movw	r24, r8
    1aac:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <ungetc>
    1ab0:	e1 14       	cp	r14, r1
    1ab2:	f1 04       	cpc	r15, r1
    1ab4:	a9 f0       	breq	.+42     	; 0x1ae0 <vfscanf+0x224>
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	10 82       	st	Z, r1
    1aba:	12 c0       	rjmp	.+36     	; 0x1ae0 <vfscanf+0x224>
    1abc:	00 62       	ori	r16, 0x20	; 32
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <vfscanf+0x20a>
    1ac0:	00 61       	ori	r16, 0x10	; 16
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <vfscanf+0x20a>
    1ac4:	00 64       	ori	r16, 0x40	; 64
    1ac6:	20 2f       	mov	r18, r16
    1ac8:	a7 01       	movw	r20, r14
    1aca:	61 2f       	mov	r22, r17
    1acc:	c6 01       	movw	r24, r12
    1ace:	0e 94 23 0b 	call	0x1646	; 0x1646 <conv_int>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <vfscanf+0x224>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	83 81       	ldd	r24, Z+3	; 0x03
    1ada:	80 73       	andi	r24, 0x30	; 48
    1adc:	29 f4       	brne	.+10     	; 0x1ae8 <vfscanf+0x22c>
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <vfscanf+0x230>
    1ae0:	00 fd       	sbrc	r16, 0
    1ae2:	05 cf       	rjmp	.-502    	; 0x18ee <vfscanf+0x32>
    1ae4:	73 94       	inc	r7
    1ae6:	03 cf       	rjmp	.-506    	; 0x18ee <vfscanf+0x32>
    1ae8:	77 20       	and	r7, r7
    1aea:	19 f0       	breq	.+6      	; 0x1af2 <vfscanf+0x236>
    1aec:	87 2d       	mov	r24, r7
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <vfscanf+0x23a>
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	9f ef       	ldi	r25, 0xFF	; 255
    1af6:	0f 90       	pop	r0
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	cf 90       	pop	r12
    1b08:	bf 90       	pop	r11
    1b0a:	af 90       	pop	r10
    1b0c:	9f 90       	pop	r9
    1b0e:	8f 90       	pop	r8
    1b10:	7f 90       	pop	r7
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	08 95       	ret

00001b18 <isspace>:
    1b18:	91 11       	cpse	r25, r1
    1b1a:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__ctype_isfalse>
    1b1e:	80 32       	cpi	r24, 0x20	; 32
    1b20:	19 f0       	breq	.+6      	; 0x1b28 <isspace+0x10>
    1b22:	89 50       	subi	r24, 0x09	; 9
    1b24:	85 50       	subi	r24, 0x05	; 5
    1b26:	c8 f7       	brcc	.-14     	; 0x1b1a <isspace+0x2>
    1b28:	08 95       	ret

00001b2a <strchr_P>:
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	05 90       	lpm	r0, Z+
    1b2e:	06 16       	cp	r0, r22
    1b30:	21 f0       	breq	.+8      	; 0x1b3a <strchr_P+0x10>
    1b32:	00 20       	and	r0, r0
    1b34:	d9 f7       	brne	.-10     	; 0x1b2c <strchr_P+0x2>
    1b36:	c0 01       	movw	r24, r0
    1b38:	08 95       	ret
    1b3a:	31 97       	sbiw	r30, 0x01	; 1
    1b3c:	cf 01       	movw	r24, r30
    1b3e:	08 95       	ret

00001b40 <fgetc>:
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	20 ff       	sbrs	r18, 0
    1b4a:	33 c0       	rjmp	.+102    	; 0x1bb2 <fgetc+0x72>
    1b4c:	26 ff       	sbrs	r18, 6
    1b4e:	0a c0       	rjmp	.+20     	; 0x1b64 <fgetc+0x24>
    1b50:	2f 7b       	andi	r18, 0xBF	; 191
    1b52:	2b 83       	std	Y+3, r18	; 0x03
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	9f 81       	ldd	r25, Y+7	; 0x07
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	9f 83       	std	Y+7, r25	; 0x07
    1b5c:	8e 83       	std	Y+6, r24	; 0x06
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	29 c0       	rjmp	.+82     	; 0x1bb6 <fgetc+0x76>
    1b64:	22 ff       	sbrs	r18, 2
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <fgetc+0x46>
    1b68:	e8 81       	ld	r30, Y
    1b6a:	f9 81       	ldd	r31, Y+1	; 0x01
    1b6c:	80 81       	ld	r24, Z
    1b6e:	08 2e       	mov	r0, r24
    1b70:	00 0c       	add	r0, r0
    1b72:	99 0b       	sbc	r25, r25
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	19 f4       	brne	.+6      	; 0x1b7e <fgetc+0x3e>
    1b78:	20 62       	ori	r18, 0x20	; 32
    1b7a:	2b 83       	std	Y+3, r18	; 0x03
    1b7c:	1a c0       	rjmp	.+52     	; 0x1bb2 <fgetc+0x72>
    1b7e:	31 96       	adiw	r30, 0x01	; 1
    1b80:	f9 83       	std	Y+1, r31	; 0x01
    1b82:	e8 83       	st	Y, r30
    1b84:	0e c0       	rjmp	.+28     	; 0x1ba2 <fgetc+0x62>
    1b86:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b88:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b8a:	09 95       	icall
    1b8c:	97 ff       	sbrs	r25, 7
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <fgetc+0x62>
    1b90:	2b 81       	ldd	r18, Y+3	; 0x03
    1b92:	01 96       	adiw	r24, 0x01	; 1
    1b94:	11 f0       	breq	.+4      	; 0x1b9a <fgetc+0x5a>
    1b96:	80 e2       	ldi	r24, 0x20	; 32
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <fgetc+0x5c>
    1b9a:	80 e1       	ldi	r24, 0x10	; 16
    1b9c:	82 2b       	or	r24, r18
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	08 c0       	rjmp	.+16     	; 0x1bb2 <fgetc+0x72>
    1ba2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba6:	2f 5f       	subi	r18, 0xFF	; 255
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	3f 83       	std	Y+7, r19	; 0x07
    1bac:	2e 83       	std	Y+6, r18	; 0x06
    1bae:	99 27       	eor	r25, r25
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <fgetc+0x76>
    1bb2:	8f ef       	ldi	r24, 0xFF	; 255
    1bb4:	9f ef       	ldi	r25, 0xFF	; 255
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	08 95       	ret

00001bbc <ungetc>:
    1bbc:	fb 01       	movw	r30, r22
    1bbe:	23 81       	ldd	r18, Z+3	; 0x03
    1bc0:	20 ff       	sbrs	r18, 0
    1bc2:	12 c0       	rjmp	.+36     	; 0x1be8 <ungetc+0x2c>
    1bc4:	26 fd       	sbrc	r18, 6
    1bc6:	10 c0       	rjmp	.+32     	; 0x1be8 <ungetc+0x2c>
    1bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bca:	3f ef       	ldi	r19, 0xFF	; 255
    1bcc:	93 07       	cpc	r25, r19
    1bce:	61 f0       	breq	.+24     	; 0x1be8 <ungetc+0x2c>
    1bd0:	82 83       	std	Z+2, r24	; 0x02
    1bd2:	2f 7d       	andi	r18, 0xDF	; 223
    1bd4:	20 64       	ori	r18, 0x40	; 64
    1bd6:	23 83       	std	Z+3, r18	; 0x03
    1bd8:	26 81       	ldd	r18, Z+6	; 0x06
    1bda:	37 81       	ldd	r19, Z+7	; 0x07
    1bdc:	21 50       	subi	r18, 0x01	; 1
    1bde:	31 09       	sbc	r19, r1
    1be0:	37 83       	std	Z+7, r19	; 0x07
    1be2:	26 83       	std	Z+6, r18	; 0x06
    1be4:	99 27       	eor	r25, r25
    1be6:	08 95       	ret
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	9f ef       	ldi	r25, 0xFF	; 255
    1bec:	08 95       	ret

00001bee <__ctype_isfalse>:
    1bee:	99 27       	eor	r25, r25
    1bf0:	88 27       	eor	r24, r24

00001bf2 <__ctype_istrue>:
    1bf2:	08 95       	ret

00001bf4 <__prologue_saves__>:
    1bf4:	2f 92       	push	r2
    1bf6:	3f 92       	push	r3
    1bf8:	4f 92       	push	r4
    1bfa:	5f 92       	push	r5
    1bfc:	6f 92       	push	r6
    1bfe:	7f 92       	push	r7
    1c00:	8f 92       	push	r8
    1c02:	9f 92       	push	r9
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	ca 1b       	sub	r28, r26
    1c1e:	db 0b       	sbc	r29, r27
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	09 94       	ijmp

00001c2c <__epilogue_restores__>:
    1c2c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c2e:	39 88       	ldd	r3, Y+17	; 0x11
    1c30:	48 88       	ldd	r4, Y+16	; 0x10
    1c32:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c34:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c36:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c38:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c3e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c40:	c8 84       	ldd	r12, Y+8	; 0x08
    1c42:	df 80       	ldd	r13, Y+7	; 0x07
    1c44:	ee 80       	ldd	r14, Y+6	; 0x06
    1c46:	fd 80       	ldd	r15, Y+5	; 0x05
    1c48:	0c 81       	ldd	r16, Y+4	; 0x04
    1c4a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c4c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c4e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c50:	ce 0f       	add	r28, r30
    1c52:	d1 1d       	adc	r29, r1
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	ed 01       	movw	r28, r26
    1c60:	08 95       	ret

00001c62 <_exit>:
    1c62:	f8 94       	cli

00001c64 <__stop_program>:
    1c64:	ff cf       	rjmp	.-2      	; 0x1c64 <__stop_program>
