
Pushto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006e  0080006e  00000472  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000005c  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008f3  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000038e  00000000  00000000  00000e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000537  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ec  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000202  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000195  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b3 01 	call	0x366	; 0x366 <main>
  8a:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <system_init>:


void system_init (void)
{
	//DDRA = 0xFE;		//set the PORTA Direction Set every pin of PORTA as out except AN0 
	DDRD = 0xFF;		//set the PORTD Direction Set every pin of PORTD as out as our lcd on this
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	81 bb       	out	0x11, r24	; 17
	EN_DIR = 0b00000000; //enkodery
  96:	17 ba       	out	0x17, r1	; 23
	EN_PORT = 0b00000011;
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	08 95       	ret

0000009e <lcdcmd>:
  9e:	90 98       	cbi	0x12, 0	; 18
  a0:	92 98       	cbi	0x12, 2	; 18
  a2:	91 98       	cbi	0x12, 1	; 18
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	9f 70       	andi	r25, 0x0F	; 15
  a8:	92 bb       	out	0x12, r25	; 18
  aa:	22 b3       	in	r18, 0x12	; 18
  ac:	98 2f       	mov	r25, r24
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	92 2b       	or	r25, r18
  b2:	92 bb       	out	0x12, r25	; 18
  b4:	91 98       	cbi	0x12, 1	; 18
  b6:	92 9a       	sbi	0x12, 2	; 18
  b8:	24 ef       	ldi	r18, 0xF4	; 244
  ba:	31 e0       	ldi	r19, 0x01	; 1
  bc:	f9 01       	movw	r30, r18
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcdcmd+0x20>
  c2:	92 98       	cbi	0x12, 2	; 18
  c4:	92 b3       	in	r25, 0x12	; 18
  c6:	9f 70       	andi	r25, 0x0F	; 15
  c8:	92 bb       	out	0x12, r25	; 18
  ca:	92 b3       	in	r25, 0x12	; 18
  cc:	82 95       	swap	r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	98 2b       	or	r25, r24
  d2:	92 bb       	out	0x12, r25	; 18
  d4:	92 9a       	sbi	0x12, 2	; 18
  d6:	c9 01       	movw	r24, r18
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcdcmd+0x3a>
  dc:	92 98       	cbi	0x12, 2	; 18
  de:	08 95       	ret

000000e0 <lcdData>:
  e0:	90 9a       	sbi	0x12, 0	; 18
  e2:	91 98       	cbi	0x12, 1	; 18
  e4:	92 98       	cbi	0x12, 2	; 18
  e6:	92 b3       	in	r25, 0x12	; 18
  e8:	9f 70       	andi	r25, 0x0F	; 15
  ea:	92 bb       	out	0x12, r25	; 18
  ec:	22 b3       	in	r18, 0x12	; 18
  ee:	98 2f       	mov	r25, r24
  f0:	90 7f       	andi	r25, 0xF0	; 240
  f2:	92 2b       	or	r25, r18
  f4:	92 bb       	out	0x12, r25	; 18
  f6:	91 98       	cbi	0x12, 1	; 18
  f8:	92 9a       	sbi	0x12, 2	; 18
  fa:	24 ef       	ldi	r18, 0xF4	; 244
  fc:	31 e0       	ldi	r19, 0x01	; 1
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcdData+0x20>
 104:	92 98       	cbi	0x12, 2	; 18
 106:	92 b3       	in	r25, 0x12	; 18
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	92 bb       	out	0x12, r25	; 18
 10c:	92 b3       	in	r25, 0x12	; 18
 10e:	82 95       	swap	r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	98 2b       	or	r25, r24
 114:	92 bb       	out	0x12, r25	; 18
 116:	92 9a       	sbi	0x12, 2	; 18
 118:	c9 01       	movw	r24, r18
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcdData+0x3a>
 11e:	92 98       	cbi	0x12, 2	; 18
 120:	08 95       	ret

00000122 <lcdInit>:
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	90 98       	cbi	0x12, 0	; 18
 128:	92 98       	cbi	0x12, 2	; 18
 12a:	91 98       	cbi	0x12, 1	; 18
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	80 63       	ori	r24, 0x30	; 48
 130:	82 bb       	out	0x12, r24	; 18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	97 e2       	ldi	r25, 0x27	; 39
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <lcdInit+0x14>
 13a:	92 9a       	sbi	0x12, 2	; 18
 13c:	92 98       	cbi	0x12, 2	; 18
 13e:	82 ee       	ldi	r24, 0xE2	; 226
 140:	94 e0       	ldi	r25, 0x04	; 4
 142:	fc 01       	movw	r30, r24
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcdInit+0x22>
 148:	92 9a       	sbi	0x12, 2	; 18
 14a:	92 98       	cbi	0x12, 2	; 18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcdInit+0x2a>
 150:	92 9a       	sbi	0x12, 2	; 18
 152:	92 98       	cbi	0x12, 2	; 18
 154:	84 ef       	ldi	r24, 0xF4	; 244
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcdInit+0x36>
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	80 72       	andi	r24, 0x20	; 32
 160:	82 bb       	out	0x12, r24	; 18
 162:	92 9a       	sbi	0x12, 2	; 18
 164:	92 98       	cbi	0x12, 2	; 18
 166:	88 e2       	ldi	r24, 0x28	; 40
 168:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 16c:	04 ed       	ldi	r16, 0xD4	; 212
 16e:	10 e3       	ldi	r17, 0x30	; 48
 170:	c8 01       	movw	r24, r16
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcdInit+0x50>
 176:	8e e0       	ldi	r24, 0x0E	; 14
 178:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 17c:	c8 01       	movw	r24, r16
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcdInit+0x5c>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 188:	c8 01       	movw	r24, r16
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcdInit+0x68>
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 194:	c8 01       	movw	r24, r16
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcdInit+0x74>
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 1a0:	c8 01       	movw	r24, r16
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcdInit+0x80>
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <prints>:
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <prints+0xe>
 1b4:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdData>
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	88 81       	ld	r24, Y
 1bc:	88 23       	and	r24, r24
 1be:	d1 f7       	brne	.-12     	; 0x1b4 <prints+0x8>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <gotoXy>:
 1c6:	88 32       	cpi	r24, 0x28	; 40
 1c8:	28 f4       	brcc	.+10     	; 0x1d4 <gotoXy+0xe>
 1ca:	61 11       	cpse	r22, r1
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	0e 94 4f 00 	call	0x9e	; 0x9e <lcdcmd>
 1d4:	08 95       	ret

000001d6 <integerToLcd>:
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	7c 01       	movw	r14, r24
 1e0:	68 ee       	ldi	r22, 0xE8	; 232
 1e2:	73 e0       	ldi	r23, 0x03	; 3
 1e4:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 1e8:	06 2f       	mov	r16, r22
 1ea:	86 2f       	mov	r24, r22
 1ec:	80 5d       	subi	r24, 0xD0	; 208
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdData>
 1f2:	c7 01       	movw	r24, r14
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	10 e0       	ldi	r17, 0x00	; 0
 1f8:	28 e1       	ldi	r18, 0x18	; 24
 1fa:	3c ef       	ldi	r19, 0xFC	; 252
 1fc:	a9 01       	movw	r20, r18
 1fe:	04 9f       	mul	r16, r20
 200:	90 01       	movw	r18, r0
 202:	05 9f       	mul	r16, r21
 204:	30 0d       	add	r19, r0
 206:	14 9f       	mul	r17, r20
 208:	30 0d       	add	r19, r0
 20a:	11 24       	eor	r1, r1
 20c:	82 0f       	add	r24, r18
 20e:	93 1f       	adc	r25, r19
 210:	64 e6       	ldi	r22, 0x64	; 100
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 218:	86 2f       	mov	r24, r22
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdData>
 220:	c7 01       	movw	r24, r14
 222:	64 e6       	ldi	r22, 0x64	; 100
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 232:	86 2f       	mov	r24, r22
 234:	80 5d       	subi	r24, 0xD0	; 208
 236:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdData>
 23a:	c7 01       	movw	r24, r14
 23c:	6a e0       	ldi	r22, 0x0A	; 10
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 be 01 	call	0x37c	; 0x37c <__divmodhi4>
 244:	80 5d       	subi	r24, 0xD0	; 208
 246:	0e 94 70 00 	call	0xe0	; 0xe0 <lcdData>
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	08 95       	ret

00000254 <keypad>:

char i;
unsigned char result;
char keypad(void) 
 {
result=0;
 254:	10 92 6f 00 	sts	0x006F, r1
KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
 258:	80 ef       	ldi	r24, 0xF0	; 240
 25a:	8a bb       	out	0x1a, r24	; 26
KB_PORT=0b00001111;
 25c:	9f e0       	ldi	r25, 0x0F	; 15
 25e:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	ef e4       	ldi	r30, 0x4F	; 79
 262:	f3 ec       	ldi	r31, 0xC3	; 195
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <keypad+0x10>
 268:	00 c0       	rjmp	.+0      	; 0x26a <keypad+0x16>
 26a:	00 00       	nop
_delay_ms(200);
result=KB_PIN;
 26c:	29 b3       	in	r18, 0x19	; 25
 26e:	20 93 6f 00 	sts	0x006F, r18

//odczyt wierszy
KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
 272:	9a bb       	out	0x1a, r25	; 26
KB_PORT=0b11110000;
 274:	8b bb       	out	0x1b, r24	; 27
 276:	ef e4       	ldi	r30, 0x4F	; 79
 278:	f3 ec       	ldi	r31, 0xC3	; 195
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <keypad+0x26>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <keypad+0x2c>
 280:	00 00       	nop
_delay_ms(200);
result = result | KB_PIN; 
 282:	29 b3       	in	r18, 0x19	; 25
 284:	80 91 6f 00 	lds	r24, 0x006F
 288:	82 2b       	or	r24, r18
 28a:	80 93 6f 00 	sts	0x006F, r24

//uzyskanie kodu skanowania 
switch
 28e:	8e 3b       	cpi	r24, 0xBE	; 190
 290:	89 f1       	breq	.+98     	; 0x2f4 <keypad+0xa0>
 292:	a0 f4       	brcc	.+40     	; 0x2bc <keypad+0x68>
 294:	8e 37       	cpi	r24, 0x7E	; 126
 296:	81 f1       	breq	.+96     	; 0x2f8 <keypad+0xa4>
 298:	40 f4       	brcc	.+16     	; 0x2aa <keypad+0x56>
 29a:	8b 37       	cpi	r24, 0x7B	; 123
 29c:	e9 f1       	breq	.+122    	; 0x318 <keypad+0xc4>
 29e:	8d 37       	cpi	r24, 0x7D	; 125
 2a0:	99 f1       	breq	.+102    	; 0x308 <keypad+0xb4>
 2a2:	87 37       	cpi	r24, 0x77	; 119
 2a4:	d9 f5       	brne	.+118    	; 0x31c <keypad+0xc8>
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
case 0b01110111     : i= 16; break; //D
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	22 c0       	rjmp	.+68     	; 0x2ee <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 2aa:	8b 3b       	cpi	r24, 0xBB	; 187
 2ac:	99 f1       	breq	.+102    	; 0x314 <keypad+0xc0>
 2ae:	8d 3b       	cpi	r24, 0xBD	; 189
 2b0:	49 f1       	breq	.+82     	; 0x304 <keypad+0xb0>
 2b2:	87 3b       	cpi	r24, 0xB7	; 183
 2b4:	99 f5       	brne	.+102    	; 0x31c <keypad+0xc8>
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
 2b6:	90 93 6e 00 	sts	0x006E, r25
 2ba:	32 c0       	rjmp	.+100    	; 0x320 <keypad+0xcc>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 2bc:	8e 3d       	cpi	r24, 0xDE	; 222
 2be:	b1 f0       	breq	.+44     	; 0x2ec <keypad+0x98>
 2c0:	40 f4       	brcc	.+16     	; 0x2d2 <keypad+0x7e>
 2c2:	8b 3d       	cpi	r24, 0xDB	; 219
 2c4:	29 f1       	breq	.+74     	; 0x310 <keypad+0xbc>
 2c6:	8d 3d       	cpi	r24, 0xDD	; 221
 2c8:	d9 f0       	breq	.+54     	; 0x300 <keypad+0xac>
 2ca:	87 3d       	cpi	r24, 0xD7	; 215
 2cc:	39 f5       	brne	.+78     	; 0x31c <keypad+0xc8>
case 0b11101011     : i= 9; break; //7
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
 2ce:	8e e0       	ldi	r24, 0x0E	; 14
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 2d2:	8b 3e       	cpi	r24, 0xEB	; 235
 2d4:	d9 f0       	breq	.+54     	; 0x30c <keypad+0xb8>
 2d6:	20 f4       	brcc	.+8      	; 0x2e0 <keypad+0x8c>
 2d8:	87 3e       	cpi	r24, 0xE7	; 231
 2da:	01 f5       	brne	.+64     	; 0x31c <keypad+0xc8>
case 0b01111101     : i= 8; break; //B
case 0b11101011     : i= 9; break; //7
case 0b11011011     : i= 10; break; //8
case 0b10111011     : i= 11; break; //9
case 0b01111011     : i= 12; break; //C
case 0b11100111     : i= 13; break; //*
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <keypad+0x9a>
KB_PORT=0b11110000;
_delay_ms(200);
result = result | KB_PIN; 

//uzyskanie kodu skanowania 
switch
 2e0:	8d 3e       	cpi	r24, 0xED	; 237
 2e2:	61 f0       	breq	.+24     	; 0x2fc <keypad+0xa8>
 2e4:	8e 3e       	cpi	r24, 0xEE	; 238
 2e6:	d1 f4       	brne	.+52     	; 0x31c <keypad+0xc8>
( result) {
case 0b11101110     : i= 1; break; //1
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <keypad+0x9a>
case 0b11011110     : i= 2 ; break; //2
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	80 93 6e 00 	sts	0x006E, r24
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <keypad+0xcc>
case 0b10111110     : i= 3; break; //3
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	fb cf       	rjmp	.-10     	; 0x2ee <keypad+0x9a>
case 0b01111110     : i= 4; break; //A
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	f9 cf       	rjmp	.-14     	; 0x2ee <keypad+0x9a>
case 0b11101101     : i= 5; break; //4
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	f7 cf       	rjmp	.-18     	; 0x2ee <keypad+0x9a>
case 0b11011101     : i= 6; break; //5
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	f5 cf       	rjmp	.-22     	; 0x2ee <keypad+0x9a>
case 0b10111101     : i= 7; break; //6
 304:	87 e0       	ldi	r24, 0x07	; 7
 306:	f3 cf       	rjmp	.-26     	; 0x2ee <keypad+0x9a>
case 0b01111101     : i= 8; break; //B
 308:	88 e0       	ldi	r24, 0x08	; 8
 30a:	f1 cf       	rjmp	.-30     	; 0x2ee <keypad+0x9a>
case 0b11101011     : i= 9; break; //7
 30c:	89 e0       	ldi	r24, 0x09	; 9
 30e:	ef cf       	rjmp	.-34     	; 0x2ee <keypad+0x9a>
case 0b11011011     : i= 10; break; //8
 310:	8a e0       	ldi	r24, 0x0A	; 10
 312:	ed cf       	rjmp	.-38     	; 0x2ee <keypad+0x9a>
case 0b10111011     : i= 11; break; //9
 314:	8b e0       	ldi	r24, 0x0B	; 11
 316:	eb cf       	rjmp	.-42     	; 0x2ee <keypad+0x9a>
case 0b01111011     : i= 12; break; //C
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	e9 cf       	rjmp	.-46     	; 0x2ee <keypad+0x9a>
case 0b11100111     : i= 13; break; //*
case 0b11010111     : i= 14; break; //0
case 0b10110111     : i= 15; break; //#
case 0b01110111     : i= 16; break; //D
default:              
     i= 0;
 31c:	10 92 6e 00 	sts	0x006E, r1
}
return i;
 320:	80 91 6e 00 	lds	r24, 0x006E
 324:	08 95       	ret

00000326 <encoder>:
void encoder()
{
		//DDRB = 0b00000000; //piny b7 i b6 to wyjscia
	//PORTB = 0b11000000;
	
	gotoXy(0,1 );			//set the cursor to 1 column of 1st row
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <gotoXy>
	prints("A=");
 332:	87 e6       	ldi	r24, 0x67	; 103
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d6 00 	call	0x1ac	; 0x1ac <prints>
	if(EN_PIN & 0b00000001)	
 33a:	b0 9b       	sbis	0x16, 0	; 22
 33c:	03 c0       	rjmp	.+6      	; 0x344 <encoder+0x1e>
		integerToLcd(1);		// print adc value to the lcd
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <encoder+0x22>
		else
		integerToLcd(0);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <integerToLcd>
	prints(" B=");
 34c:	8a e6       	ldi	r24, 0x6A	; 106
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 d6 00 	call	0x1ac	; 0x1ac <prints>
	if(EN_PIN & 0b00000010)	
 354:	b1 9b       	sbis	0x16, 1	; 22
 356:	03 c0       	rjmp	.+6      	; 0x35e <encoder+0x38>
		integerToLcd(1);		// print adc value to the lcd
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <encoder+0x3c>
		else
		integerToLcd(0);
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <integerToLcd>

00000366 <main>:
int main(void)
{
	//unsigned int temp;

	
	system_init();
 366:	0e 94 49 00 	call	0x92	; 0x92 <system_init>
	lcdInit();
 36a:	0e 94 91 00 	call	0x122	; 0x122 <lcdInit>

	prints("keypad");
 36e:	80 e6       	ldi	r24, 0x60	; 96
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 d6 00 	call	0x1ac	; 0x1ac <prints>
	while(1)
	{
	encoder();
 376:	0e 94 93 01 	call	0x326	; 0x326 <encoder>
	}
 37a:	fd cf       	rjmp	.-6      	; 0x376 <main+0x10>

0000037c <__divmodhi4>:
 37c:	97 fb       	bst	r25, 7
 37e:	07 2e       	mov	r0, r23
 380:	16 f4       	brtc	.+4      	; 0x386 <__divmodhi4+0xa>
 382:	00 94       	com	r0
 384:	07 d0       	rcall	.+14     	; 0x394 <__divmodhi4_neg1>
 386:	77 fd       	sbrc	r23, 7
 388:	09 d0       	rcall	.+18     	; 0x39c <__divmodhi4_neg2>
 38a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__udivmodhi4>
 38e:	07 fc       	sbrc	r0, 7
 390:	05 d0       	rcall	.+10     	; 0x39c <__divmodhi4_neg2>
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__divmodhi4_exit>

00000394 <__divmodhi4_neg1>:
 394:	90 95       	com	r25
 396:	81 95       	neg	r24
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__divmodhi4_neg2>:
 39c:	70 95       	com	r23
 39e:	61 95       	neg	r22
 3a0:	7f 4f       	sbci	r23, 0xFF	; 255

000003a2 <__divmodhi4_exit>:
 3a2:	08 95       	ret

000003a4 <__udivmodhi4>:
 3a4:	aa 1b       	sub	r26, r26
 3a6:	bb 1b       	sub	r27, r27
 3a8:	51 e1       	ldi	r21, 0x11	; 17
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <__udivmodhi4_ep>

000003ac <__udivmodhi4_loop>:
 3ac:	aa 1f       	adc	r26, r26
 3ae:	bb 1f       	adc	r27, r27
 3b0:	a6 17       	cp	r26, r22
 3b2:	b7 07       	cpc	r27, r23
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__udivmodhi4_ep>
 3b6:	a6 1b       	sub	r26, r22
 3b8:	b7 0b       	sbc	r27, r23

000003ba <__udivmodhi4_ep>:
 3ba:	88 1f       	adc	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	5a 95       	dec	r21
 3c0:	a9 f7       	brne	.-22     	; 0x3ac <__udivmodhi4_loop>
 3c2:	80 95       	com	r24
 3c4:	90 95       	com	r25
 3c6:	bc 01       	movw	r22, r24
 3c8:	cd 01       	movw	r24, r26
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
