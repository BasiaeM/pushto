   1               		.file	"keypad.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	keypad
  12               	keypad:
  13               	.LFB6:
  14               		.file 1 "keypad.c"
   1:keypad.c      **** #include "keypad.h"
   2:keypad.c      **** 
   3:keypad.c      **** char i;
   4:keypad.c      **** unsigned char result;
   5:keypad.c      **** char keypad(void) 
   6:keypad.c      ****  {
  15               		.loc 1 6 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
   7:keypad.c      **** result=0;
  21               		.loc 1 7 0
  22 0000 1092 0000 		sts result,__zero_reg__
   8:keypad.c      **** KB_DIR =0b11110000; //wymuszenie zer dla wszystkich kolumn
  23               		.loc 1 8 0
  24 0004 80EF      		ldi r24,lo8(-16)
  25 0006 84BB      		out 0x14,r24
   9:keypad.c      **** KB_PORT=0b00001111;
  26               		.loc 1 9 0
  27 0008 9FE0      		ldi r25,lo8(15)
  28 000a 95BB      		out 0x15,r25
  29               	.LVL0:
  30               	.LBB6:
  31               	.LBB7:
  32               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  33               		.loc 2 163 0
  34 000c EFE4      		ldi r30,lo8(-15537)
  35 000e F3EC      		ldi r31,hi8(-15537)
  36 0010 3197      	1:	sbiw r30,1
  37 0012 01F4      		brne 1b
  38 0014 00C0      		rjmp .
  39 0016 0000      		nop
  40               	.LBE7:
  41               	.LBE6:
  10:keypad.c      **** _delay_ms(200);
  11:keypad.c      **** result=KB_PIN;
  42               		.loc 1 11 0
  43 0018 23B3      		in r18,0x13
  44 001a 2093 0000 		sts result,r18
  12:keypad.c      **** 
  13:keypad.c      **** //odczyt wierszy
  14:keypad.c      **** KB_DIR =0b00001111; //wymuszenie zer dla wszystkich wierszy
  45               		.loc 1 14 0
  46 001e 94BB      		out 0x14,r25
  15:keypad.c      **** KB_PORT=0b11110000;
  47               		.loc 1 15 0
  48 0020 85BB      		out 0x15,r24
  49               	.LVL1:
  50               	.LBB8:
  51               	.LBB9:
  52               		.loc 2 163 0
  53 0022 EFE4      		ldi r30,lo8(-15537)
  54 0024 F3EC      		ldi r31,hi8(-15537)
  55 0026 3197      	1:	sbiw r30,1
  56 0028 01F4      		brne 1b
  57 002a 00C0      		rjmp .
  58 002c 0000      		nop
  59               	.LBE9:
  60               	.LBE8:
  16:keypad.c      **** _delay_ms(200);
  17:keypad.c      **** result = result | KB_PIN; 
  61               		.loc 1 17 0
  62 002e 23B3      		in r18,0x13
  63 0030 8091 0000 		lds r24,result
  64 0034 822B      		or r24,r18
  65 0036 8093 0000 		sts result,r24
  18:keypad.c      **** 
  19:keypad.c      **** //uzyskanie kodu skanowania 
  20:keypad.c      **** switch
  66               		.loc 1 20 0
  67 003a 8E3B      		cpi r24,lo8(-66)
  68 003c 01F0      		breq .L3
  69 003e 00F4      		brsh .L4
  70 0040 8E37      		cpi r24,lo8(126)
  71 0042 01F0      		breq .L5
  72 0044 00F4      		brsh .L6
  73 0046 8B37      		cpi r24,lo8(123)
  74 0048 01F0      		breq .L7
  75 004a 8D37      		cpi r24,lo8(125)
  76 004c 01F0      		breq .L8
  77 004e 8737      		cpi r24,lo8(119)
  78 0050 01F4      		brne .L2
  21:keypad.c      **** ( result) {
  22:keypad.c      **** case 0b11101110     : i= 1; break; //1
  23:keypad.c      **** case 0b11011110     : i= 2 ; break; //2
  24:keypad.c      **** case 0b10111110     : i= 3; break; //3
  25:keypad.c      **** case 0b01111110     : i= 4; break; //A
  26:keypad.c      **** case 0b11101101     : i= 5; break; //4
  27:keypad.c      **** case 0b11011101     : i= 6; break; //5
  28:keypad.c      **** case 0b10111101     : i= 7; break; //6
  29:keypad.c      **** case 0b01111101     : i= 8; break; //B
  30:keypad.c      **** case 0b11101011     : i= 9; break; //7
  31:keypad.c      **** case 0b11011011     : i= 10; break; //8
  32:keypad.c      **** case 0b10111011     : i= 11; break; //9
  33:keypad.c      **** case 0b01111011     : i= 12; break; //C
  34:keypad.c      **** case 0b11100111     : i= 13; break; //*
  35:keypad.c      **** case 0b11010111     : i= 14; break; //0
  36:keypad.c      **** case 0b10110111     : i= 15; break; //#
  37:keypad.c      **** case 0b01110111     : i= 16; break; //D
  79               		.loc 1 37 0
  80 0052 80E1      		ldi r24,lo8(16)
  81 0054 00C0      		rjmp .L24
  82               	.L6:
  20:keypad.c      **** ( result) {
  83               		.loc 1 20 0
  84 0056 8B3B      		cpi r24,lo8(-69)
  85 0058 01F0      		breq .L10
  86 005a 8D3B      		cpi r24,lo8(-67)
  87 005c 01F0      		breq .L11
  88 005e 873B      		cpi r24,lo8(-73)
  89 0060 01F4      		brne .L2
  36:keypad.c      **** case 0b01110111     : i= 16; break; //D
  90               		.loc 1 36 0
  91 0062 9093 0000 		sts i,r25
  92 0066 00C0      		rjmp .L23
  93               	.L4:
  20:keypad.c      **** ( result) {
  94               		.loc 1 20 0
  95 0068 8E3D      		cpi r24,lo8(-34)
  96 006a 01F0      		breq .L13
  97 006c 00F4      		brsh .L14
  98 006e 8B3D      		cpi r24,lo8(-37)
  99 0070 01F0      		breq .L15
 100 0072 8D3D      		cpi r24,lo8(-35)
 101 0074 01F0      		breq .L16
 102 0076 873D      		cpi r24,lo8(-41)
 103 0078 01F4      		brne .L2
  35:keypad.c      **** case 0b10110111     : i= 15; break; //#
 104               		.loc 1 35 0
 105 007a 8EE0      		ldi r24,lo8(14)
 106 007c 00C0      		rjmp .L24
 107               	.L14:
  20:keypad.c      **** ( result) {
 108               		.loc 1 20 0
 109 007e 8B3E      		cpi r24,lo8(-21)
 110 0080 01F0      		breq .L18
 111 0082 00F4      		brsh .L19
 112 0084 873E      		cpi r24,lo8(-25)
 113 0086 01F4      		brne .L2
  34:keypad.c      **** case 0b11010111     : i= 14; break; //0
 114               		.loc 1 34 0
 115 0088 8DE0      		ldi r24,lo8(13)
 116 008a 00C0      		rjmp .L24
 117               	.L19:
  20:keypad.c      **** ( result) {
 118               		.loc 1 20 0
 119 008c 8D3E      		cpi r24,lo8(-19)
 120 008e 01F0      		breq .L21
 121 0090 8E3E      		cpi r24,lo8(-18)
 122 0092 01F4      		brne .L2
  22:keypad.c      **** case 0b11011110     : i= 2 ; break; //2
 123               		.loc 1 22 0
 124 0094 81E0      		ldi r24,lo8(1)
 125 0096 00C0      		rjmp .L24
 126               	.L13:
  23:keypad.c      **** case 0b10111110     : i= 3; break; //3
 127               		.loc 1 23 0
 128 0098 82E0      		ldi r24,lo8(2)
 129               	.L24:
 130 009a 8093 0000 		sts i,r24
 131 009e 00C0      		rjmp .L23
 132               	.L3:
  24:keypad.c      **** case 0b01111110     : i= 4; break; //A
 133               		.loc 1 24 0
 134 00a0 83E0      		ldi r24,lo8(3)
 135 00a2 00C0      		rjmp .L24
 136               	.L5:
  25:keypad.c      **** case 0b11101101     : i= 5; break; //4
 137               		.loc 1 25 0
 138 00a4 84E0      		ldi r24,lo8(4)
 139 00a6 00C0      		rjmp .L24
 140               	.L21:
  26:keypad.c      **** case 0b11011101     : i= 6; break; //5
 141               		.loc 1 26 0
 142 00a8 85E0      		ldi r24,lo8(5)
 143 00aa 00C0      		rjmp .L24
 144               	.L16:
  27:keypad.c      **** case 0b10111101     : i= 7; break; //6
 145               		.loc 1 27 0
 146 00ac 86E0      		ldi r24,lo8(6)
 147 00ae 00C0      		rjmp .L24
 148               	.L11:
  28:keypad.c      **** case 0b01111101     : i= 8; break; //B
 149               		.loc 1 28 0
 150 00b0 87E0      		ldi r24,lo8(7)
 151 00b2 00C0      		rjmp .L24
 152               	.L8:
  29:keypad.c      **** case 0b11101011     : i= 9; break; //7
 153               		.loc 1 29 0
 154 00b4 88E0      		ldi r24,lo8(8)
 155 00b6 00C0      		rjmp .L24
 156               	.L18:
  30:keypad.c      **** case 0b11011011     : i= 10; break; //8
 157               		.loc 1 30 0
 158 00b8 89E0      		ldi r24,lo8(9)
 159 00ba 00C0      		rjmp .L24
 160               	.L15:
  31:keypad.c      **** case 0b10111011     : i= 11; break; //9
 161               		.loc 1 31 0
 162 00bc 8AE0      		ldi r24,lo8(10)
 163 00be 00C0      		rjmp .L24
 164               	.L10:
  32:keypad.c      **** case 0b01111011     : i= 12; break; //C
 165               		.loc 1 32 0
 166 00c0 8BE0      		ldi r24,lo8(11)
 167 00c2 00C0      		rjmp .L24
 168               	.L7:
  33:keypad.c      **** case 0b11100111     : i= 13; break; //*
 169               		.loc 1 33 0
 170 00c4 8CE0      		ldi r24,lo8(12)
 171 00c6 00C0      		rjmp .L24
 172               	.L2:
  38:keypad.c      **** default:              
  39:keypad.c      ****      i= 0;
 173               		.loc 1 39 0
 174 00c8 1092 0000 		sts i,__zero_reg__
 175               	.L23:
  40:keypad.c      **** }
  41:keypad.c      **** return i;
  42:keypad.c      **** }...
 176               		.loc 1 42 0
 177 00cc 8091 0000 		lds r24,i
 178 00d0 0895      		ret
 179               		.cfi_endproc
 180               	.LFE6:
 182               		.comm	result,1,1
 183               		.comm	i,1,1
 184               	.Letext0:
 185               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keypad.c
     /tmp/ccsKMTGm.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsKMTGm.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsKMTGm.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsKMTGm.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsKMTGm.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsKMTGm.s:12     .text:0000000000000000 keypad
                            *COM*:0000000000000001 result
                            *COM*:0000000000000001 i

UNDEFINED SYMBOLS
__do_clear_bss
