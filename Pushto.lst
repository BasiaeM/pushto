   1               		.file	"Pushto.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_init
  12               	system_init:
  13               	.LFB7:
  14               		.file 1 "Pushto.c"
   1:Pushto.c      **** #include <avr/io.h>
   2:Pushto.c      **** #include <stdio.h>
   3:Pushto.c      **** 
   4:Pushto.c      **** #define F_CPU 1000000UL
   5:Pushto.c      **** #include <util/delay.h>
   6:Pushto.c      **** #include <avr/interrupt.h>
   7:Pushto.c      **** #include "lcd.h"
   8:Pushto.c      **** #include "encoder.h"
   9:Pushto.c      **** #include "keypad.h"
  10:Pushto.c      ****     
  11:Pushto.c      **** 
  12:Pushto.c      **** 
  13:Pushto.c      **** void system_init (void)
  14:Pushto.c      **** {	
  15               		.loc 1 14 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  15:Pushto.c      **** 	/*Inicjalizacja przerwa≈Ñ zewnetrznych*/
  16:Pushto.c      **** 	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
  21               		.loc 1 16 0
  22 0000 85B7      		in r24,0x35
  23 0002 8560      		ori r24,lo8(5)
  24 0004 85BF      		out 0x35,r24
  17:Pushto.c      **** 	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
  25               		.loc 1 17 0
  26 0006 8BB7      		in r24,0x3b
  27 0008 806C      		ori r24,lo8(-64)
  28 000a 8BBF      		out 0x3b,r24
  18:Pushto.c      **** 	
  19:Pushto.c      **** 	/*inicjalizacja LCD*/
  20:Pushto.c      **** 	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
  29               		.loc 1 20 0
  30 000c 8FEF      		ldi r24,lo8(-1)
  31 000e 8ABB      		out 0x1a,r24
  21:Pushto.c      **** 
  22:Pushto.c      **** 	/*inicjalizacja encoderow*/
  23:Pushto.c      **** 	EN_DIR = 0b00000000; //Ustawienie pinow dla encoderow
  32               		.loc 1 23 0
  33 0010 11BA      		out 0x11,__zero_reg__
  24:Pushto.c      **** 	EN_PORT = 0b00001111; //pullupy dla encoderow
  34               		.loc 1 24 0
  35 0012 8FE0      		ldi r24,lo8(15)
  36 0014 82BB      		out 0x12,r24
  25:Pushto.c      **** 
  26:Pushto.c      **** 	encoder1.maskA=0b00000100;
  37               		.loc 1 26 0
  38 0016 E0E0      		ldi r30,lo8(encoder1)
  39 0018 F0E0      		ldi r31,hi8(encoder1)
  40 001a 84E0      		ldi r24,lo8(4)
  41 001c 8083      		st Z,r24
  27:Pushto.c      **** 	encoder1.maskB=0b00000001;
  42               		.loc 1 27 0
  43 001e 81E0      		ldi r24,lo8(1)
  44 0020 8183      		std Z+1,r24
  28:Pushto.c      **** 	encoder1.count=0;
  45               		.loc 1 28 0
  46 0022 1382      		std Z+3,__zero_reg__
  47 0024 1282      		std Z+2,__zero_reg__
  29:Pushto.c      **** 	encoder2.maskA=0b000001000;
  48               		.loc 1 29 0
  49 0026 E0E0      		ldi r30,lo8(encoder2)
  50 0028 F0E0      		ldi r31,hi8(encoder2)
  51 002a 88E0      		ldi r24,lo8(8)
  52 002c 8083      		st Z,r24
  30:Pushto.c      **** 	encoder2.maskB=0b000000010;
  53               		.loc 1 30 0
  54 002e 82E0      		ldi r24,lo8(2)
  55 0030 8183      		std Z+1,r24
  31:Pushto.c      **** 	encoder2.count=0;
  56               		.loc 1 31 0
  57 0032 1382      		std Z+3,__zero_reg__
  58 0034 1282      		std Z+2,__zero_reg__
  32:Pushto.c      **** 	
  33:Pushto.c      **** 	//############# Timer1 16bit config ####################
  34:Pushto.c      **** 	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
  59               		.loc 1 34 0
  60 0036 8FB5      		in r24,0x2f
  61 0038 8FBD      		out 0x2f,r24
  35:Pushto.c      ****  	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Mode = CTC, Prescaler = 64
  62               		.loc 1 35 0
  63 003a 8EB5      		in r24,0x2e
  64 003c 8B60      		ori r24,lo8(11)
  65 003e 8EBD      		out 0x2e,r24
  36:Pushto.c      **** 	OCR1A = 31250;   // timer compare value 1Hz - 31250 
  66               		.loc 1 36 0
  67 0040 82E1      		ldi r24,lo8(18)
  68 0042 9AE7      		ldi r25,lo8(122)
  69 0044 9BBD      		out 0x2a+1,r25
  70 0046 8ABD      		out 0x2a,r24
  37:Pushto.c      **** 	TIMSK|=(1<<OCIE1A); //enable compare reg A interrupt
  71               		.loc 1 37 0
  72 0048 89B7      		in r24,0x39
  73 004a 8061      		ori r24,lo8(16)
  74 004c 89BF      		out 0x39,r24
  38:Pushto.c      **** 	
  39:Pushto.c      ****     	sei(); // enable global interrupts
  75               		.loc 1 39 0
  76               	/* #APP */
  77               	 ;  39 "Pushto.c" 1
  78 004e 7894      		sei
  79               	 ;  0 "" 2
  80               	/* #NOAPP */
  81 0050 0895      		ret
  82               		.cfi_endproc
  83               	.LFE7:
  85               	.global	__vector_6
  87               	__vector_6:
  88               	.LFB8:
  40:Pushto.c      **** 
  41:Pushto.c      **** }
  42:Pushto.c      **** 
  43:Pushto.c      **** ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
  44:Pushto.c      **** {
  89               		.loc 1 44 0
  90               		.cfi_startproc
  91 0052 1F92      		push r1
  92               	.LCFI0:
  93               		.cfi_def_cfa_offset 3
  94               		.cfi_offset 1, -2
  95 0054 0F92      		push r0
  96               	.LCFI1:
  97               		.cfi_def_cfa_offset 4
  98               		.cfi_offset 0, -3
  99 0056 0FB6      		in r0,__SREG__
 100 0058 0F92      		push r0
 101 005a 1124      		clr __zero_reg__
 102               	/* prologue: Signal */
 103               	/* frame size = 0 */
 104               	/* stack size = 3 */
 105               	.L__stack_usage = 3
 106               	/* epilogue start */
  45:Pushto.c      **** 
  46:Pushto.c      **** }
 107               		.loc 1 46 0
 108 005c 0F90      		pop r0
 109 005e 0FBE      		out __SREG__,r0
 110 0060 0F90      		pop r0
 111 0062 1F90      		pop r1
 112 0064 1895      		reti
 113               		.cfi_endproc
 114               	.LFE8:
 116               	.global	__vector_1
 118               	__vector_1:
 119               	.LFB9:
  47:Pushto.c      **** 
  48:Pushto.c      **** ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
  49:Pushto.c      **** {
 120               		.loc 1 49 0
 121               		.cfi_startproc
 122 0066 1F92      		push r1
 123               	.LCFI2:
 124               		.cfi_def_cfa_offset 3
 125               		.cfi_offset 1, -2
 126 0068 0F92      		push r0
 127               	.LCFI3:
 128               		.cfi_def_cfa_offset 4
 129               		.cfi_offset 0, -3
 130 006a 0FB6      		in r0,__SREG__
 131 006c 0F92      		push r0
 132 006e 1124      		clr __zero_reg__
 133 0070 2F93      		push r18
 134               	.LCFI4:
 135               		.cfi_def_cfa_offset 5
 136               		.cfi_offset 18, -4
 137 0072 3F93      		push r19
 138               	.LCFI5:
 139               		.cfi_def_cfa_offset 6
 140               		.cfi_offset 19, -5
 141 0074 4F93      		push r20
 142               	.LCFI6:
 143               		.cfi_def_cfa_offset 7
 144               		.cfi_offset 20, -6
 145 0076 5F93      		push r21
 146               	.LCFI7:
 147               		.cfi_def_cfa_offset 8
 148               		.cfi_offset 21, -7
 149 0078 6F93      		push r22
 150               	.LCFI8:
 151               		.cfi_def_cfa_offset 9
 152               		.cfi_offset 22, -8
 153 007a 7F93      		push r23
 154               	.LCFI9:
 155               		.cfi_def_cfa_offset 10
 156               		.cfi_offset 23, -9
 157 007c 8F93      		push r24
 158               	.LCFI10:
 159               		.cfi_def_cfa_offset 11
 160               		.cfi_offset 24, -10
 161 007e 9F93      		push r25
 162               	.LCFI11:
 163               		.cfi_def_cfa_offset 12
 164               		.cfi_offset 25, -11
 165 0080 AF93      		push r26
 166               	.LCFI12:
 167               		.cfi_def_cfa_offset 13
 168               		.cfi_offset 26, -12
 169 0082 BF93      		push r27
 170               	.LCFI13:
 171               		.cfi_def_cfa_offset 14
 172               		.cfi_offset 27, -13
 173 0084 EF93      		push r30
 174               	.LCFI14:
 175               		.cfi_def_cfa_offset 15
 176               		.cfi_offset 30, -14
 177 0086 FF93      		push r31
 178               	.LCFI15:
 179               		.cfi_def_cfa_offset 16
 180               		.cfi_offset 31, -15
 181               	/* prologue: Signal */
 182               	/* frame size = 0 */
 183               	/* stack size = 15 */
 184               	.L__stack_usage = 15
  50:Pushto.c      **** 	direction(&encoder1);
 185               		.loc 1 50 0
 186 0088 80E0      		ldi r24,lo8(encoder1)
 187 008a 90E0      		ldi r25,hi8(encoder1)
 188 008c 0E94 0000 		call direction
 189               	.LVL0:
 190               	/* epilogue start */
  51:Pushto.c      **** }
 191               		.loc 1 51 0
 192 0090 FF91      		pop r31
 193 0092 EF91      		pop r30
 194 0094 BF91      		pop r27
 195 0096 AF91      		pop r26
 196 0098 9F91      		pop r25
 197 009a 8F91      		pop r24
 198 009c 7F91      		pop r23
 199 009e 6F91      		pop r22
 200 00a0 5F91      		pop r21
 201 00a2 4F91      		pop r20
 202 00a4 3F91      		pop r19
 203 00a6 2F91      		pop r18
 204 00a8 0F90      		pop r0
 205 00aa 0FBE      		out __SREG__,r0
 206 00ac 0F90      		pop r0
 207 00ae 1F90      		pop r1
 208 00b0 1895      		reti
 209               		.cfi_endproc
 210               	.LFE9:
 212               	.global	__vector_2
 214               	__vector_2:
 215               	.LFB10:
  52:Pushto.c      **** 
  53:Pushto.c      **** ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
  54:Pushto.c      **** {
 216               		.loc 1 54 0
 217               		.cfi_startproc
 218 00b2 1F92      		push r1
 219               	.LCFI16:
 220               		.cfi_def_cfa_offset 3
 221               		.cfi_offset 1, -2
 222 00b4 0F92      		push r0
 223               	.LCFI17:
 224               		.cfi_def_cfa_offset 4
 225               		.cfi_offset 0, -3
 226 00b6 0FB6      		in r0,__SREG__
 227 00b8 0F92      		push r0
 228 00ba 1124      		clr __zero_reg__
 229 00bc 2F93      		push r18
 230               	.LCFI18:
 231               		.cfi_def_cfa_offset 5
 232               		.cfi_offset 18, -4
 233 00be 3F93      		push r19
 234               	.LCFI19:
 235               		.cfi_def_cfa_offset 6
 236               		.cfi_offset 19, -5
 237 00c0 4F93      		push r20
 238               	.LCFI20:
 239               		.cfi_def_cfa_offset 7
 240               		.cfi_offset 20, -6
 241 00c2 5F93      		push r21
 242               	.LCFI21:
 243               		.cfi_def_cfa_offset 8
 244               		.cfi_offset 21, -7
 245 00c4 6F93      		push r22
 246               	.LCFI22:
 247               		.cfi_def_cfa_offset 9
 248               		.cfi_offset 22, -8
 249 00c6 7F93      		push r23
 250               	.LCFI23:
 251               		.cfi_def_cfa_offset 10
 252               		.cfi_offset 23, -9
 253 00c8 8F93      		push r24
 254               	.LCFI24:
 255               		.cfi_def_cfa_offset 11
 256               		.cfi_offset 24, -10
 257 00ca 9F93      		push r25
 258               	.LCFI25:
 259               		.cfi_def_cfa_offset 12
 260               		.cfi_offset 25, -11
 261 00cc AF93      		push r26
 262               	.LCFI26:
 263               		.cfi_def_cfa_offset 13
 264               		.cfi_offset 26, -12
 265 00ce BF93      		push r27
 266               	.LCFI27:
 267               		.cfi_def_cfa_offset 14
 268               		.cfi_offset 27, -13
 269 00d0 EF93      		push r30
 270               	.LCFI28:
 271               		.cfi_def_cfa_offset 15
 272               		.cfi_offset 30, -14
 273 00d2 FF93      		push r31
 274               	.LCFI29:
 275               		.cfi_def_cfa_offset 16
 276               		.cfi_offset 31, -15
 277               	/* prologue: Signal */
 278               	/* frame size = 0 */
 279               	/* stack size = 15 */
 280               	.L__stack_usage = 15
  55:Pushto.c      **** 	direction(&encoder2);
 281               		.loc 1 55 0
 282 00d4 80E0      		ldi r24,lo8(encoder2)
 283 00d6 90E0      		ldi r25,hi8(encoder2)
 284 00d8 0E94 0000 		call direction
 285               	.LVL1:
 286               	/* epilogue start */
  56:Pushto.c      **** }
 287               		.loc 1 56 0
 288 00dc FF91      		pop r31
 289 00de EF91      		pop r30
 290 00e0 BF91      		pop r27
 291 00e2 AF91      		pop r26
 292 00e4 9F91      		pop r25
 293 00e6 8F91      		pop r24
 294 00e8 7F91      		pop r23
 295 00ea 6F91      		pop r22
 296 00ec 5F91      		pop r21
 297 00ee 4F91      		pop r20
 298 00f0 3F91      		pop r19
 299 00f2 2F91      		pop r18
 300 00f4 0F90      		pop r0
 301 00f6 0FBE      		out __SREG__,r0
 302 00f8 0F90      		pop r0
 303 00fa 1F90      		pop r1
 304 00fc 1895      		reti
 305               		.cfi_endproc
 306               	.LFE10:
 308               		.section	.rodata.str1.1,"aMS",@progbits,1
 309               	.LC0:
 310 0000 5055 5348 		.string	"PUSHTO"
 310      544F 00
 311               	.LC1:
 312 0007 4531 3D00 		.string	"E1="
 313               	.LC2:
 314 000b 2045 323D 		.string	" E2="
 314      00
 315               		.section	.text.startup,"ax",@progbits
 316               	.global	main
 318               	main:
 319               	.LFB11:
  57:Pushto.c      **** 
  58:Pushto.c      **** 
  59:Pushto.c      **** int main(void)
  60:Pushto.c      **** {
 320               		.loc 1 60 0
 321               		.cfi_startproc
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
  61:Pushto.c      **** 
  62:Pushto.c      **** 	//unsigned int temp;
  63:Pushto.c      **** 	system_init();
 326               		.loc 1 63 0
 327 0000 0E94 0000 		call system_init
 328               	.LVL2:
  64:Pushto.c      **** 	lcdInit();
 329               		.loc 1 64 0
 330 0004 0E94 0000 		call lcdInit
 331               	.LVL3:
  65:Pushto.c      **** 	prints("PUSHTO");
 332               		.loc 1 65 0
 333 0008 80E0      		ldi r24,lo8(.LC0)
 334 000a 90E0      		ldi r25,hi8(.LC0)
 335 000c 0E94 0000 		call prints
 336               	.LVL4:
 337               	.L6:
  66:Pushto.c      **** 	while(1)
  67:Pushto.c      **** 	{
  68:Pushto.c      **** 	gotoXy(0,0);
 338               		.loc 1 68 0 discriminator 1
 339 0010 60E0      		ldi r22,0
 340 0012 80E0      		ldi r24,0
 341 0014 0E94 0000 		call gotoXy
 342               	.LVL5:
  69:Pushto.c      **** 	prints("E1=");
 343               		.loc 1 69 0 discriminator 1
 344 0018 80E0      		ldi r24,lo8(.LC1)
 345 001a 90E0      		ldi r25,hi8(.LC1)
 346 001c 0E94 0000 		call prints
 347               	.LVL6:
  70:Pushto.c      **** 	integerToLcd(encoder1.count);
 348               		.loc 1 70 0 discriminator 1
 349 0020 8091 0000 		lds r24,encoder1+2
 350 0024 9091 0000 		lds r25,encoder1+2+1
 351 0028 0E94 0000 		call integerToLcd
 352               	.LVL7:
  71:Pushto.c      **** 	prints(" E2=");
 353               		.loc 1 71 0 discriminator 1
 354 002c 80E0      		ldi r24,lo8(.LC2)
 355 002e 90E0      		ldi r25,hi8(.LC2)
 356 0030 0E94 0000 		call prints
 357               	.LVL8:
  72:Pushto.c      **** 	integerToLcd(encoder2.count);
 358               		.loc 1 72 0 discriminator 1
 359 0034 8091 0000 		lds r24,encoder2+2
 360 0038 9091 0000 		lds r25,encoder2+2+1
 361 003c 0E94 0000 		call integerToLcd
 362               	.LVL9:
  73:Pushto.c      **** 	//gotoXy(0,1);
  74:Pushto.c      **** 	//integerToLcd(keypad());
  75:Pushto.c      **** 
  76:Pushto.c      **** 	}
 363               		.loc 1 76 0 discriminator 1
 364 0040 00C0      		rjmp .L6
 365               		.cfi_endproc
 366               	.LFE11:
 368               		.comm	encoder2,4,1
 369               		.comm	encoder1,4,1
 370               		.text
 371               	.Letext0:
 372               		.file 2 "/usr/lib/avr/include/stdint.h"
 373               		.file 3 "encoder.h"
 374               		.file 4 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Pushto.c
     /tmp/ccQqCUvk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQqCUvk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQqCUvk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQqCUvk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQqCUvk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQqCUvk.s:12     .text:0000000000000000 system_init
                            *COM*:0000000000000004 encoder1
                            *COM*:0000000000000004 encoder2
     /tmp/ccQqCUvk.s:87     .text:0000000000000052 __vector_6
     /tmp/ccQqCUvk.s:118    .text:0000000000000066 __vector_1
     /tmp/ccQqCUvk.s:214    .text:00000000000000b2 __vector_2
     /tmp/ccQqCUvk.s:318    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
direction
lcdInit
prints
gotoXy
integerToLcd
__do_copy_data
__do_clear_bss
