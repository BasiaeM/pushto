   1               		.file	"Pushto.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	system_init
  12               	system_init:
  13               	.LFB7:
  14               		.file 1 "Pushto.c"
   1:Pushto.c      **** #include <avr/io.h>
   2:Pushto.c      **** #include <stdio.h>
   3:Pushto.c      **** 
   4:Pushto.c      **** #define F_CPU 2000000UL //kwarc 2MHz
   5:Pushto.c      **** #include <util/delay.h>
   6:Pushto.c      **** #include <avr/interrupt.h>
   7:Pushto.c      **** #include "lcd.h"
   8:Pushto.c      **** #include "encoder.h"
   9:Pushto.c      **** #include "keypad.h"
  10:Pushto.c      **** #include "pushto_lib.h"
  11:Pushto.c      ****     
  12:Pushto.c      **** 
  13:Pushto.c      **** void system_init (void)
  14:Pushto.c      **** {	
  15               		.loc 1 14 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  15:Pushto.c      **** 	/*Inicjalizacja przerwań zewnetrznych*/
  16:Pushto.c      **** 	MCUCR |=(1<<ISC00) | (1<<ISC10);	//ustawienie przerwan na zmiane na INT0 i INT1
  21               		.loc 1 16 0
  22 0000 85B7      		in r24,0x35
  23 0002 8560      		ori r24,lo8(5)
  24 0004 85BF      		out 0x35,r24
  17:Pushto.c      **** 	GICR |= (1<<INT0) | (1<<INT1); //wlaczenie zewnetrznych przerwan na INT0 i INT1
  25               		.loc 1 17 0
  26 0006 8BB7      		in r24,0x3b
  27 0008 806C      		ori r24,lo8(-64)
  28 000a 8BBF      		out 0x3b,r24
  18:Pushto.c      **** 	
  19:Pushto.c      **** 	/*inicjalizacja LCD*/
  20:Pushto.c      **** 	LCD_DIR = 0xFF;		//Ustawienie pinow dla wyswietlacza LCD
  29               		.loc 1 20 0
  30 000c 8FEF      		ldi r24,lo8(-1)
  31 000e 8ABB      		out 0x1a,r24
  21:Pushto.c      **** 
  22:Pushto.c      **** 	/*inicjalizacja encoderow*/
  23:Pushto.c      **** 	EN_DIR = 0b00000000; //Ustawienie pinow dla encoderow
  32               		.loc 1 23 0
  33 0010 11BA      		out 0x11,__zero_reg__
  24:Pushto.c      **** 	EN_PORT = 0b00001111; //pullupy dla encoderow
  34               		.loc 1 24 0
  35 0012 9FE0      		ldi r25,lo8(15)
  36 0014 92BB      		out 0x12,r25
  25:Pushto.c      **** 
  26:Pushto.c      **** 	encoder1.maskA=0b00000100;
  37               		.loc 1 26 0
  38 0016 A0E0      		ldi r26,lo8(encoder1)
  39 0018 B0E0      		ldi r27,hi8(encoder1)
  40 001a 94E0      		ldi r25,lo8(4)
  41 001c 9C93      		st X,r25
  27:Pushto.c      **** 	encoder1.maskB=0b00000001;
  42               		.loc 1 27 0
  43 001e 91E0      		ldi r25,lo8(1)
  44 0020 1196      		adiw r26,1
  45 0022 9C93      		st X,r25
  46 0024 1197      		sbiw r26,1
  28:Pushto.c      **** 	encoder1.count=0; //----------------------------enkodery start 0 
  47               		.loc 1 28 0
  48 0026 1396      		adiw r26,2+1
  49 0028 1C92      		st X,__zero_reg__
  50 002a 1E92      		st -X,__zero_reg__
  51 002c 1297      		sbiw r26,2
  29:Pushto.c      **** 	encoder2.maskA=0b000001000;
  52               		.loc 1 29 0
  53 002e E0E0      		ldi r30,lo8(encoder2)
  54 0030 F0E0      		ldi r31,hi8(encoder2)
  55 0032 98E0      		ldi r25,lo8(8)
  56 0034 9083      		st Z,r25
  30:Pushto.c      **** 	encoder2.maskB=0b000000010;
  57               		.loc 1 30 0
  58 0036 92E0      		ldi r25,lo8(2)
  59 0038 9183      		std Z+1,r25
  31:Pushto.c      **** 	encoder2.count=0;
  60               		.loc 1 31 0
  61 003a 1382      		std Z+3,__zero_reg__
  62 003c 1282      		std Z+2,__zero_reg__
  32:Pushto.c      **** 	encoder1.range=EN1_RANGE;
  63               		.loc 1 32 0
  64 003e 40E0      		ldi r20,0
  65 0040 50E0      		ldi r21,0
  66 0042 61EE      		ldi r22,lo8(-31)
  67 0044 73E4      		ldi r23,lo8(67)
  68 0046 1496      		adiw r26,4
  69 0048 4D93      		st X+,r20
  70 004a 5D93      		st X+,r21
  71 004c 6D93      		st X+,r22
  72 004e 7C93      		st X,r23
  73 0050 1797      		sbiw r26,4+3
  33:Pushto.c      **** 	encoder2.range=EN2_RANGE;
  74               		.loc 1 33 0
  75 0052 4483      		std Z+4,r20
  76 0054 5583      		std Z+5,r21
  77 0056 6683      		std Z+6,r22
  78 0058 7783      		std Z+7,r23
  34:Pushto.c      **** 
  35:Pushto.c      **** 	//inicjalizacja klawiatury
  36:Pushto.c      **** 	keypad_A.i=0; //zerowanie wskaznika buforu
  79               		.loc 1 36 0
  80 005a E0E0      		ldi r30,lo8(keypad_A)
  81 005c F0E0      		ldi r31,hi8(keypad_A)
  82 005e 138A      		std Z+19,__zero_reg__
  83 0060 128A      		std Z+18,__zero_reg__
  37:Pushto.c      **** 	keypad_A.flags='\0';
  84               		.loc 1 37 0
  85 0062 148A      		std Z+20,__zero_reg__
  38:Pushto.c      **** 	keypad_A.last_result = 0xFF;
  86               		.loc 1 38 0
  87 0064 8183      		std Z+1,r24
  39:Pushto.c      **** 
  40:Pushto.c      **** 	telescope_A.update=0; //flaga aktualizacja nastaw
  88               		.loc 1 40 0
  89 0066 1092 0000 		sts telescope_A+4+1,__zero_reg__
  90 006a 1092 0000 		sts telescope_A+4,__zero_reg__
  41:Pushto.c      **** 
  42:Pushto.c      **** 	//konfiguracja timera TIMER1
  43:Pushto.c      **** 	TCCR1A |= 0;   // not required since WGM11:0, both are zero (0)
  91               		.loc 1 43 0
  92 006e 8FB5      		in r24,0x2f
  93 0070 8FBD      		out 0x2f,r24
  44:Pushto.c      ****  	TCCR1B |= (1 << WGM12)|(1 << CS11)|(1 << CS10);   // Tryb = CTC, Dzielnik = 64
  94               		.loc 1 44 0
  95 0072 8EB5      		in r24,0x2e
  96 0074 8B60      		ori r24,lo8(11)
  97 0076 8EBD      		out 0x2e,r24
  45:Pushto.c      **** 	OCR1A = 31165;   // licznik porownawczy 1Hz - 31250, dla sekundy gwiazdowej -31165
  98               		.loc 1 45 0
  99 0078 8DEB      		ldi r24,lo8(-67)
 100 007a 99E7      		ldi r25,lo8(121)
 101 007c 9BBD      		out 0x2a+1,r25
 102 007e 8ABD      		out 0x2a,r24
  46:Pushto.c      **** 	TIMSK|=(1<<OCIE1A); //włączenie przerwań na porownanie z rejestrem A
 103               		.loc 1 46 0
 104 0080 89B7      		in r24,0x39
 105 0082 8061      		ori r24,lo8(16)
 106 0084 89BF      		out 0x39,r24
  47:Pushto.c      **** 	
  48:Pushto.c      ****     	sei(); //globalne włączenie przerwań
 107               		.loc 1 48 0
 108               	/* #APP */
 109               	 ;  48 "Pushto.c" 1
 110 0086 7894      		sei
 111               	 ;  0 "" 2
 112               	/* #NOAPP */
 113 0088 0895      		ret
 114               		.cfi_endproc
 115               	.LFE7:
 117               	.global	__addsf3
 118               	.global	__vector_6
 120               	__vector_6:
 121               	.LFB8:
  49:Pushto.c      **** 
  50:Pushto.c      **** }
  51:Pushto.c      **** 
  52:Pushto.c      **** ISR(TIMER1_COMPA_vect) //obsluga przerwania dla timera
  53:Pushto.c      **** {
 122               		.loc 1 53 0
 123               		.cfi_startproc
 124 008a 1F92      		push r1
 125               	.LCFI0:
 126               		.cfi_def_cfa_offset 3
 127               		.cfi_offset 1, -2
 128 008c 0F92      		push r0
 129               	.LCFI1:
 130               		.cfi_def_cfa_offset 4
 131               		.cfi_offset 0, -3
 132 008e 0FB6      		in r0,__SREG__
 133 0090 0F92      		push r0
 134 0092 1124      		clr __zero_reg__
 135 0094 2F93      		push r18
 136               	.LCFI2:
 137               		.cfi_def_cfa_offset 5
 138               		.cfi_offset 18, -4
 139 0096 3F93      		push r19
 140               	.LCFI3:
 141               		.cfi_def_cfa_offset 6
 142               		.cfi_offset 19, -5
 143 0098 4F93      		push r20
 144               	.LCFI4:
 145               		.cfi_def_cfa_offset 7
 146               		.cfi_offset 20, -6
 147 009a 5F93      		push r21
 148               	.LCFI5:
 149               		.cfi_def_cfa_offset 8
 150               		.cfi_offset 21, -7
 151 009c 6F93      		push r22
 152               	.LCFI6:
 153               		.cfi_def_cfa_offset 9
 154               		.cfi_offset 22, -8
 155 009e 7F93      		push r23
 156               	.LCFI7:
 157               		.cfi_def_cfa_offset 10
 158               		.cfi_offset 23, -9
 159 00a0 8F93      		push r24
 160               	.LCFI8:
 161               		.cfi_def_cfa_offset 11
 162               		.cfi_offset 24, -10
 163 00a2 9F93      		push r25
 164               	.LCFI9:
 165               		.cfi_def_cfa_offset 12
 166               		.cfi_offset 25, -11
 167 00a4 AF93      		push r26
 168               	.LCFI10:
 169               		.cfi_def_cfa_offset 13
 170               		.cfi_offset 26, -12
 171 00a6 BF93      		push r27
 172               	.LCFI11:
 173               		.cfi_def_cfa_offset 14
 174               		.cfi_offset 27, -13
 175 00a8 CF93      		push r28
 176               	.LCFI12:
 177               		.cfi_def_cfa_offset 15
 178               		.cfi_offset 28, -14
 179 00aa DF93      		push r29
 180               	.LCFI13:
 181               		.cfi_def_cfa_offset 16
 182               		.cfi_offset 29, -15
 183 00ac EF93      		push r30
 184               	.LCFI14:
 185               		.cfi_def_cfa_offset 17
 186               		.cfi_offset 30, -16
 187 00ae FF93      		push r31
 188               	.LCFI15:
 189               		.cfi_def_cfa_offset 18
 190               		.cfi_offset 31, -17
 191               	/* prologue: Signal */
 192               	/* frame size = 0 */
 193               	/* stack size = 17 */
 194               	.L__stack_usage = 17
  54:Pushto.c      **** 	telescope_A.time+=0.000004835; //czas gwiazdowy w radianach
 195               		.loc 1 54 0
 196 00b0 C0E0      		ldi r28,lo8(telescope_A)
 197 00b2 D0E0      		ldi r29,hi8(telescope_A)
 198 00b4 25E5      		ldi r18,lo8(85)
 199 00b6 3CE3      		ldi r19,lo8(60)
 200 00b8 42EA      		ldi r20,lo8(-94)
 201 00ba 56E3      		ldi r21,lo8(54)
 202 00bc 6881      		ld r22,Y
 203 00be 7981      		ldd r23,Y+1
 204 00c0 8A81      		ldd r24,Y+2
 205 00c2 9B81      		ldd r25,Y+3
 206 00c4 0E94 0000 		call __addsf3
 207               	.LVL0:
 208 00c8 6883      		st Y,r22
 209 00ca 7983      		std Y+1,r23
 210 00cc 8A83      		std Y+2,r24
 211 00ce 9B83      		std Y+3,r25
  55:Pushto.c      **** 	telescope_A.update++;
 212               		.loc 1 55 0
 213 00d0 8C81      		ldd r24,Y+4
 214 00d2 9D81      		ldd r25,Y+5
 215 00d4 0196      		adiw r24,1
 216 00d6 9D83      		std Y+5,r25
 217 00d8 8C83      		std Y+4,r24
 218               	/* epilogue start */
  56:Pushto.c      **** }
 219               		.loc 1 56 0
 220 00da FF91      		pop r31
 221 00dc EF91      		pop r30
 222 00de DF91      		pop r29
 223 00e0 CF91      		pop r28
 224 00e2 BF91      		pop r27
 225 00e4 AF91      		pop r26
 226 00e6 9F91      		pop r25
 227 00e8 8F91      		pop r24
 228 00ea 7F91      		pop r23
 229 00ec 6F91      		pop r22
 230 00ee 5F91      		pop r21
 231 00f0 4F91      		pop r20
 232 00f2 3F91      		pop r19
 233 00f4 2F91      		pop r18
 234 00f6 0F90      		pop r0
 235 00f8 0FBE      		out __SREG__,r0
 236 00fa 0F90      		pop r0
 237 00fc 1F90      		pop r1
 238 00fe 1895      		reti
 239               		.cfi_endproc
 240               	.LFE8:
 242               	.global	__vector_1
 244               	__vector_1:
 245               	.LFB9:
  57:Pushto.c      **** 
  58:Pushto.c      **** ISR(INT0_vect) //przerwanie dla INT0 dla encodera1
  59:Pushto.c      **** {
 246               		.loc 1 59 0
 247               		.cfi_startproc
 248 0100 1F92      		push r1
 249               	.LCFI16:
 250               		.cfi_def_cfa_offset 3
 251               		.cfi_offset 1, -2
 252 0102 0F92      		push r0
 253               	.LCFI17:
 254               		.cfi_def_cfa_offset 4
 255               		.cfi_offset 0, -3
 256 0104 0FB6      		in r0,__SREG__
 257 0106 0F92      		push r0
 258 0108 1124      		clr __zero_reg__
 259 010a 2F93      		push r18
 260               	.LCFI18:
 261               		.cfi_def_cfa_offset 5
 262               		.cfi_offset 18, -4
 263 010c 3F93      		push r19
 264               	.LCFI19:
 265               		.cfi_def_cfa_offset 6
 266               		.cfi_offset 19, -5
 267 010e 4F93      		push r20
 268               	.LCFI20:
 269               		.cfi_def_cfa_offset 7
 270               		.cfi_offset 20, -6
 271 0110 5F93      		push r21
 272               	.LCFI21:
 273               		.cfi_def_cfa_offset 8
 274               		.cfi_offset 21, -7
 275 0112 6F93      		push r22
 276               	.LCFI22:
 277               		.cfi_def_cfa_offset 9
 278               		.cfi_offset 22, -8
 279 0114 7F93      		push r23
 280               	.LCFI23:
 281               		.cfi_def_cfa_offset 10
 282               		.cfi_offset 23, -9
 283 0116 8F93      		push r24
 284               	.LCFI24:
 285               		.cfi_def_cfa_offset 11
 286               		.cfi_offset 24, -10
 287 0118 9F93      		push r25
 288               	.LCFI25:
 289               		.cfi_def_cfa_offset 12
 290               		.cfi_offset 25, -11
 291 011a AF93      		push r26
 292               	.LCFI26:
 293               		.cfi_def_cfa_offset 13
 294               		.cfi_offset 26, -12
 295 011c BF93      		push r27
 296               	.LCFI27:
 297               		.cfi_def_cfa_offset 14
 298               		.cfi_offset 27, -13
 299 011e EF93      		push r30
 300               	.LCFI28:
 301               		.cfi_def_cfa_offset 15
 302               		.cfi_offset 30, -14
 303 0120 FF93      		push r31
 304               	.LCFI29:
 305               		.cfi_def_cfa_offset 16
 306               		.cfi_offset 31, -15
 307               	/* prologue: Signal */
 308               	/* frame size = 0 */
 309               	/* stack size = 15 */
 310               	.L__stack_usage = 15
  60:Pushto.c      **** 	direction(&encoder1);
 311               		.loc 1 60 0
 312 0122 80E0      		ldi r24,lo8(encoder1)
 313 0124 90E0      		ldi r25,hi8(encoder1)
 314 0126 0E94 0000 		call direction
 315               	.LVL1:
 316               	/* epilogue start */
  61:Pushto.c      **** }
 317               		.loc 1 61 0
 318 012a FF91      		pop r31
 319 012c EF91      		pop r30
 320 012e BF91      		pop r27
 321 0130 AF91      		pop r26
 322 0132 9F91      		pop r25
 323 0134 8F91      		pop r24
 324 0136 7F91      		pop r23
 325 0138 6F91      		pop r22
 326 013a 5F91      		pop r21
 327 013c 4F91      		pop r20
 328 013e 3F91      		pop r19
 329 0140 2F91      		pop r18
 330 0142 0F90      		pop r0
 331 0144 0FBE      		out __SREG__,r0
 332 0146 0F90      		pop r0
 333 0148 1F90      		pop r1
 334 014a 1895      		reti
 335               		.cfi_endproc
 336               	.LFE9:
 338               	.global	__vector_2
 340               	__vector_2:
 341               	.LFB10:
  62:Pushto.c      **** 
  63:Pushto.c      **** ISR(INT1_vect) //przerwanie dla INT1 dla encodera2
  64:Pushto.c      **** {
 342               		.loc 1 64 0
 343               		.cfi_startproc
 344 014c 1F92      		push r1
 345               	.LCFI30:
 346               		.cfi_def_cfa_offset 3
 347               		.cfi_offset 1, -2
 348 014e 0F92      		push r0
 349               	.LCFI31:
 350               		.cfi_def_cfa_offset 4
 351               		.cfi_offset 0, -3
 352 0150 0FB6      		in r0,__SREG__
 353 0152 0F92      		push r0
 354 0154 1124      		clr __zero_reg__
 355 0156 2F93      		push r18
 356               	.LCFI32:
 357               		.cfi_def_cfa_offset 5
 358               		.cfi_offset 18, -4
 359 0158 3F93      		push r19
 360               	.LCFI33:
 361               		.cfi_def_cfa_offset 6
 362               		.cfi_offset 19, -5
 363 015a 4F93      		push r20
 364               	.LCFI34:
 365               		.cfi_def_cfa_offset 7
 366               		.cfi_offset 20, -6
 367 015c 5F93      		push r21
 368               	.LCFI35:
 369               		.cfi_def_cfa_offset 8
 370               		.cfi_offset 21, -7
 371 015e 6F93      		push r22
 372               	.LCFI36:
 373               		.cfi_def_cfa_offset 9
 374               		.cfi_offset 22, -8
 375 0160 7F93      		push r23
 376               	.LCFI37:
 377               		.cfi_def_cfa_offset 10
 378               		.cfi_offset 23, -9
 379 0162 8F93      		push r24
 380               	.LCFI38:
 381               		.cfi_def_cfa_offset 11
 382               		.cfi_offset 24, -10
 383 0164 9F93      		push r25
 384               	.LCFI39:
 385               		.cfi_def_cfa_offset 12
 386               		.cfi_offset 25, -11
 387 0166 AF93      		push r26
 388               	.LCFI40:
 389               		.cfi_def_cfa_offset 13
 390               		.cfi_offset 26, -12
 391 0168 BF93      		push r27
 392               	.LCFI41:
 393               		.cfi_def_cfa_offset 14
 394               		.cfi_offset 27, -13
 395 016a EF93      		push r30
 396               	.LCFI42:
 397               		.cfi_def_cfa_offset 15
 398               		.cfi_offset 30, -14
 399 016c FF93      		push r31
 400               	.LCFI43:
 401               		.cfi_def_cfa_offset 16
 402               		.cfi_offset 31, -15
 403               	/* prologue: Signal */
 404               	/* frame size = 0 */
 405               	/* stack size = 15 */
 406               	.L__stack_usage = 15
  65:Pushto.c      **** 	direction(&encoder2);
 407               		.loc 1 65 0
 408 016e 80E0      		ldi r24,lo8(encoder2)
 409 0170 90E0      		ldi r25,hi8(encoder2)
 410 0172 0E94 0000 		call direction
 411               	.LVL2:
 412               	/* epilogue start */
  66:Pushto.c      **** }
 413               		.loc 1 66 0
 414 0176 FF91      		pop r31
 415 0178 EF91      		pop r30
 416 017a BF91      		pop r27
 417 017c AF91      		pop r26
 418 017e 9F91      		pop r25
 419 0180 8F91      		pop r24
 420 0182 7F91      		pop r23
 421 0184 6F91      		pop r22
 422 0186 5F91      		pop r21
 423 0188 4F91      		pop r20
 424 018a 3F91      		pop r19
 425 018c 2F91      		pop r18
 426 018e 0F90      		pop r0
 427 0190 0FBE      		out __SREG__,r0
 428 0192 0F90      		pop r0
 429 0194 1F90      		pop r1
 430 0196 1895      		reti
 431               		.cfi_endproc
 432               	.LFE10:
 434               		.section	.text.startup,"ax",@progbits
 435               	.global	main
 437               	main:
 438               	.LFB11:
  67:Pushto.c      **** 
  68:Pushto.c      **** 
  69:Pushto.c      **** int main(void)
  70:Pushto.c      **** {
 439               		.loc 1 70 0
 440               		.cfi_startproc
 441               	/* prologue: function */
 442               	/* frame size = 0 */
 443               	/* stack size = 0 */
 444               	.L__stack_usage = 0
  71:Pushto.c      **** 	system_init();
 445               		.loc 1 71 0
 446 0000 0E94 0000 		call system_init
 447               	.LVL3:
  72:Pushto.c      **** 	lcdInit();
 448               		.loc 1 72 0
 449 0004 0E94 0000 		call lcdInit
 450               	.LVL4:
 451               	.L10:
  73:Pushto.c      **** 	while(1)
  74:Pushto.c      **** 	{
  75:Pushto.c      **** 
  76:Pushto.c      **** 		keypad(&keypad_A); //odczyt klawiatury
 452               		.loc 1 76 0
 453 0008 80E0      		ldi r24,lo8(keypad_A)
 454 000a 90E0      		ldi r25,hi8(keypad_A)
 455 000c 0E94 0000 		call keypad
 456               	.LVL5:
  77:Pushto.c      **** 		keypad_proc(&keypad_A); //przetwarzanie znakow
 457               		.loc 1 77 0
 458 0010 80E0      		ldi r24,lo8(keypad_A)
 459 0012 90E0      		ldi r25,hi8(keypad_A)
 460 0014 0E94 0000 		call keypad_proc
 461               	.LVL6:
  78:Pushto.c      **** 
  79:Pushto.c      **** 		if(keypad_A.flags & KB_NEW)
 462               		.loc 1 79 0
 463 0018 8091 0000 		lds r24,keypad_A+20
 464 001c 86FF      		sbrs r24,6
 465 001e 00C0      		rjmp .L6
  80:Pushto.c      **** 		{
  81:Pushto.c      **** 			nowy_cel(&keypad_A,&telescope_A);
 466               		.loc 1 81 0
 467 0020 60E0      		ldi r22,lo8(telescope_A)
 468 0022 70E0      		ldi r23,hi8(telescope_A)
 469 0024 80E0      		ldi r24,lo8(keypad_A)
 470 0026 90E0      		ldi r25,hi8(keypad_A)
 471 0028 0E94 0000 		call nowy_cel
 472               	.LVL7:
  82:Pushto.c      **** 			keypad_A.flags &= ~KB_NEW;
 473               		.loc 1 82 0
 474 002c 8091 0000 		lds r24,keypad_A+20
 475 0030 8F7B      		andi r24,lo8(-65)
 476 0032 8093 0000 		sts keypad_A+20,r24
 477               	.L6:
  83:Pushto.c      **** 		}
  84:Pushto.c      **** 
  85:Pushto.c      **** 		if(keypad_A.flags & KB_CAL)
 478               		.loc 1 85 0
 479 0036 8091 0000 		lds r24,keypad_A+20
 480 003a 85FF      		sbrs r24,5
 481 003c 00C0      		rjmp .L7
  86:Pushto.c      **** 		{
  87:Pushto.c      **** 			kalibracja(&encoder1,&encoder2,&telescope_A); // funkcja z pushto_lib
 482               		.loc 1 87 0
 483 003e 40E0      		ldi r20,lo8(telescope_A)
 484 0040 50E0      		ldi r21,hi8(telescope_A)
 485 0042 60E0      		ldi r22,lo8(encoder2)
 486 0044 70E0      		ldi r23,hi8(encoder2)
 487 0046 80E0      		ldi r24,lo8(encoder1)
 488 0048 90E0      		ldi r25,hi8(encoder1)
 489 004a 0E94 0000 		call kalibracja
 490               	.LVL8:
  88:Pushto.c      **** 			keypad_A.flags &= ~KB_CAL;
 491               		.loc 1 88 0
 492 004e 8091 0000 		lds r24,keypad_A+20
 493 0052 8F7D      		andi r24,lo8(-33)
 494 0054 8093 0000 		sts keypad_A+20,r24
 495               	.L7:
  89:Pushto.c      **** 		}
  90:Pushto.c      **** 
  91:Pushto.c      **** 		if(keypad_A.flags & KB_CLR)
 496               		.loc 1 91 0
 497 0058 8091 0000 		lds r24,keypad_A+20
 498 005c 84FF      		sbrs r24,4
 499 005e 00C0      		rjmp .L8
  92:Pushto.c      **** 		{
  93:Pushto.c      **** 			lcd_clr();
 500               		.loc 1 93 0
 501 0060 0E94 0000 		call lcd_clr
 502               	.LVL9:
  94:Pushto.c      **** 			keypad_A.flags &= ~KB_CLR;
 503               		.loc 1 94 0
 504 0064 8091 0000 		lds r24,keypad_A+20
 505 0068 8F7E      		andi r24,lo8(-17)
 506 006a 8093 0000 		sts keypad_A+20,r24
 507               	.L8:
  95:Pushto.c      **** 		}
  96:Pushto.c      **** 
  97:Pushto.c      **** 		if(telescope_A.update==10)
 508               		.loc 1 97 0
 509 006e 8091 0000 		lds r24,telescope_A+4
 510 0072 9091 0000 		lds r25,telescope_A+4+1
 511 0076 0A97      		sbiw r24,10
 512 0078 01F4      		brne .L9
  98:Pushto.c      **** 		{
  99:Pushto.c      **** 			obliczenie_nastaw(&telescope_A); //funkcja na obliczenie nastaw, co 10sek (patrz ISR(TIMER1_COMP
 513               		.loc 1 99 0
 514 007a 80E0      		ldi r24,lo8(telescope_A)
 515 007c 90E0      		ldi r25,hi8(telescope_A)
 516 007e 0E94 0000 		call obliczenie_nastaw
 517               	.LVL10:
 100:Pushto.c      **** 			telescope_A.update=0;
 518               		.loc 1 100 0
 519 0082 1092 0000 		sts telescope_A+4+1,__zero_reg__
 520 0086 1092 0000 		sts telescope_A+4,__zero_reg__
 521               	.L9:
 101:Pushto.c      **** 		}
 102:Pushto.c      **** 
 103:Pushto.c      **** 
 104:Pushto.c      **** 		if(keypad_A.i > 14)
 522               		.loc 1 104 0
 523 008a 8091 0000 		lds r24,keypad_A+18
 524 008e 9091 0000 		lds r25,keypad_A+18+1
 525 0092 0F97      		sbiw r24,15
 526 0094 04F4      		brge .+2
 527 0096 00C0      		rjmp .L10
 105:Pushto.c      **** 			keypad_A.i=0;
 528               		.loc 1 105 0
 529 0098 1092 0000 		sts keypad_A+18+1,__zero_reg__
 530 009c 1092 0000 		sts keypad_A+18,__zero_reg__
 531 00a0 00C0      		rjmp .L10
 532               		.cfi_endproc
 533               	.LFE11:
 535               		.comm	telescope_A,26,1
 536               		.comm	keypad_A,21,1
 537               		.comm	encoder2,8,1
 538               		.comm	encoder1,8,1
 539               		.text
 540               	.Letext0:
 541               		.file 2 "/usr/lib/avr/include/stdint.h"
 542               		.file 3 "encoder.h"
 543               		.file 4 "keypad.h"
 544               		.file 5 "pushto_lib.h"
 545               		.file 6 "lcd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Pushto.c
     /tmp/cc1tZjGk.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc1tZjGk.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc1tZjGk.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc1tZjGk.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc1tZjGk.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc1tZjGk.s:12     .text:0000000000000000 system_init
                            *COM*:0000000000000008 encoder1
                            *COM*:0000000000000008 encoder2
                            *COM*:0000000000000015 keypad_A
                            *COM*:000000000000001a telescope_A
     /tmp/cc1tZjGk.s:120    .text:000000000000008a __vector_6
     /tmp/cc1tZjGk.s:244    .text:0000000000000100 __vector_1
     /tmp/cc1tZjGk.s:340    .text:000000000000014c __vector_2
     /tmp/cc1tZjGk.s:437    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__addsf3
direction
lcdInit
keypad
keypad_proc
nowy_cel
kalibracja
lcd_clr
obliczenie_nastaw
__do_clear_bss
