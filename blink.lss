
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012a  00000000  00000000  000003f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d0  00000000  00000000  00000523  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000195  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009c  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000098  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0x0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000L
#include <avr/io.h>
#include <util/delay.h>                

int main(void)
{
  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
    DDRB  |= _BV(0)|_BV(1);
  84:	87 b3       	in	r24, 0x17	; 23
  86:	83 60       	ori	r24, 0x03	; 3
  88:	87 bb       	out	0x17, r24	; 23
    PORTB |= _BV(0);
  8a:	c0 9a       	sbi	0x18, 0	; 24
    PORTB &= ~_BV(1);
  8c:	c1 98       	cbi	0x18, 1	; 24
    DDRD  &= ~_BV(0);
  8e:	88 98       	cbi	0x11, 0	; 17
    PORTD |=  _BV(0);
  90:	90 9a       	sbi	0x12, 0	; 18

    while (1) 
    {
        PORTB ^=_BV(0);
  92:	88 24       	eor	r8, r8
  94:	83 94       	inc	r8
        PORTB ^=_BV(1);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	98 2e       	mov	r9, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	c9 e1       	ldi	r28, 0x19	; 25
  9c:	d0 e0       	ldi	r29, 0x00	; 0
    DDRD  &= ~_BV(0);
    PORTD |=  _BV(0);

    while (1) 
    {
        PORTB ^=_BV(0);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	88 25       	eor	r24, r8
  a2:	88 bb       	out	0x18, r24	; 24
        PORTB ^=_BV(1);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	89 25       	eor	r24, r9
  a8:	88 bb       	out	0x18, r24	; 24
        
        _delay_ms((PIND & _BV(0))? 1000: 200);
  aa:	80 99       	sbic	0x10, 0	; 16
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <main+0x58>
  ae:	0f 2e       	mov	r0, r31
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	af 2e       	mov	r10, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	bf 2e       	mov	r11, r31
  b8:	f8 e4       	ldi	r31, 0x48	; 72
  ba:	cf 2e       	mov	r12, r31
  bc:	f3 e4       	ldi	r31, 0x43	; 67
  be:	df 2e       	mov	r13, r31
  c0:	f0 2d       	mov	r31, r0
  c2:	0a c0       	rjmp	.+20     	; 0xd8 <main+0x6c>
  c4:	0f 2e       	mov	r0, r31
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	af 2e       	mov	r10, r31
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	bf 2e       	mov	r11, r31
  ce:	fa e7       	ldi	r31, 0x7A	; 122
  d0:	cf 2e       	mov	r12, r31
  d2:	f4 e4       	ldi	r31, 0x44	; 68
  d4:	df 2e       	mov	r13, r31
  d6:	f0 2d       	mov	r31, r0
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  d8:	c6 01       	movw	r24, r12
  da:	b5 01       	movw	r22, r10
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	4a e7       	ldi	r20, 0x7A	; 122
  e2:	53 e4       	ldi	r21, 0x43	; 67
  e4:	0e 94 28 01 	call	0x250	; 0x250 <__mulsf3>
  e8:	7b 01       	movw	r14, r22
  ea:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e8       	ldi	r20, 0x80	; 128
  f2:	5f e3       	ldi	r21, 0x3F	; 63
  f4:	0e 94 a7 00 	call	0x14e	; 0x14e <__cmpsf2>
  f8:	88 23       	and	r24, r24
  fa:	1c f4       	brge	.+6      	; 0x102 <main+0x96>
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	22 c0       	rjmp	.+68     	; 0x146 <main+0xda>
		__ticks = 1;
	else if (__tmp > 65535)
 102:	c8 01       	movw	r24, r16
 104:	b7 01       	movw	r22, r14
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	4f e7       	ldi	r20, 0x7F	; 127
 10c:	57 e4       	ldi	r21, 0x47	; 71
 10e:	0e 94 24 01 	call	0x248	; 0x248 <__gesf2>
 112:	18 16       	cp	r1, r24
 114:	a4 f4       	brge	.+40     	; 0x13e <main+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 116:	c6 01       	movw	r24, r12
 118:	b5 01       	movw	r22, r10
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e2       	ldi	r20, 0x20	; 32
 120:	51 e4       	ldi	r21, 0x41	; 65
 122:	0e 94 28 01 	call	0x250	; 0x250 <__mulsf3>
 126:	0e 94 ab 00 	call	0x156	; 0x156 <__fixunssfsi>
 12a:	05 c0       	rjmp	.+10     	; 0x136 <main+0xca>
 12c:	ce 01       	movw	r24, r28
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0xc2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 132:	61 50       	subi	r22, 0x01	; 1
 134:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	61 15       	cp	r22, r1
 138:	71 05       	cpc	r23, r1
 13a:	c1 f7       	brne	.-16     	; 0x12c <main+0xc0>
 13c:	b0 cf       	rjmp	.-160    	; 0x9e <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 13e:	c8 01       	movw	r24, r16
 140:	b7 01       	movw	r22, r14
 142:	0e 94 ab 00 	call	0x156	; 0x156 <__fixunssfsi>
 146:	cb 01       	movw	r24, r22
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xdc>
 14c:	a8 cf       	rjmp	.-176    	; 0x9e <main+0x32>

0000014e <__cmpsf2>:
 14e:	2f d0       	rcall	.+94     	; 0x1ae <__fp_cmp>
 150:	08 f4       	brcc	.+2      	; 0x154 <__cmpsf2+0x6>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret

00000156 <__fixunssfsi>:
 156:	57 d0       	rcall	.+174    	; 0x206 <__fp_splitA>
 158:	88 f0       	brcs	.+34     	; 0x17c <__fixunssfsi+0x26>
 15a:	9f 57       	subi	r25, 0x7F	; 127
 15c:	90 f0       	brcs	.+36     	; 0x182 <__fixunssfsi+0x2c>
 15e:	b9 2f       	mov	r27, r25
 160:	99 27       	eor	r25, r25
 162:	b7 51       	subi	r27, 0x17	; 23
 164:	a0 f0       	brcs	.+40     	; 0x18e <__fixunssfsi+0x38>
 166:	d1 f0       	breq	.+52     	; 0x19c <__fixunssfsi+0x46>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	88 1f       	adc	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	1a f0       	brmi	.+6      	; 0x178 <__fixunssfsi+0x22>
 172:	ba 95       	dec	r27
 174:	c9 f7       	brne	.-14     	; 0x168 <__fixunssfsi+0x12>
 176:	12 c0       	rjmp	.+36     	; 0x19c <__fixunssfsi+0x46>
 178:	b1 30       	cpi	r27, 0x01	; 1
 17a:	81 f0       	breq	.+32     	; 0x19c <__fixunssfsi+0x46>
 17c:	5e d0       	rcall	.+188    	; 0x23a <__fp_zero>
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	08 95       	ret
 182:	5b c0       	rjmp	.+182    	; 0x23a <__fp_zero>
 184:	67 2f       	mov	r22, r23
 186:	78 2f       	mov	r23, r24
 188:	88 27       	eor	r24, r24
 18a:	b8 5f       	subi	r27, 0xF8	; 248
 18c:	39 f0       	breq	.+14     	; 0x19c <__fixunssfsi+0x46>
 18e:	b9 3f       	cpi	r27, 0xF9	; 249
 190:	cc f3       	brlt	.-14     	; 0x184 <__fixunssfsi+0x2e>
 192:	86 95       	lsr	r24
 194:	77 95       	ror	r23
 196:	67 95       	ror	r22
 198:	b3 95       	inc	r27
 19a:	d9 f7       	brne	.-10     	; 0x192 <__fixunssfsi+0x3c>
 19c:	3e f4       	brtc	.+14     	; 0x1ac <__fixunssfsi+0x56>
 19e:	90 95       	com	r25
 1a0:	80 95       	com	r24
 1a2:	70 95       	com	r23
 1a4:	61 95       	neg	r22
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	8f 4f       	sbci	r24, 0xFF	; 255
 1aa:	9f 4f       	sbci	r25, 0xFF	; 255
 1ac:	08 95       	ret

000001ae <__fp_cmp>:
 1ae:	99 0f       	add	r25, r25
 1b0:	00 08       	sbc	r0, r0
 1b2:	55 0f       	add	r21, r21
 1b4:	aa 0b       	sbc	r26, r26
 1b6:	e0 e8       	ldi	r30, 0x80	; 128
 1b8:	fe ef       	ldi	r31, 0xFE	; 254
 1ba:	16 16       	cp	r1, r22
 1bc:	17 06       	cpc	r1, r23
 1be:	e8 07       	cpc	r30, r24
 1c0:	f9 07       	cpc	r31, r25
 1c2:	c0 f0       	brcs	.+48     	; 0x1f4 <__fp_cmp+0x46>
 1c4:	12 16       	cp	r1, r18
 1c6:	13 06       	cpc	r1, r19
 1c8:	e4 07       	cpc	r30, r20
 1ca:	f5 07       	cpc	r31, r21
 1cc:	98 f0       	brcs	.+38     	; 0x1f4 <__fp_cmp+0x46>
 1ce:	62 1b       	sub	r22, r18
 1d0:	73 0b       	sbc	r23, r19
 1d2:	84 0b       	sbc	r24, r20
 1d4:	95 0b       	sbc	r25, r21
 1d6:	39 f4       	brne	.+14     	; 0x1e6 <__fp_cmp+0x38>
 1d8:	0a 26       	eor	r0, r26
 1da:	61 f0       	breq	.+24     	; 0x1f4 <__fp_cmp+0x46>
 1dc:	23 2b       	or	r18, r19
 1de:	24 2b       	or	r18, r20
 1e0:	25 2b       	or	r18, r21
 1e2:	21 f4       	brne	.+8      	; 0x1ec <__fp_cmp+0x3e>
 1e4:	08 95       	ret
 1e6:	0a 26       	eor	r0, r26
 1e8:	09 f4       	brne	.+2      	; 0x1ec <__fp_cmp+0x3e>
 1ea:	a1 40       	sbci	r26, 0x01	; 1
 1ec:	a6 95       	lsr	r26
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	81 1d       	adc	r24, r1
 1f2:	81 1d       	adc	r24, r1
 1f4:	08 95       	ret

000001f6 <__fp_split3>:
 1f6:	57 fd       	sbrc	r21, 7
 1f8:	90 58       	subi	r25, 0x80	; 128
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	59 f0       	breq	.+22     	; 0x216 <__fp_splitA+0x10>
 200:	5f 3f       	cpi	r21, 0xFF	; 255
 202:	71 f0       	breq	.+28     	; 0x220 <__fp_splitA+0x1a>
 204:	47 95       	ror	r20

00000206 <__fp_splitA>:
 206:	88 0f       	add	r24, r24
 208:	97 fb       	bst	r25, 7
 20a:	99 1f       	adc	r25, r25
 20c:	61 f0       	breq	.+24     	; 0x226 <__fp_splitA+0x20>
 20e:	9f 3f       	cpi	r25, 0xFF	; 255
 210:	79 f0       	breq	.+30     	; 0x230 <__fp_splitA+0x2a>
 212:	87 95       	ror	r24
 214:	08 95       	ret
 216:	12 16       	cp	r1, r18
 218:	13 06       	cpc	r1, r19
 21a:	14 06       	cpc	r1, r20
 21c:	55 1f       	adc	r21, r21
 21e:	f2 cf       	rjmp	.-28     	; 0x204 <__fp_split3+0xe>
 220:	46 95       	lsr	r20
 222:	f1 df       	rcall	.-30     	; 0x206 <__fp_splitA>
 224:	08 c0       	rjmp	.+16     	; 0x236 <__fp_splitA+0x30>
 226:	16 16       	cp	r1, r22
 228:	17 06       	cpc	r1, r23
 22a:	18 06       	cpc	r1, r24
 22c:	99 1f       	adc	r25, r25
 22e:	f1 cf       	rjmp	.-30     	; 0x212 <__fp_splitA+0xc>
 230:	86 95       	lsr	r24
 232:	71 05       	cpc	r23, r1
 234:	61 05       	cpc	r22, r1
 236:	08 94       	sec
 238:	08 95       	ret

0000023a <__fp_zero>:
 23a:	e8 94       	clt

0000023c <__fp_szero>:
 23c:	bb 27       	eor	r27, r27
 23e:	66 27       	eor	r22, r22
 240:	77 27       	eor	r23, r23
 242:	cb 01       	movw	r24, r22
 244:	97 f9       	bld	r25, 7
 246:	08 95       	ret

00000248 <__gesf2>:
 248:	b2 df       	rcall	.-156    	; 0x1ae <__fp_cmp>
 24a:	08 f4       	brcc	.+2      	; 0x24e <__gesf2+0x6>
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__mulsf3>:
 250:	0b d0       	rcall	.+22     	; 0x268 <__mulsf3x>
 252:	78 c0       	rjmp	.+240    	; 0x344 <__fp_round>
 254:	69 d0       	rcall	.+210    	; 0x328 <__fp_pscA>
 256:	28 f0       	brcs	.+10     	; 0x262 <__mulsf3+0x12>
 258:	6e d0       	rcall	.+220    	; 0x336 <__fp_pscB>
 25a:	18 f0       	brcs	.+6      	; 0x262 <__mulsf3+0x12>
 25c:	95 23       	and	r25, r21
 25e:	09 f0       	breq	.+2      	; 0x262 <__mulsf3+0x12>
 260:	5a c0       	rjmp	.+180    	; 0x316 <__fp_inf>
 262:	5f c0       	rjmp	.+190    	; 0x322 <__fp_nan>
 264:	11 24       	eor	r1, r1
 266:	ea cf       	rjmp	.-44     	; 0x23c <__fp_szero>

00000268 <__mulsf3x>:
 268:	c6 df       	rcall	.-116    	; 0x1f6 <__fp_split3>
 26a:	a0 f3       	brcs	.-24     	; 0x254 <__mulsf3+0x4>

0000026c <__mulsf3_pse>:
 26c:	95 9f       	mul	r25, r21
 26e:	d1 f3       	breq	.-12     	; 0x264 <__mulsf3+0x14>
 270:	95 0f       	add	r25, r21
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	55 1f       	adc	r21, r21
 276:	62 9f       	mul	r22, r18
 278:	f0 01       	movw	r30, r0
 27a:	72 9f       	mul	r23, r18
 27c:	bb 27       	eor	r27, r27
 27e:	f0 0d       	add	r31, r0
 280:	b1 1d       	adc	r27, r1
 282:	63 9f       	mul	r22, r19
 284:	aa 27       	eor	r26, r26
 286:	f0 0d       	add	r31, r0
 288:	b1 1d       	adc	r27, r1
 28a:	aa 1f       	adc	r26, r26
 28c:	64 9f       	mul	r22, r20
 28e:	66 27       	eor	r22, r22
 290:	b0 0d       	add	r27, r0
 292:	a1 1d       	adc	r26, r1
 294:	66 1f       	adc	r22, r22
 296:	82 9f       	mul	r24, r18
 298:	22 27       	eor	r18, r18
 29a:	b0 0d       	add	r27, r0
 29c:	a1 1d       	adc	r26, r1
 29e:	62 1f       	adc	r22, r18
 2a0:	73 9f       	mul	r23, r19
 2a2:	b0 0d       	add	r27, r0
 2a4:	a1 1d       	adc	r26, r1
 2a6:	62 1f       	adc	r22, r18
 2a8:	83 9f       	mul	r24, r19
 2aa:	a0 0d       	add	r26, r0
 2ac:	61 1d       	adc	r22, r1
 2ae:	22 1f       	adc	r18, r18
 2b0:	74 9f       	mul	r23, r20
 2b2:	33 27       	eor	r19, r19
 2b4:	a0 0d       	add	r26, r0
 2b6:	61 1d       	adc	r22, r1
 2b8:	23 1f       	adc	r18, r19
 2ba:	84 9f       	mul	r24, r20
 2bc:	60 0d       	add	r22, r0
 2be:	21 1d       	adc	r18, r1
 2c0:	82 2f       	mov	r24, r18
 2c2:	76 2f       	mov	r23, r22
 2c4:	6a 2f       	mov	r22, r26
 2c6:	11 24       	eor	r1, r1
 2c8:	9f 57       	subi	r25, 0x7F	; 127
 2ca:	50 40       	sbci	r21, 0x00	; 0
 2cc:	8a f0       	brmi	.+34     	; 0x2f0 <__mulsf3_pse+0x84>
 2ce:	e1 f0       	breq	.+56     	; 0x308 <__mulsf3_pse+0x9c>
 2d0:	88 23       	and	r24, r24
 2d2:	4a f0       	brmi	.+18     	; 0x2e6 <__mulsf3_pse+0x7a>
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	bb 1f       	adc	r27, r27
 2da:	66 1f       	adc	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	91 50       	subi	r25, 0x01	; 1
 2e2:	50 40       	sbci	r21, 0x00	; 0
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <__mulsf3_pse+0x64>
 2e6:	9e 3f       	cpi	r25, 0xFE	; 254
 2e8:	51 05       	cpc	r21, r1
 2ea:	70 f0       	brcs	.+28     	; 0x308 <__mulsf3_pse+0x9c>
 2ec:	14 c0       	rjmp	.+40     	; 0x316 <__fp_inf>
 2ee:	a6 cf       	rjmp	.-180    	; 0x23c <__fp_szero>
 2f0:	5f 3f       	cpi	r21, 0xFF	; 255
 2f2:	ec f3       	brlt	.-6      	; 0x2ee <__mulsf3_pse+0x82>
 2f4:	98 3e       	cpi	r25, 0xE8	; 232
 2f6:	dc f3       	brlt	.-10     	; 0x2ee <__mulsf3_pse+0x82>
 2f8:	86 95       	lsr	r24
 2fa:	77 95       	ror	r23
 2fc:	67 95       	ror	r22
 2fe:	b7 95       	ror	r27
 300:	f7 95       	ror	r31
 302:	e7 95       	ror	r30
 304:	9f 5f       	subi	r25, 0xFF	; 255
 306:	c1 f7       	brne	.-16     	; 0x2f8 <__mulsf3_pse+0x8c>
 308:	fe 2b       	or	r31, r30
 30a:	88 0f       	add	r24, r24
 30c:	91 1d       	adc	r25, r1
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	97 f9       	bld	r25, 7
 314:	08 95       	ret

00000316 <__fp_inf>:
 316:	97 f9       	bld	r25, 7
 318:	9f 67       	ori	r25, 0x7F	; 127
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	08 95       	ret

00000322 <__fp_nan>:
 322:	9f ef       	ldi	r25, 0xFF	; 255
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	08 95       	ret

00000328 <__fp_pscA>:
 328:	00 24       	eor	r0, r0
 32a:	0a 94       	dec	r0
 32c:	16 16       	cp	r1, r22
 32e:	17 06       	cpc	r1, r23
 330:	18 06       	cpc	r1, r24
 332:	09 06       	cpc	r0, r25
 334:	08 95       	ret

00000336 <__fp_pscB>:
 336:	00 24       	eor	r0, r0
 338:	0a 94       	dec	r0
 33a:	12 16       	cp	r1, r18
 33c:	13 06       	cpc	r1, r19
 33e:	14 06       	cpc	r1, r20
 340:	05 06       	cpc	r0, r21
 342:	08 95       	ret

00000344 <__fp_round>:
 344:	09 2e       	mov	r0, r25
 346:	03 94       	inc	r0
 348:	00 0c       	add	r0, r0
 34a:	11 f4       	brne	.+4      	; 0x350 <__fp_round+0xc>
 34c:	88 23       	and	r24, r24
 34e:	52 f0       	brmi	.+20     	; 0x364 <__fp_round+0x20>
 350:	bb 0f       	add	r27, r27
 352:	40 f4       	brcc	.+16     	; 0x364 <__fp_round+0x20>
 354:	bf 2b       	or	r27, r31
 356:	11 f4       	brne	.+4      	; 0x35c <__fp_round+0x18>
 358:	60 ff       	sbrs	r22, 0
 35a:	04 c0       	rjmp	.+8      	; 0x364 <__fp_round+0x20>
 35c:	6f 5f       	subi	r22, 0xFF	; 255
 35e:	7f 4f       	sbci	r23, 0xFF	; 255
 360:	8f 4f       	sbci	r24, 0xFF	; 255
 362:	9f 4f       	sbci	r25, 0xFF	; 255
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
